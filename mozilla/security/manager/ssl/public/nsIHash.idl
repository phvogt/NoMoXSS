/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corp..
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): David Drinan <ddrinan@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

%{ C++
#define NS_HASH_CONTRACTID "@mozilla.org/nsHash;1"
%}

[ptr] native UnsignedCharPtr(unsigned char);

/*
 * nsIHash
 *  Generic hashing interface
 */
[uuid(a31a3028-ae28-11d5-ba4b-00108303b117)]
interface nsIHash : nsISupports
{
  const short HASH_AlgNULL = 0;
  const short HASH_AlgMD2  = 1;
  const short HASH_AlgMD5  = 2;
  const short HASH_AlgSHA1 = 3;
  const unsigned long MD2_LEN  = 16;
  const unsigned long MD5_LEN  = 16;
  const unsigned long SHA1_LEN = 20;
  const unsigned long MAX_HASH_LEN = SHA1_LEN;  

  unsigned long resultLen(in short aAlg);
  void create(in short aAlg);
  void begin();
  void update(in UnsignedCharPtr aBuf, in  unsigned long aLen);
  void end(in UnsignedCharPtr aHash, out unsigned long aLen, in unsigned long aMaxLen);
};

