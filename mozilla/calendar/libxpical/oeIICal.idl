/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is OEone Calendar Code, released October 31st, 2001.
 *
 * The Initial Developer of the Original Code is
 * OEone Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Mostafa Hosseini <mostafah@oeone.com>
 *                 Chris Charabaruk <ccharabaruk@meldstar.com>
 *                 ArentJan Banck <ajbanck@planet.nl>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/* The Interface Description of all calendar objects listing various fields and methods of each */

#include "nsISupports.idl"
#include "nsISupportsArray.idl"

interface nsIAbCard;
interface nsIMsgAttachment;
interface nsISimpleEnumerator;

/**
 * The uuid is a unique number identifying the interface normally
 * called IID. It can be generated as follows:
 *
 * Windows: guidgen.exe
 * Unix: uuidgen which comes with e2fsprogs package
 * Mac: ???
 * All platform: Using irc, connect to irc.mozilla.org and type in
 *				/join #mozilla
 *				/msg mozbot uuid
 *
 */

typedef long eventMethodProperty;
typedef long eventStatusProperty;
typedef long Componenttype;

interface oeIICal;

[scriptable, uuid(db180127-cc56-40c6-a8ef-7e329e1c4142)]
interface oeIDateTime : nsISupports
{
    attribute short year;
    attribute short month;
    attribute short day;
    attribute short hour;
    attribute short minute;
    attribute boolean utc;
    readonly attribute string tzID;
    PRTime getTime();
    void setTime( in PRTime ms );
    void setTimeInTimezone( in PRTime ms, in string tzID );
    string toString();
    void clear();
};

[scriptable, uuid(89c5cd5a-af2d-45e6-83c7-2f2420a13626)]
interface oeIICalEvent : nsISupports
{
    const eventMethodProperty ICAL_METHOD_X = 10011;
    const eventMethodProperty ICAL_METHOD_PUBLISH = 10012;
    const eventMethodProperty ICAL_METHOD_REQUEST = 10013;
    const eventStatusProperty ICAL_STATUS_X = 10028;
    const eventStatusProperty ICAL_STATUS_TENTATIVE = 10029;
    const eventStatusProperty ICAL_STATUS_CONFIRMED = 10030;
    const eventStatusProperty ICAL_STATUS_COMPLETED = 10031;
    const eventStatusProperty ICAL_STATUS_NEEDSACTION = 10032;
    const eventStatusProperty ICAL_STATUS_CANCELLED = 10033;
    const eventStatusProperty ICAL_STATUS_INPROCESS = 10034;
    const eventStatusProperty ICAL_STATUS_DRAFT = 10035;
    const eventStatusProperty ICAL_STATUS_FINAL = 10036;
    const eventStatusProperty ICAL_STATUS_NONE = 10037;

    const Componenttype XPICAL_VEVENT_COMPONENT = 4;
    const Componenttype XPICAL_VTODO_COMPONENT = 5;

    readonly attribute oeIDateTime start;
    readonly attribute oeIDateTime end;
    readonly attribute oeIDateTime stamp;
    readonly attribute oeIICal parent;
    readonly attribute Componenttype type;
    readonly attribute PRTime lastModified;

    attribute string id;
    attribute AUTF8String title;
    attribute AUTF8String description;
    attribute AUTF8String location;
    attribute AUTF8String categories;
    attribute boolean privateEvent;
    attribute string syncId;
    attribute boolean allDay;
    attribute boolean alarm;
    attribute string alarmUnits;
    attribute unsigned long alarmLength;
    attribute string alarmEmailAddress;
    attribute string inviteEmailAddress;
    attribute unsigned long recurInterval;
    attribute unsigned long recurCount;
    readonly attribute oeIDateTime recurEnd;
    attribute boolean recur;
    attribute string recurUnits;
    attribute boolean recurForever;
    attribute short recurWeekdays;
    attribute short recurWeekNumber;
    attribute PRTime lastAlarmAck;
    attribute AUTF8String url;
    attribute short priority;
    attribute eventMethodProperty method;
    attribute eventStatusProperty status;
    void setDuration( in boolean is_negative, in unsigned short weeks, in unsigned short days, in unsigned short hours,
                      in unsigned short minutes, in unsigned short seconds );
    void getDuration( out boolean is_negative, out unsigned short weeks, out unsigned short days, out unsigned short hours,
                      out unsigned short minutes, out unsigned short seconds );
    boolean getNextRecurrence( in PRTime begin, out PRTime result);
    boolean getPreviousOccurrence( in PRTime beforethis, out PRTime result);
    AUTF8String getIcalString();
    boolean parseIcalString(in AUTF8String icalstr);
    void addException( in PRTime exdate );
	nsISimpleEnumerator getExceptions();
	void removeAllExceptions();
    void setSnoozeTime( in PRTime exdate );
    oeIICalEvent clone();

    //attachments
    readonly attribute nsISupportsArray attachmentsArray;
    void addAttachment(in nsIMsgAttachment attachment);
    void removeAttachment(in nsIMsgAttachment attachment);
    void removeAttachments();

    //contacts
    readonly attribute nsISupportsArray contactsArray;
    void addContact(in nsIAbCard contact);
    void removeContact(in nsIAbCard contact);
    void removeContacts();

    void reportError( in short severity, in unsigned long errorid, in string errorstring );
    void setParameter( in string name, in string value );
    string getParameter( in string name );

    void updateLastModified();
};

[scriptable, uuid(f95df40e-0d5f-49ec-9ba8-4b88d3eb53e0)]
interface oeIICalEventDisplay : oeIICalEvent
{
    readonly attribute oeIICalEvent event;
    attribute PRTime displayDate;
    attribute PRTime displayEndDate;
};

[scriptable, uuid(d44987b4-1dd1-11b2-9783-8a78ed685caf)]
interface oeIICalTodo : oeIICalEvent
{
    readonly attribute oeIDateTime due;
    readonly attribute oeIDateTime completed;
    attribute short percent;
    AUTF8String getTodoIcalString();
    boolean parseTodoIcalString(in AUTF8String icalstr);
};

[scriptable, uuid(b8584baa-1507-40d4-b542-5a2758e1c86d)]
interface oeIICalObserver : nsISupports
{
    void onStartBatch();
    void onEndBatch();
    void onLoad();
    void onAddItem( in oeIICalEvent e);
    void onModifyItem( in oeIICalEvent e, in oeIICalEvent olde );
    void onDeleteItem( in oeIICalEvent e);
    void onAlarm( in oeIICalEventDisplay e);
    void onError( in short severity, in unsigned long errorid, in string errorstring );
};

[scriptable, uuid(7a4fd625-69a8-4008-932e-cccc227b402c)]
interface oeIICalTodoObserver : nsISupports
{
    void onStartBatch();
    void onEndBatch();
    void onLoad();
    void onAddItem( in oeIICalTodo e);
    void onModifyItem( in oeIICalTodo e, in oeIICalTodo olde );
    void onDeleteItem( in oeIICalTodo e);
    void onAlarm( in oeIICalEventDisplay e);
    void onError( in short severity, in unsigned long errorid, in string errorstring );
};

[scriptable, uuid(981ab93d-ad51-45bb-a4a2-e158c2cfdeb4)]
interface oeIICal : nsISupports
{
	void Test();

    attribute boolean batchMode;
    readonly attribute oeIICalTodo filter;
    attribute string server;

    void addObserver( in oeIICalObserver observer );
    void removeObserver( in oeIICalObserver observer );
    void addTodoObserver( in oeIICalTodoObserver observer );
    void removeTodoObserver( in oeIICalTodoObserver observer );
	string addEvent( in oeIICalEvent icalevent );
	string modifyEvent( in oeIICalEvent icalevent );
	void deleteEvent( in string id );
	oeIICalEvent fetchEvent( in string id );
//	nsISimpleEnumerator searchBySQL( in string sqlstr );
	nsISimpleEnumerator getAllEvents();
	nsISimpleEnumerator getEventsForMonth( in PRTime date );
	nsISimpleEnumerator getEventsForWeek( in PRTime date );
	nsISimpleEnumerator getEventsForDay( in PRTime date );
	nsISimpleEnumerator getEventsForRange( in PRTime begindate, in PRTime enddate );
	nsISimpleEnumerator getNextNEvents( in PRTime begindate, in long count );
	nsISimpleEnumerator getFirstEventsForRange( in PRTime begindate, in PRTime enddate );

	string addTodo( in oeIICalTodo icaltodo );
	string modifyTodo( in oeIICalTodo icaltodo );
	void deleteTodo( in string id );
	oeIICalTodo fetchTodo( in string id );
	nsISimpleEnumerator getAllTodos();

    void resetFilter();
    void reportError( in short severity, in unsigned long errorid, in string errorstring );
};

[scriptable, uuid(c89ec938-f690-4f62-a4b3-11e962ba2314)]
interface oeIICalContainer : nsISupports
{
    attribute boolean batchMode;
    readonly attribute oeIICalTodo filter;

	void addCalendar( in string server );
	void removeCalendar( in string server );
    oeIICal getCalendar( in string server );
	void addCalendars( in unsigned long serverCount, [array, size_is(serverCount)] in string servers );
    void addObserver( in oeIICalObserver observer );
    void removeObserver( in oeIICalObserver observer );
    void addTodoObserver( in oeIICalTodoObserver observer );
    void removeTodoObserver( in oeIICalTodoObserver observer );
	string addEvent( in oeIICalEvent icalevent, in string server );
	string modifyEvent( in oeIICalEvent icalevent );
	void deleteEvent( in string id );
	oeIICalEvent fetchEvent( in string id );
	nsISimpleEnumerator getAllEvents();
	nsISimpleEnumerator getEventsForMonth( in PRTime date );
	nsISimpleEnumerator getEventsForWeek( in PRTime date );
	nsISimpleEnumerator getEventsForDay( in PRTime date  );
	nsISimpleEnumerator getEventsForRange( in PRTime begindate, in PRTime enddate );
	nsISimpleEnumerator getNextNEvents( in PRTime begindate, in long count );
	nsISimpleEnumerator getFirstEventsForRange( in PRTime begindate, in PRTime enddate );

	string addTodo( in oeIICalTodo icaltodo, in string server );
	string modifyTodo( in oeIICalTodo icaltodo );
	void deleteTodo( in string id );
	oeIICalTodo fetchTodo( in string id );
	nsISimpleEnumerator getAllTodos();

    void resetFilter();
    void reportError( in short severity, in unsigned long errorid, in string errorstring );
};

[scriptable, uuid(0d42d962-e5fd-428b-b622-867928c9b669)]
interface oeIICalError : nsISupports
{
    //severity codes
    const long CAL_DEBUG = 0;
    const long CAL_WARN = 1;
    const long CAL_PROBLEM = 2;
    const long CAL_CRITICAL = 3;

    //error codes
    const long UID_NOT_FOUND               =  1001;
};

%{ C++
extern nsresult
NS_NewICal(oeIICal** inst);
extern nsresult
NS_NewICalEvent(oeIICalEvent** inst);
extern nsresult
NS_NewICalTodo(oeIICalTodo** inst);
extern nsresult
NS_NewDateTime(oeIDateTime** inst);
extern nsresult
NS_NewICalEventDisplay( oeIICalEvent* event, oeIICalEventDisplay** inst );

#define GENERATE_CAL_FAILURE(x) \
            (NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_CALENDAR,x))
#define NS_ERROR_CAL_UID_NOT_FOUND              \
  GENERATE_CAL_FAILURE(oeIICalError::UID_NOT_FOUND)
%}
