/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla IPC.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Darin Fisher <darin@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * ipcIClientQueryHandler
 *
 * the methods on this interface are called when the result of a client query
 * becomes available.
 */
[scriptable, uuid(6fefea5c-f747-4bb0-972f-2a7b363a01db)]
interface ipcIClientQueryHandler : nsISupports
{
    /**
     * called on completion of a client query.
     *
     * @param aQueryID
     *        the return value from one of the "query" methods.
     * @param aStatus
     *        the status of the query.  if this is a failure code, then the
     *        query failed, otherwise the query succeeded.  the value of this
     *        parameter explains the reason for any failure.
     * @param aClientID
     *     ...
     */
    void onQueryComplete(in unsigned long aQueryID,
                         in nsresult aStatus,
                         in unsigned long aClientID,
                        [array, size_is(aNameCount)]
                         in string aClientNames,
                         in unsigned long aNameCount,
                        [array, const, size_is(aTargetCount)]
                         in nsIDPtr aClientTargets,
                         in unsigned long aTargetCount);
};
