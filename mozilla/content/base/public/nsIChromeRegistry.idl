/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla browser.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   pav
 *   Blake Ross (blaker@netscape.com)
 *   Benjamin Smedberg (bsmedberg@covad.net)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIURL.idl"
#include "nsISimpleEnumerator.idl"
#include "nsISupportsArray.idl"

[scriptable, uuid(68389281-f6d0-4533-841d-344a2018140c)]
interface nsIChromeRegistry : nsISupports
{
  const PRInt32 NONE = 0;
  const PRInt32 PARTIAL = 1;
  const PRInt32 FULL = 2;

  /**
   * Convert a chrome URL into a canonical representation; specifically,
   *
   *   chrome://package/provider/file
   *
   * Chrome URLs are allowed to be specified in "shorthand", leaving the
   * "file" portion off. In that case, the URL is expanded to:
   *
   *   chrome://package/provider/package.ext
   *
   * where "ext" is:
   *
   *   "xul" for a "content" package,
   *   "css" for a "skin" package, and
   *   "dtd" for a "locale" package.
   *
   * @param aChromeURL the URL that is to be canonified.
   */
  void canonify(in nsIURI aChromeURL);

  /**
   * Convert a chrome URL to a "real" using the information in the registry.
   * Does not modify aChromeURL.
   *
   * @param aChromeURL the URL that is to be converted.
   */
  AUTF8String convertChromeURL(in nsIURI aChromeURL);

  /**
   * refresh the chrome list at runtime, looking for new packages/etc
   */
  void checkForNewChrome();
};

[scriptable, uuid(f4c2e8a8-ff7b-472a-a6b7-ef0444f2a60e)]
interface nsIXULChromeRegistry : nsIChromeRegistry {
  /* Should be called when locales change to reload all chrome (including XUL). */
  void reloadChrome();
  
  ACString getSelectedLocale(in ACString package);

  /* Should be called when skins change. Reloads only stylesheets. */
  void refreshSkins();

  boolean allowScriptsForSkin(in nsIURI url);

  /* Whether or not an addon package can dynamically overlay another package. 
     You can use these APIs to effectively disable a chrome add-on without
     uninstalling it. */
  void setAllowOverlaysForPackage(in wstring packageName, in boolean allowOverlays);

  /* Installation APIs */
  void installSkin(in string baseURL,
                   in boolean useProfile,
                   in boolean allowScripts);
  
  void uninstallSkin(in ACString skinName, in boolean useProfile);

  void installLocale(in string baseURL, in boolean useProfile);
  void uninstallLocale(in ACString localeName, in boolean useProfile);

  void installPackage(in string baseURL, in boolean useProfile);
  void uninstallPackage(in ACString packageName, in boolean useProfile);
};

%{ C++

#define NS_CHROMEREGISTRY_CONTRACTID \
  "@mozilla.org/chrome/chrome-registry;1"

/**
 * Chrome registry will notify various caches that all chrome files need
 * flushing.
 */
#define NS_CHROME_FLUSH_TOPIC \
  "chrome-flush-caches"

/**
 * Chrome registry will notify various caches that skin files need flushing.
 * If "chrome-flush-caches" is notified, this topic will *not* be notified.
 */
#define NS_CHROME_FLUSH_SKINS_TOPIC \
  "chrome-flush-skin-caches"

%}
