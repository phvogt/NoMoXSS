/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "MPL"); you may not use this file
 * except in compliance with the MPL. You may obtain a copy of
 * the MPL at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the MPL is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the MPL for the specific language governing
 * rights and limitations under the MPL.
 * 
 * The Original Code is XMLterm.
 * 
 * The Initial Developer of the Original Code is Ramalingam Saravanan.
 * Portions created by Ramalingam Saravanan <svn@xmlterm.org> are
 * Copyright (C) 1999 Ramalingam Saravanan. All Rights Reserved.
 * 
 * Contributor(s):
 */

/* mozIXMLTermShell.idl: Javascript-accessible wrapper for mozIXMLTerminal
 */

#include "nsISupports.idl"
#include "mozILineTerm.idl"

interface nsIDOMWindowInternal;



%{C++
#define MOZXMLTERMSHELL_CLASSNAME  "XMLTerm Shell Component"
#define MOZXMLTERMSHELL_CONTRACTID "@mozilla.org/xmlterm/xmltermshell;1"

#define MOZXMLTERMSHELL_CID                  \
{ /* 0eb82b31-43a2-11d3-8e76-006008948af5 */ \
   0x0eb82b31, 0x43a2, 0x11d3,               \
{0x8e, 0x76, 0x00, 0x60, 0x08, 0x94, 0x8a, 0xf5} }
%}

[scriptable, uuid(0eb82b30-43a2-11d3-8e76-006008948af5)]

interface mozIXMLTermShell : nsISupports
{
  readonly attribute long currentEntryNumber; /* current entry (command) no. */

  /** Initializes XMLterm in specified window
   * @param contentWin content window object
   * @param URL URL of document to be loaded in the window
   *            (set to null string if document is already loaded in window)
   * @param args argument string to be passed to XMLterm
   *             (at the moment this just contains any initial input data)
   */
  void init(in nsIDOMWindowInternal aContentWin, in wstring URL, in wstring args);

  /** Closes XMLterm, freeing resources
   * @param aCookie document.cookie string for authentication
   */
  void close(in wstring aCookie);
  
  /** Polls for readable data from XMLterm
   */
  void poll();

  /** Resizes XMLterm to match a resized window.
   */
  void resize();

  /** Writes string to terminal as if the user had typed it (command input)
   * @param buf string to be transmitted to terminal
   * @param aCookie document.cookie string for authentication
   */
  void sendText(in wstring aString, in wstring aCookie);

  /** Sets command history buffer count
   * @param aHistory history buffer count
   * @param aCookie document.cookie string for authentication
   */
  void setHistory(in long aHistory, in wstring aCookie);

  /** Sets command prompt
   * @param aPrompt command prompt string (HTML)
   * @param aCookie document.cookie string for authentication
   */
  void setPrompt(in wstring aPrompt, in wstring aCookie);

  /** Exports HTML to file, with META REFRESH, if refreshSeconds is non-zero.
   * Nothing is done if display has not changed since last export, unless
   * forceExport is true. Returns true if export actually takes place.
   * If filename is a null string, HTML is written to STDERR.
   */
  boolean exportHTML(in wstring aFilename, in long permissions,
                     in wstring style, in unsigned long refreshSeconds,
                     in boolean forceRefresh, in wstring aCookie);

  /** Ignore key press events
   * (workaround for form input being transmitted to xmlterm)
   * @param aIgnore ignore flag (true/false)
   * @param aCookie document.cookie string for authentication
   */
  void ignoreKeyPress(in boolean aIgnore, in wstring aCookie);

  /** Exit browser, closing all windows (not yet implemented)
   */ 
  void exit();
};

