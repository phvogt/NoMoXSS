/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Mozilla browser.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications, Inc.  Portions created by Netscape are
 * Copyright (C) 1999, Mozilla.  All Rights Reserved.
 * 
 * Contributor(s):
 */

#include "nsISupports.idl"

interface nsIChannel;
interface nsIContentViewer;
interface nsIStreamListener;
interface nsIDocument;
interface nsILoadGroup;

/**
 * To get a component that implements nsIDocumentLoaderFactory
 * for a given mimetype, use nsICategoryManager to find an entry
 * with the mimetype as its name in the category "Gecko-Content-Viewers".
 * The value of the entry is the contractid of the component.
 * The component is a service, so use GetService, not CreateInstance to get it.
 */

[scriptable, uuid(df15f850-5d98-11d4-9f4d-0010a4053fd0)]
interface nsIDocumentLoaderFactory : nsISupports {
    nsIContentViewer createInstance(in string aCommand,
                              in nsIChannel aChannel,
                              in nsILoadGroup aLoadGroup,
                              in string aContentType, 
                              in nsISupports aContainer,
                              in nsISupports aExtraInfo,
                              out nsIStreamListener aDocListenerResult);

    nsIContentViewer createInstanceForDocument(in nsISupports aContainer,
                                         in nsIDocument aDocument,
                                         in string aCommand);

    nsIDocument createBlankDocument(in nsILoadGroup aLoadGroup);
};
