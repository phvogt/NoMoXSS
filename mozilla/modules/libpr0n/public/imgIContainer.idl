/** -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is mozilla.org code.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation. Portions created by Netscape are
 * Copyright (C) 2001 Netscape Communications Corporation. All
 * Rights Reserved.
 * 
 * Contributor(s): 
 *   Stuart Parmenter <pavlov@netscape.com>
 */

#include "nsISupports.idl"
#include "gfxtypes.idl"
#include "gfxIFormats.idl"

interface gfxIImageFrame;
interface imgIContainerObserver;

/**
 * gfxIImageContainer interface
 *
 * @author Stuart Parmenter <pavlov@netscape.com>
 * @version 0.1
 * @see "gfx2"
 */
[scriptable, uuid(5e8405a4-1dd2-11b2-8385-bc8e3446cad3)]
interface imgIContainer : nsISupports
{
  /**
   * Create a new \a aWidth x \a aHeight sized image container.
   *
   * @param aWidth The width of the container in which all the
   *               gfxIImageFrame children will fit.
   * @param aHeight The height of the container in which all the
   *                gfxIImageFrame children will fit.
   * @param aObserver Observer to send animation notifications to.
   */
  void init(in nscoord aWidth,
            in nscoord aHeight,
            in imgIContainerObserver aObserver);


  /* this should probably be on the device context (or equiv) */
  readonly attribute gfx_format preferredAlphaChannelFormat;

  /**
   * The width of the container rectangle.
   */
  readonly attribute nscoord width;

  /**
   * The height of the container rectangle.
   */
  readonly attribute nscoord height;


  /**
   * Get the current frame that would be drawn if the image was to be drawn now
   */
  readonly attribute gfxIImageFrame currentFrame;


  readonly attribute unsigned long numFrames;

  /**
   * Animation mode Constants
   *   0 = normal
   *   1 = don't animate
   *   2 = loop once
   */
  const short kNormalAnimMode   = 0;
  const short kDontAnimMode     = 1;
  const short kLoopOnceAnimMode = 2;

  attribute unsigned short animationMode;

  gfxIImageFrame getFrameAt(in unsigned long index);

  /**
   * Adds \a item to the end of the list of frames.
   * @param item frame to add.
   */
  void appendFrame(in gfxIImageFrame item);

  void removeFrame(in gfxIImageFrame item);

  /* notification when the current frame is done decoding */
  void endFrameDecode(in unsigned long framenumber, in unsigned long timeout);
  
  /* notification that the entire image has been decoded */
  void decodingComplete();
  
  void clear();

  void startAnimation();

  void stopAnimation();

  void resetAnimation();

  /* animation stuff */

  /**
   * number of times to loop the image.
   * @note -1 means forever.
   */
  attribute long loopCount;
};
