/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is mozilla.org code.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 2001 Netscape Communications Corporation.
 * All Rights Reserved.
 * 
 * Contributor(s):
 *   Stuart Parmenter <pavlov@netscape.com>
 */

#include "nsISupports.idl"
#include "nsIRequest.idl"

interface imgIContainer;
interface imgIDecoderObserver;
interface nsIURI;

/**
 * imgIRequest interface
 *
 * @author Stuart Parmenter <pavlov@netscape.com>
 * @version 0.1
 * @see imagelib2
 */
[scriptable, uuid(ccf705f6-1dd1-11b2-82ef-e18eccf7f7ec)]
interface imgIRequest : nsIRequest
{
  /**
   * the image container...
   * @return the image object associated with the request.
   * @attention NEED DOCS
   */
  readonly attribute imgIContainer image;

  /**
   * Bits set in the return value from imageStatus
   * @name statusflags
   */
  //@{
  const long STATUS_NONE             = 0x0;
  const long STATUS_SIZE_AVAILABLE   = 0x1;
  const long STATUS_LOAD_PARTIAL     = 0x2;
  const long STATUS_LOAD_COMPLETE    = 0x4;
  const long STATUS_ERROR            = 0x8;
  const long STATUS_FRAME_COMPLETE   = 0x10;
  //@}

  /**
   * something
   * @attention NEED DOCS
   */
  readonly attribute unsigned long imageStatus;

  readonly attribute nsIURI URI;

  readonly attribute imgIDecoderObserver decoderObserver;

  readonly attribute string mimeType;

  /**
   * Clone this request; the returned request will have aObserver as the
   * observer.  aObserver will be notified synchronously (before the clone()
   * call returns) with all the notifications that have already been dispatched
   * for this image load.
   */
  imgIRequest clone(in imgIDecoderObserver aObserver);
};

