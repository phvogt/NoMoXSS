<?xml version="1.0"?>
<!-- Descrpt: Test nsIAccessible Interface attributes and methods
     for XUL MENULIST Node
     Author: dsirnapalli@netscape.com
     Created:06.17.02
     Last Updated:06.17.02.

   - The contents of this file are subject to the Mozilla Public
   - License Version 1.1 (the "License"); you may not use this file
   - except in compliance with the License. You may obtain a copy of
   - the License at http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS
   - IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
   - implied. See the License for the specific language governing
   - rights and limitations under the License.
   -
   - The Original Code is Mozilla Communicator Test Cases.
   -
   - The Initial Developer of the Original Code is Netscape Communications
   - Corp.  Portions created by Netscape Communications Corp. are
   - Copyright (C) 1999 Netscape Communications Corp.  All
   - Rights Reserved.
   -
   - Contributor(s):
  -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<window
  id="menulist-window"
  title="XUL Menulist"
  orient="vertical"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <html:script src="http://www.mozilla.org/quality/embed/jstests/accessibility/jslib/accesslib.js"> </html:script>
  <html:script src="http://www.mozilla.org/quality/embed/jstests/accessibility/jslib/bridge.js"> </html:script>

  <html:script>
  <![CDATA[

  function getDomNodeMenulist()
  {
    try{
      netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
      netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
  
      var node = document.getElementsByTagName("menulist").item(0);
      return node;
    }
    catch(e){
      alert("Exception: " + e);
    }
  }  

  function executeTestCase()
  {
    var domNode = getDomNodeMenulist();
    domNode.addEventListener('focus',nodeFocused,true);

    accNode = getAccessibleNode(domNode);
    tempaccNode = accNode;
    try{
      netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
      netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");

      accNode.accTakeFocus();
    }
    catch(e){
      alert("Exception**: " + e);
    }
    setTimeout("constructResults();", 2000);
  } 

  function constructResults()
  {
    try{
    netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");

    if(tempaccNode.accGetDOMNode() == accNode.accFocused.accGetDOMNode())
    {
      varaccFocused = "Focused";
    }
    else
    {
      varaccFocused = "Not Focused";
    }

    var name = getName();
    var role = getRole();
    var state = getState();
    var value = getValue();
    var newvalue = value.toString();
    var keyboardShortcut = getAccKeyboardShortcut();

    var expectedName          = "Second Menu Item";
    var expectedRole          = "46";
    var expectedState         = "1074791492";
    var expectedValue         = "Second Menu Item";
    var expectednodeFocus     = "Focused";
    var expectedaccFocused    = "Focused";
    var expectedkeyboardShortcut = "Alt+m";

    var row0 = new Array("Property/Method", "Expected Values", "Actual Values", "Result");
    var row1 = new Array("Name->", expectedName, name);
    var row2 = new Array("Role->", expectedRole, role);
    var row3 = new Array("State->", expectedState, state);
    var row4 = new Array("Value->", expectedValue, value);
    var row5 = new Array("accTakeFocus()->", expectednodeFocus, nodeFocus);
    var row6 = new Array("accFocused->", expectedaccFocused, varaccFocused);
    var row7 = new Array("accKeyboardShortcut->", expectedkeyboardShortcut, keyboardShortcut);

    row = new Array(row0, row1, row2, row3, row4, row5, row6, row7);

    if (name == expectedName)                 row1[3] = "PASS"; else row1[3] = "FAIL";
    if (role == expectedRole)                 row2[3] = "PASS"; else row2[3] = "FAIL";
    if (state == expectedState)               row3[3] = "PASS"; else row3[3] = "FAIL";
    if (newvalue == expectedValue)            row4[3] = "PASS"; else row4[3] = "FAIL";
    if (nodeFocus == expectednodeFocus)       row5[3] = "PASS"; else row5[3] = "FAIL";
    if (varaccFocused == expectedaccFocused)  row6[3] = "PASS"; else row6[3] = "FAIL";
    if (keyboardShortcut == expectedkeyboardShortcut)
                                              row7[3] = "PASS"; else row7[3] = "FAIL";

    appendTableRes();
    WriteResults(res);    
   }
   catch(e){
    alert("Exception**: " + e);
   }
  }
  
  ]]>
  </html:script>
  
  <box orient="vertical" flex="1">  
    <description>
      <html:b> Testing XUL MenuList for Accessibility.. </html:b>
    </description>
    <label value="Select a Menu Item:" control="get-item"/>
    <!-- menulist element is used to create drop-down list boxes -->
    <!-- Three elements are needed to describe a drop-down box. 
    The first is the menulist element, which create the textbox with the button beside it.
    The second is the menupopup element,which creates the popup window which appears when
    the button is clicked.
    The third is the menuitem element, which creates the individual choices.  -->
    <menulist accesskey="m">
      <menupopup>
        <menuitem label="First Menu Item"/>
        <menuitem label="Second Menu Item" selected="true"/>
        <menuitem label="Third Menu Item" src="images/findpic.gif"/>
        <menuitem label="Fourth Menu Item"/>
      </menupopup>
    </menulist>  
  </box>

  <html:script>
  <![CDATA[
    res = "<b><u> Results for XUL Menulist Node:</u></b><br><br>";
    nodeFocus = "Not Focused";

    setTimeout("executeTestCase();", 2000);
  ]]>
  </html:script>  
</window>  