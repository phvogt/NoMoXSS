<?xml version="1.0"?>
<!-- Descrpt: Test nsIAccessible Interface attributes and methods
     for XUL TREE Node
     Author: dsirnapalli@netscape.com
     Created:06.17.02
     Last Updated:06.17.02.

   - The contents of this file are subject to the Mozilla Public
   - License Version 1.1 (the "License"); you may not use this file
   - except in compliance with the License. You may obtain a copy of
   - the License at http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS
   - IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
   - implied. See the License for the specific language governing
   - rights and limitations under the License.
   -
   - The Original Code is Mozilla Communicator Test Cases.
   -
   - The Initial Developer of the Original Code is Netscape Communications
   - Corp.  Portions created by Netscape Communications Corp. are
   - Copyright (C) 1999 Netscape Communications Corp.  All
   - Rights Reserved.
   -
   - Contributor(s):
  -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<window
  id="tree-window"
  title="XUL Tree"
  orient="vertical"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <html:script src="http://www.mozilla.org/quality/embed/jstests/accessibility/jslib/accesslib.js"> </html:script>
  <html:script src="http://www.mozilla.org/quality/embed/jstests/accessibility/jslib/bridge.js"> </html:script>

  <html:script>
  <![CDATA[

  function getDomNodeTree()
  {
    try{
      netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
      netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
  
      var node = document.getElementsByTagName("tree").item(0);
      return node;
    }
    catch(e){
      alert("Exception: " + e);
    }
  }  
  
  function executeTestCase()
  {
    var domNode = getDomNodeTree();
    domNode.addEventListener('focus',nodeFocused,true);

    accNode = getAccessibleNode(domNode);
    tempaccNode = accNode;
    try{
      netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
      netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");

      accNode.accTakeFocus();
    }
    catch(e){
      alert("Exception**: " + e);
    }
    setTimeout("constructResults();", 2000);
  }  
 
   function constructResults()
   {
    try{
     netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
     netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");

     if(tempaccNode.accGetDOMNode() == accNode.accFocused.accGetDOMNode())
     {
       varaccFocused = "Focused";
     }
     else
     {
       varaccFocused = "Not Focused";
     }
 
     var name = getName();
     var role = getRole();
     var state = getState();
     var value = getValue();
     var newvalue = value.toString();
     var keyboardShortcut = getAccKeyboardShortcut();

    var expectedName          = "";
    var expectedRole          = "35";
    var expectedState         = "1048644";
    var expectedValue         = "";
    var expectednodeFocus     = "Focused";
    var expectedaccFocused    = "Focused";
    var expectedkeyboardShortcut = "Alt+t";

    var row0 = new Array("Property/Method", "Expected Values", "Actual Values", "Result");
    var row1 = new Array("Name->", expectedName, name);
    var row2 = new Array("Role->", expectedRole, role);
    var row3 = new Array("State->", expectedState, state);
    var row4 = new Array("Value->", expectedValue, value);
    var row5 = new Array("accTakeFocus()->", expectednodeFocus, nodeFocus);
    var row6 = new Array("accFocused->", expectedaccFocused, varaccFocused);
    var row7 = new Array("accKeyboardShortcut->", expectedkeyboardShortcut, keyboardShortcut);

    row = new Array(row0, row1, row2, row3, row4, row5, row6, row7);

    if (name == expectedName)                 row1[3] = "PASS"; else row1[3] = "FAIL";
    if (role == expectedRole)                 row2[3] = "PASS"; else row2[3] = "FAIL";
    if (state == expectedState)               row3[3] = "PASS"; else row3[3] = "FAIL";
    if (newvalue == expectedValue)            row4[3] = "PASS"; else row4[3] = "FAIL";
    if (nodeFocus == expectednodeFocus)       row5[3] = "PASS"; else row5[3] = "FAIL";
    if (varaccFocused == expectedaccFocused)  row6[3] = "PASS"; else row6[3] = "FAIL";
    if (keyboardShortcut == expectedkeyboardShortcut)
                                              row7[3] = "PASS"; else row7[3] = "FAIL";

    appendTableRes();
    WriteResults(res);    
   }
   catch(e){
    alert("Exception**: " + e);
   }
  }
 
  ]]>
  </html:script>
  
  <!-- XUL provides a way to create tabular or hierarchical lists using a tree.
  A tree is used for creating lists of items. The tree element is used for creating
  hierarchical lists and tables. -->

  <description>
    <html:b> Testing XUL Tree for Accessibility.. </html:b>
  </description>
  
  <tree seltype="single" flex="1" accesskey="t">
    <treecols>
      <treecol id="sender" label="Sender" flex="1"/>
      <treecol id="subject" label="Subject" flex="2"/>
    </treecols>
    
    <treechildren>
      <treeitem>
        <treerow>
          <treecell label="joe@somewhere.com"/>
          <treecell label="Top secret plans"/>
        </treerow>  
      </treeitem>
      <treeitem>
        <treerow>
          <treecell label="mel@whereever.com"/>
          <treecell label="Lets do lunch"/>
        </treerow>  
      </treeitem>      
    </treechildren>
  </tree>

  <html:script>
  <![CDATA[
    res = "<b><u> Results for XUL Tree Node:</u></b><br><br>";
    nodeFocus = "Not Focused";

    setTimeout("executeTestCase();", 2000);
  ]]>
  </html:script>    
</window>  