<?xml version="1.0"?>
<!-- Descrpt: Test nsIAccessible Interface attributes and methods
     for XUL TABBOX Node
     Author: dsirnapalli@netscape.com
     Created:06.17.02
     Last Updated:06.17.02.

   - The contents of this file are subject to the Mozilla Public
   - License Version 1.1 (the "License"); you may not use this file
   - except in compliance with the License. You may obtain a copy of
   - the License at http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS
   - IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
   - implied. See the License for the specific language governing
   - rights and limitations under the License.
   -
   - The Original Code is Mozilla Communicator Test Cases.
   -
   - The Initial Developer of the Original Code is Netscape Communications
   - Corp.  Portions created by Netscape Communications Corp. are
   - Copyright (C) 1999 Netscape Communications Corp.  All
   - Rights Reserved.
   -
   - Contributor(s):
  -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<window
  id="tabbox-window"
  title="XUL Tabbox"
  orient="vertical"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <html:script src="http://www.mozilla.org/quality/embed/jstests/accessibility/jslib/accesslib.js"> </html:script>
  <html:script src="http://www.mozilla.org/quality/embed/jstests/accessibility/jslib/bridge.js"> </html:script>

  <html:script>
  <![CDATA[

  function getDomNodeTabbox()
  {
    try{
      netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
      netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
  
      var node = document.getElementsByTagName("tabbox").item(0);
      return node;
    }
    catch(e){
      alert("Exception: " + e);
    }
  }  
  
  function executeTestCase()
  {
    var domNode = getDomNodeTabbox();
    accNode = getAccessibleNode(domNode);
    setTimeout("constructResults();", 2000);
  }  
 
  function constructResults()
  {
    try{
    netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");

    var name = getName();
    var role = getRole();
    var state = getState();
    var value = getValue();
    var newvalue = value.toString();
    var keyboardShortcut = getAccKeyboardShortcut();

    var expectedName          = ""
    var expectedRole          = "9";
    var expectedState         = "0";
    var expectedValue         = "NS_ERROR_NOT_IMPLEMENTED";
    var expectedkeyboardShortcut = "Alt+b";

    var row0 = new Array("Property/Method", "Expected Values", "Actual Values", "Result");
    var row1 = new Array("Name->", expectedName, name);
    var row2 = new Array("Role->", expectedRole, role);
    var row3 = new Array("State->", expectedState, state);
    var row4 = new Array("Value->", expectedValue, value);
    var row5 = new Array("accKeyboardShortcut->", expectedkeyboardShortcut, keyboardShortcut);

    row = new Array(row0, row1, row2, row3, row4, row5);

    if (name == expectedName)                 row1[3] = "PASS"; else row1[3] = "FAIL";
    if (role == expectedRole)                 row2[3] = "PASS"; else row2[3] = "FAIL";
    if (state == expectedState)               row3[3] = "PASS"; else row3[3] = "FAIL";
    if (newvalue.match(expectedValue))        row4[3] = "PASS"; else row4[3] = "FAIL";
    if (keyboardShortcut == expectedkeyboardShortcut)
                                              row5[3] = "PASS"; else row5[3] = "FAIL";

    appendTableRes();
    WriteResults(res);    
   }
   catch(e){
    alert("Exception**: " + e);
   }
  }
 
  ]]>
  </html:script>
  
  <box orient="vertical" flex="1">  
    <description>
      <html:b> Testing XUL Tabbox for Accessibility.. </html:b>
    </description>
    <box oreint="horizontal">
      <!-- Tabboxes are typically used in an application in the preferences window.
      A series of tabs appears across the top of a window. The user can click each
      tab to see a different set of options. XUL provides a method to create such dialogs.
      It involves five new elements.
      tabbox    - the outer box that contains the tabs along the top and the tab
      pages themselves 
      tabs      - the inner box that contains the individual tabs.
      tab       - a specific tab
      tabpanels - the container for the pages
      tabpanel  - the body of a single page. you would place the content for a page
      within this element -->
      <tabbox accesskey="b">
        <tabs>
          <tab label="Mail"/>
          <tab label="News"/>    
        </tabs>
        <tabpanels>
          <tabpanel id="mailtab">
            <checkbox label="Automatically check for mail"/>
          </tabpanel>
          <tabpanel id="newstab">
            <button label="Clear News Buffer"/>
          </tabpanel>  
        </tabpanels>
      </tabbox>  
      <spacer flex="1"/>
    </box>
  </box>

  <html:script>
  <![CDATA[
    res = "<b><u> Results for XUL Tabbox Node:</u></b><br><br>";

    setTimeout("executeTestCase();", 2000);
  ]]>
  </html:script>  
</window>