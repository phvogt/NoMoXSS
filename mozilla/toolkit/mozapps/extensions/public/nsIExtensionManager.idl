/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Extension Manager.
 *
 * The Initial Developer of the Original Code is Ben Goodger.
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Ben Goodger <ben@bengoodger.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */


#include "nsISupports.idl"

interface nsIFile;
interface nsIRDFDataSource;
interface nsIUpdateItem;

[scriptable, uuid(9048223f-ec50-49e5-9866-80ee8f26179d)]
interface nsIExtensionDownloadProgressListener : nsISupports
{
  void onStateChange(in wstring aURL, in short aState, in long aValue);

  void onProgress(in wstring aURL, in unsigned long aValue, in unsigned long aMaxValue);
};

[scriptable, uuid(c3515b0f-99f4-453b-805e-1fdf5724d6d9)]
interface nsIExtensionManager : nsISupports
{
  // Apprunner hooks
  boolean start(in boolean aIsDirty);

  /** 
   * Returns true if mismatches were found and the app needs to restart. 
   */
  boolean checkForMismatches();

  void handleCommandLineArgs();

  void register();

  // Installing Extensions
  const unsigned long FLAG_INSTALL_PROFILE = 0x01;
  const unsigned long FLAG_INSTALL_GLOBAL  = 0x02;

  void installExtension(in nsIFile aXPIFile, in unsigned long aFlags);
  void uninstallExtension(in string aExtensionID);
  void enableExtension(in string aExtensionID);
  void disableExtension(in string aExtensionID);

  // Installing Themes
  void installTheme(in nsIFile aJARFile, in unsigned long aFlags);
  void uninstallTheme(in string aThemeID);
  void enableTheme(in string aThemeID);
  void disableTheme(in string aThemeID);

  // Downloads
  void addDownloads([array, size_is(aItemCount)] in nsIUpdateItem aItems,
                    in unsigned long aItemCount);
  void removeDownload(in wstring aURL, in unsigned short aType);
  long addDownloadObserver(in nsIExtensionDownloadProgressListener aObserver);
  void removeDownloadObserverAt(in long aIndex);

  readonly attribute boolean inSafeMode;

  // Updates
  void update([array, size_is(aItemCount)] in nsIUpdateItem aItems,
               in unsigned long aItemCount, 
               in unsigned long aVersionUpdateOnly);

  // Management
  void getItemList(in string aItemID, 
                   in unsigned short aType, 
                   out unsigned long aItemCount,
                   [retval, array, size_is(aItemCount)] out nsIUpdateItem aItems);

  void moveUp(in string aItemID);
  void moveDown(in string aItemID);
  void moveTop(in string aItemID);

  readonly attribute nsIRDFDataSource datasource;
};

[scriptable, uuid(c0b7517f-0b3a-41a2-bde8-ba3ac8a5af47)]
interface nsIExtensionItemUpdater : nsISupports
{
  void checkForUpdates([array, size_is(aItemCount)] in nsIUpdateItem aItems,
                       in unsigned long aItemCount, 
                       in boolean aVersionUpdateOnly);

  readonly attribute unsigned short sourceEvent;
  readonly attribute unsigned short updateTypes;
};

