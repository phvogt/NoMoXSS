Index: mozilla-src/mozilla/client.mk
diff -u mozilla-src/mozilla/client.mk:1.1 mozilla-src/mozilla/client.mk:1.2
--- mozilla-src/mozilla/client.mk:1.1	Sat Nov 13 12:59:36 2004
+++ mozilla-src/mozilla/client.mk	Tue Sep 27 15:44:55 2005
@@ -67,6 +67,7 @@
 MAIL_CO_TAG = FIREFOX_0_10_1_RELEASE
 STANDALONE_COMPOSER_CO_TAG = FIREFOX_0_10_1_RELEASE
 LOCALES_CO_TAG = FIREFOX_0_10_1_RELEASE
+MOZ_OBJDIR = d:/mozilla-src/mozilla/firefox_obj_dir
 BUILD_MODULES = all
 
 #######################################################################
Index: mozilla-src/mozilla/mozilla.ncb
Index: mozilla-src/mozilla/mozilla.sln
diff -u /dev/null mozilla-src/mozilla/mozilla.sln:1.1
--- /dev/null	Sun Mar 19 00:40:51 2006
+++ mozilla-src/mozilla/mozilla.sln	Sat Nov 13 14:06:06 2004
@@ -0,0 +1,32 @@
+Microsoft Visual Studio Solution File, Format Version 8.00
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "mozilla", "mozilla.vcproj", "{D8FE28BC-4100-4546-93BB-1ABA0CB31C7A}"
+	ProjectSection(ProjectDependencies) = postProject
+	EndProjectSection
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "jsshell", "js\src\Debug\jsshell\jsshell.vcproj", "{38F517F2-78CD-45DF-A403-A833378F80E4}"
+	ProjectSection(ProjectDependencies) = postProject
+	EndProjectSection
+EndProject
+Global
+	GlobalSection(SolutionConfiguration) = preSolution
+		Debug = Debug
+		Release = Release
+	EndGlobalSection
+	GlobalSection(ProjectConfiguration) = postSolution
+		{D8FE28BC-4100-4546-93BB-1ABA0CB31C7A}.Debug.ActiveCfg = Debug|Win32
+		{D8FE28BC-4100-4546-93BB-1ABA0CB31C7A}.Debug.Build.0 = Debug|Win32
+		{D8FE28BC-4100-4546-93BB-1ABA0CB31C7A}.Release.ActiveCfg = Release|Win32
+		{D8FE28BC-4100-4546-93BB-1ABA0CB31C7A}.Release.Build.0 = Release|Win32
+		{38F517F2-78CD-45DF-A403-A833378F80E4}.Debug.ActiveCfg = Debug|Win32
+		{38F517F2-78CD-45DF-A403-A833378F80E4}.Debug.Build.0 = Debug|Win32
+		{38F517F2-78CD-45DF-A403-A833378F80E4}.Release.ActiveCfg = Release|Win32
+		{38F517F2-78CD-45DF-A403-A833378F80E4}.Release.Build.0 = Release|Win32
+	EndGlobalSection
+	GlobalSection(SolutionItems) = postSolution
+		mozilla.vsd = mozilla.vsd
+	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+	EndGlobalSection
+	GlobalSection(ExtensibilityAddIns) = postSolution
+	EndGlobalSection
+EndGlobal
Index: mozilla-src/mozilla/mozilla.vcproj
diff -u /dev/null mozilla-src/mozilla/mozilla.vcproj:1.3
--- /dev/null	Sun Mar 19 00:40:51 2006
+++ mozilla-src/mozilla/mozilla.vcproj	Tue Nov 22 16:25:59 2005
@@ -0,0 +1,700 @@
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8,00"
+	Name="mozilla"
+	ProjectGUID="{D8FE28BC-4100-4546-93BB-1ABA0CB31C7A}"
+	Keyword="MakeFileProj"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="Debug"
+			IntermediateDirectory="Debug"
+			ConfigurationType="0"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC71.vsprops"
+			>
+			<Tool
+				Name="VCNMakeTool"
+				BuildCommandLine=""
+				ReBuildCommandLine=""
+				CleanCommandLine=""
+				Output="firefox_obj_dir\dist\bin\firefox.exe"
+				PreprocessorDefinitions="XSS"
+				IncludeSearchPath=""
+				ForcedIncludes=""
+				AssemblySearchPath=""
+				ForcedUsingAssemblies=""
+				CompileAsManaged=""
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="Release"
+			IntermediateDirectory="Release"
+			ConfigurationType="0"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC71.vsprops"
+			>
+			<Tool
+				Name="VCNMakeTool"
+				BuildCommandLine=""
+				ReBuildCommandLine=""
+				CleanCommandLine=""
+				Output="dist\bin\firefox.exe"
+				PreprocessorDefinitions=""
+				IncludeSearchPath=""
+				ForcedIncludes=""
+				AssemblySearchPath=""
+				ForcedUsingAssemblies=""
+				CompileAsManaged=""
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;def;odl;idl;hpj;bat;asm;asmx"
+			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
+			>
+			<Filter
+				Name="jsd"
+				>
+				<File
+					RelativePath=".\js\jsd\jsd_atom.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_high.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_hook.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_java.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_lock.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_obj.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_scpt.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_stak.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_step.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_text.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_val.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_xpc.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsdebug.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsdstubs.c"
+					>
+				</File>
+			</Filter>
+			<Filter
+				Name="js"
+				>
+				<File
+					RelativePath="..\..\Microsoft Visual Studio .NET 2003\Vc7\crt\src\dbgheap.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\js.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsapi.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsarena.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsarray.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsatom.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsbool.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jscntxt.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jscpucfg.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsdate.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsdbgapi.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsdhash.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsdtoa.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsemit.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsexn.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsfile.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsfun.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsgc.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jshash.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsinterp.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jslock.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jslog2.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jslong.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsmath.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsnum.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsobj.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsopcode.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsparse.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsprf.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsregexp.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsscan.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsscope.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsscript.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsstr.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsutil.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsxdrapi.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\nsDispatchSupport.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\nsScriptError.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\nsXPConnect.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\prmjtime.c"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpccallcontext.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpccomponents.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpccontext.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcconvert.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcdebug.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\XPCDispConvert.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\XPCDispInterface.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\XPCDispObject.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\XPCDispParamPropJSClass.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\XPCDispParams.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\XPCDispTearOff.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\XPCDispTypeInfo.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcexception.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\XPCIDispatchClassInfo.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\XPCIDispatchExtension.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcjsid.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcjsruntime.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpclog.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcmaps.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcmodule.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcruntimesvc.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcstack.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcstring.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcthreadcontext.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcthrower.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcvariant.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcwrappedjs.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcwrappedjsclass.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcwrappednative.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcwrappednativeinfo.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcwrappednativejsops.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcwrappednativeproto.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\xpconnect\src\xpcwrappednativescope.cpp"
+					>
+				</File>
+			</Filter>
+			<Filter
+				Name="moz_int"
+				>
+				<File
+					RelativePath=".\content\html\document\src\nsHTMLDocument.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\xpcom\string\src\nsTAString.cpp"
+					>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			Filter="h;hpp;hxx;hm;inl;inc;xsd"
+			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}"
+			>
+			<File
+				RelativePath=".\js\src\xpconnect\src\xpcprivate.h"
+				>
+			</File>
+			<File
+				RelativePath=".\js\src\xssdbg.h"
+				>
+			</File>
+			<File
+				RelativePath=".\js\src\xsstaint.h"
+				>
+			</File>
+			<Filter
+				Name="js"
+				>
+				<File
+					RelativePath=".\js\src\xpconnect\src\dependentLibs.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsapi.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsarena.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsarray.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsatom.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsautocfg.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsbit.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsbool.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsclist.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jscntxt.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jscompat.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsconfig.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jscpucfg.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsdate.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsdbgapi.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsdhash.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsdtoa.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsemit.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsexn.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsfile.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsfun.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsgc.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jshash.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsinterp.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jslibmath.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jslock.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jslong.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsmath.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsnum.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsobj.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsopcode.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsosdep.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsparse.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsprf.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsprvtd.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jspubtd.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsregexp.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsscan.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsscope.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsscript.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsstddef.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsstr.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jstypes.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsutil.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\jsxdrapi.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\prmjtime.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\src\resource.h"
+					>
+				</File>
+			</Filter>
+			<Filter
+				Name="jsd"
+				>
+				<File
+					RelativePath=".\js\jsd\dependentLibs.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_lock.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsd_xpc.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\jsdebug.h"
+					>
+				</File>
+				<File
+					RelativePath=".\js\jsd\resource.h"
+					>
+				</File>
+			</Filter>
+			<Filter
+				Name="moz_int"
+				>
+				<File
+					RelativePath=".\xpcom\string\public\nsTAString.h"
+					>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="Resource Files"
+			Filter="rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx"
+			UniqueIdentifier="{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}"
+			>
+		</Filter>
+		<File
+			RelativePath=".\js\src\jsopcode.tbl"
+			>
+		</File>
+		<File
+			RelativePath=".\readme.txt"
+			>
+		</File>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
Index: mozilla-src/mozilla/mozilla.vsd
Index: mozilla-src/mozilla/myclean.bat
diff -u /dev/null mozilla-src/mozilla/myclean.bat:1.1
--- /dev/null	Sun Mar 19 00:40:52 2006
+++ mozilla-src/mozilla/myclean.bat	Tue Sep 27 15:45:18 2005
@@ -0,0 +1 @@
+make -f client.mk distclean >..\clean.log 2>&1
\ No newline at end of file
Index: mozilla-src/mozilla/mymake.bat
diff -u /dev/null mozilla-src/mozilla/mymake.bat:1.1
--- /dev/null	Sun Mar 19 00:40:52 2006
+++ mozilla-src/mozilla/mymake.bat	Tue Sep 27 15:45:18 2005
@@ -0,0 +1,9 @@
+date /T
+time /T
+date /T >>..\build.log
+time /T >>..\build.log
+make -f client.mk build >>..\build.log 2>&1
+date /T >>..\build.log
+time /T >>..\build.log
+date /T
+time /T
Index: mozilla-src/mozilla/config/autoconf.mk.in
diff -u mozilla-src/mozilla/config/autoconf.mk.in:1.1 mozilla-src/mozilla/config/autoconf.mk.in:1.2
--- mozilla-src/mozilla/config/autoconf.mk.in:1.1	Sat Nov 13 12:19:45 2004
+++ mozilla-src/mozilla/config/autoconf.mk.in	Wed Dec 14 14:54:23 2005
@@ -195,7 +195,7 @@
 
 OS_INCLUDES	= $(NSPR_CFLAGS) $(JPEG_CFLAGS) $(PNG_CFLAGS) $(ZLIB_CFLAGS)
 OS_LIBS		= @LIBS@
-ACDEFINES	= @MOZ_DEFINES@
+ACDEFINES	= @MOZ_DEFINES@ -DXSS=1
 
 MOZ_OPTIMIZE	= @MOZ_OPTIMIZE@
 MOZ_OPTIMIZE_FLAGS = @MOZ_OPTIMIZE_FLAGS@
Index: mozilla-src/mozilla/config/rules.mk
diff -u mozilla-src/mozilla/config/rules.mk:1.1 mozilla-src/mozilla/config/rules.mk:1.2
--- mozilla-src/mozilla/config/rules.mk:1.1	Sat Nov 13 12:19:45 2004
+++ mozilla-src/mozilla/config/rules.mk	Tue Jul  5 18:53:59 2005
@@ -46,6 +46,8 @@
 #	LIBRARY_NAME	-- the target library name to create from $OBJS
 #
 ################################################################################
+DEFINES		+= -DXSS=1
+
 ifndef topsrcdir
 topsrcdir		= $(DEPTH)
 endif
Index: mozilla-src/mozilla/content/base/src/nsContentPolicy.cpp
diff -u mozilla-src/mozilla/content/base/src/nsContentPolicy.cpp:1.1 mozilla-src/mozilla/content/base/src/nsContentPolicy.cpp:1.10
--- mozilla-src/mozilla/content/base/src/nsContentPolicy.cpp:1.1	Sat Nov 13 12:20:29 2004
+++ mozilla-src/mozilla/content/base/src/nsContentPolicy.cpp	Thu Mar  9 18:43:05 2006
@@ -51,6 +51,23 @@
 
 NS_IMPL_ISUPPORTS1(nsContentPolicy, nsIContentPolicy)
 
+#ifdef XSS /* XSS */
+
+#include "nsIPrompt.h"
+#include "nsIDOMWindowInternal.h"
+#include "nsIStringBundle.h"
+#include "nsIDOMHTMLDocument.h"
+#include "nsIXSSHostConnectPermissionManager.h"
+
+#define xssDialogsProperties "chrome://global/locale/commonDialogs.properties"
+static NS_DEFINE_CID(kCStringBundleServiceCID,  NS_STRINGBUNDLESERVICE_CID);
+static NS_DEFINE_CID(kXSSHostConnectPermissionManagerCID,  NS_XSSHOSTCONNECTPERMISSIONMANAGER_CID);
+
+#include "xsstaint.h"
+#include "prenv.h"
+
+#endif /* XSS */
+
 #ifdef PR_LOGGING
 static PRLogModuleInfo* gConPolLog;
 #endif
@@ -168,6 +185,296 @@
     WARN_IF_URI_UNINITIALIZED(contentLocation, "Request URI");
     WARN_IF_URI_UNINITIALIZED(requestingLocation, "Requesting URI");
 
+
+#ifdef XSS /* XSS */
+	// ASCII encoded URL spec
+    nsCString mSpec; 
+	// flag if domains are equal
+    PRBool isDomainEqual = PR_FALSE; 
+	// what the rule said 
+	PRUint32 xssRuleResult = nsIXSSHostConnectPermissionManager::UNKNOWN_CONNECT; 
+	// hosts, domains and uris
+	nsCString calledURI, callerURI, calledHost, callerHost, calledDomain, callerDomain, mSpecTaintedstr;
+	// the permissionmanager
+	nsCOMPtr<nsIXSSHostConnectPermissionManager> xssPermissionManager;
+	// prompt to interact with user
+	nsCOMPtr<nsIPrompt> prompt;
+	// if not 0, a error while initializing occured
+	int initerror = 0;
+	// flag if the contentLocation is tainted (=1) or not (=0)
+	int mSpecIstainted = 0;
+	// initialize string if mSpec is tainted
+	mSpecTaintedstr = ToNewCString(NS_LITERAL_STRING("untainted")); 
+
+	// initialize the variables
+	nsCOMPtr<nsIDOMNode> node(do_QueryInterface(requestingContext));
+	if (node) {
+		// for return values
+		nsresult rv;
+		nsCOMPtr<nsIDOMDocument> doc;
+		node->GetOwnerDocument(getter_AddRefs(doc));
+		nsCOMPtr<nsIDocument> thedoc = do_QueryInterface(doc);
+
+		// we need the doc to do something useful
+		if (thedoc) {
+			nsCOMPtr<nsIDOMWindowInternal> window (do_QueryInterface(thedoc->GetScriptGlobalObject()));
+
+			if (window) {
+				// get the prompt-service
+				window->GetPrompter(getter_AddRefs(prompt));
+				if (!prompt)
+					initerror = 1;
+			} else {
+				initerror = 2;
+			}
+
+			if (contentLocation) {
+				rv = contentLocation->GetSpec(calledURI);
+				if (NS_FAILED(rv)) {
+					XSS_LOG("failed to get calledURI\n", "");
+					initerror = 3;
+				}
+				rv = contentLocation->GetHost(calledHost);
+				if (NS_FAILED(rv)) {
+					XSS_LOG("failed to get calledHost\n", "");
+					initerror = 5;
+				}
+				rv = contentLocation->GetDomain(calledDomain);
+				if (NS_FAILED(rv)) {
+					XSS_LOG("failed to get domain of called uri\n", "");
+					initerror = 7;
+				}
+				rv = contentLocation->GetAsciiSpec(mSpec);
+				if (!NS_FAILED(rv) && mSpec.xssGetTainted()) {
+					mSpecIstainted = 1;
+					mSpecTaintedstr = ToNewCString(NS_LITERAL_STRING("tainted!")); 
+				}
+			} else {
+				XSS_LOG("failed because contentLocation is 0\n", "");
+				initerror = 11;
+			}
+
+			if (requestingLocation) {
+				rv = requestingLocation->GetSpec(callerURI);
+				if (NS_FAILED(rv)) {
+					XSS_LOG("failed to get callerURI\n", "");
+					initerror = 4;
+				}
+				rv = requestingLocation->GetHost(callerHost);
+				if (NS_FAILED(rv)) {
+					XSS_LOG("failed to get callerHost\n", "");
+					initerror = 6;
+				}
+				rv = requestingLocation->GetDomain(callerDomain);
+				if (NS_FAILED(rv)) {
+					XSS_LOG("failed to get domain of caller\n", "");
+					initerror = 8;
+				}
+			} else {
+				XSS_LOG("failed because requestingLocation is 0\n", "");
+				initerror = 12;
+			}
+
+			if (initerror == 0) {
+				xssPermissionManager = do_GetService(NS_XSSHOSTCONNECTPERMISSIONMANAGER_CONTRACTID, &rv);
+				if (NS_FAILED(rv)) {
+					XSS_LOG("failed to get permissionmanager\n", "");
+					initerror = 9;
+				} else {
+					// check if we already have a stored permission
+					rv = xssPermissionManager->TestPermission(callerDomain, calledDomain, &xssRuleResult);
+					if (NS_FAILED(rv)) {
+						XSS_LOG("failed to test permission\n", "");
+						initerror = 10;
+					}
+				}
+
+				// check if the questioning is switched off (XSS_USERINTERACTION==XSS_ENV_USERINTERACTION_FALSE) by the environment
+				char* env = PR_GetEnv(XSS_ENV_USERINTERACTION_STR);
+				if (env) {
+					PRInt32 num;
+					if (sscanf(env, "%d", &num) > 0) {
+						// XSS_USERINTERACTION must be XSS_ENV_USERINTERACTION_FALSE and not persistent settings
+						if ((num == XSS_ENV_USERINTERACTION_FALSE) && (xssRuleResult == nsIXSSHostConnectPermissionManager::UNKNOWN_CONNECT)) {
+							xssRuleResult = nsIXSSHostConnectPermissionManager::ALLOW_CONNECT;
+							XSS_LOG("domaincheck: environment allowed %s\n", ToNewCString(NS_LITERAL_STRING("from ") + NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+						}
+					}
+				}
+
+				// check if permanent rules are always used regardless of tainted status
+				env = PR_GetEnv(XSS_ENV_DONTCHECKTAINT);
+				if (env) {
+					PRInt32 num;
+					if (sscanf(env, "%d", &num) > 0) {
+						// XSS_ENV_DONTCHECKTAINT must be XSS_ENV_DONTCHECKTAINT_TRUE
+						if (num == XSS_ENV_DONTCHECKTAINT_TRUE) {
+							xssRuleResult = nsIXSSHostConnectPermissionManager::UNKNOWN_CONNECT;
+							XSS_LOG("domaincheck: environment delayed stored decision %s\n", ToNewCString(NS_LITERAL_STRING("from ") + NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+						}
+					}
+				}
+			} // end of initerror = 0
+
+			// to this point the variables are initialized or initerror is now != 0
+
+			// if an error occured on initializing, we don't want to check.
+			// breaking expected behaviour is bad
+			if (initerror == 0) {
+				nsresult xss_rv = contentLocation->DomainEquals(requestingLocation, &isDomainEqual);
+				// check if this are different domains
+				if (!NS_FAILED(xss_rv) &&!isDomainEqual) {
+					
+					// if we have a stored decision use it regardless of the taintstate
+					if (xssRuleResult == nsIXSSHostConnectPermissionManager::ALLOW_CONNECT) {
+
+						XSS_LOG("domaincheck: user allowed it always tainted: %s\n",
+							ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING(" from ") + 
+							NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+
+					} else if (xssRuleResult == nsIXSSHostConnectPermissionManager::DENY_CONNECT) {
+
+						XSS_LOG("domaincheck: user stopped it always tainted=%d: %s\n", 
+							ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING(" from ") + 
+							NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+						*decision = nsIContentPolicy::REJECT_REQUEST;
+						return NS_OK;
+
+					// no decision, so ask if it is tainted
+					} else {						
+						if (mSpecIstainted) {
+
+							// for return values
+							nsresult rv;
+
+							// check again if we already have a stored permission
+							// it is possible that the env-variable overrides the initial test so
+							// do it again
+							rv = xssPermissionManager->TestPermission(callerDomain, calledDomain, &xssRuleResult);
+							if (NS_FAILED(rv)) {
+								XSS_LOG("failed to test permission\n", "");
+								*decision = nsIContentPolicy::REJECT_REQUEST;
+								return NS_OK;
+							}
+
+							// if there isn't a permanent rule for it, ask the user
+							if (xssRuleResult == nsIXSSHostConnectPermissionManager::UNKNOWN_CONNECT) {
+
+								XSS_LOG("domaincheck: ask %s\n", ToNewCString(NS_LITERAL_STRING("from ") + NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+
+								// get the question-string
+								nsString xss_question_str;
+
+								nsCOMPtr<nsIStringBundleService> stringBundleService =
+									do_GetService(kCStringBundleServiceCID, &rv);
+
+								if (NS_SUCCEEDED(rv) && stringBundleService) {
+									nsCOMPtr<nsIStringBundle> stringBundle;
+									rv = stringBundleService->CreateBundle(xssDialogsProperties,
+										getter_AddRefs(stringBundle));
+
+									if (stringBundle) {
+										nsXPIDLString tempString;
+										const PRUnichar *formatStrings[2];
+										formatStrings[0] = ToNewUnicode(callerHost);
+										formatStrings[1] = ToNewUnicode(calledHost);
+										rv = stringBundle->FormatStringFromName(
+											NS_LITERAL_STRING("ConfirmExXSS").get(),
+											formatStrings, 2, getter_Copies(tempString));
+										if (tempString)
+											xss_question_str = tempString.get();
+									}
+								}
+
+								// Just in case
+								if (xss_question_str.IsEmpty()) {
+									NS_WARNING("could not get ConfirmExXSS string from string bundle");
+									xss_question_str.Assign(NS_LITERAL_STRING("[ConfirmExXSS] from "));
+									xss_question_str.Append(NS_ConvertUTF8toUTF16(callerURI));
+									xss_question_str.Append(NS_LITERAL_STRING(" to "));
+									xss_question_str.Append(NS_ConvertUTF8toUTF16(calledURI));
+								}
+								PRUnichar *xss_question = ToNewUnicode(xss_question_str);
+
+								// ask the question
+								PRInt32 xss_choice;
+								rv = prompt->ConfirmExXSS(nsnull, xss_question,
+									nsIPrompt::BUTTON_TITLE_NO * nsIPrompt::BUTTON_POS_0 +
+									nsIPrompt::BUTTON_TITLE_NO_ALWAYS  * nsIPrompt::BUTTON_POS_1 +
+									nsIPrompt::BUTTON_TITLE_YES_ALWAYS  * nsIPrompt::BUTTON_POS_2,
+									nsIPrompt::BUTTON_TITLE_YES  * nsIPrompt::BUTTON_POS_0,
+									nsnull, nsnull, nsnull, nsnull, nsnull, nsnull, &xss_choice);
+								if (NS_FAILED(rv)) {
+									*decision = nsIContentPolicy::REJECT_REQUEST;
+									return NS_OK;
+								}
+
+								// evaluate the answer
+								switch (xss_choice) {
+									// yes-button
+									case 3:
+										XSS_LOG("domaincheck: user allowed it: %s\n", 
+											ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING(" from ") 
+											+ NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)) );
+										break;
+										// yes, always-button
+									case 2:
+										XSS_LOG("domaincheck: user allowed it always: %s\n", 
+											ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING(" from ") 
+											+ NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+										xssPermissionManager->Add(callerDomain, calledDomain, nsIXSSHostConnectPermissionManager::ALLOW_CONNECT);
+										break;
+										// no-always-button
+									case 1:
+										XSS_LOG("domaincheck: user stopped it always: %s\n", 
+											ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING(" from ") 
+											+ NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+										xssPermissionManager->Add(callerDomain, calledDomain, nsIXSSHostConnectPermissionManager::DENY_CONNECT);
+										*decision = nsIContentPolicy::REJECT_REQUEST;
+										return NS_OK;
+										break;
+										// no-button
+									case 0:
+										XSS_LOG("domaincheck: user stopped it: %s\n", 
+											ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING(" from ") 
+											+ NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+										*decision = nsIContentPolicy::REJECT_REQUEST;
+										return NS_OK;
+										break;
+									default:
+										XSS_LOG("domaincheck: error! %s\n", 
+											ToNewCString(NS_LITERAL_STRING("from ") + NS_ConvertUTF8toUTF16(callerURI) 
+											+ NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+										*decision = nsIContentPolicy::REJECT_REQUEST;
+										return NS_OK;
+										break;
+								}
+							// we already have a user decision
+							} else {
+								if (xssRuleResult == nsIXSSHostConnectPermissionManager::DENY_CONNECT) {
+									*decision = nsIContentPolicy::REJECT_REQUEST;
+									XSS_LOG("domaincheck: stored always deny! %s\n", 
+										ToNewCString(NS_LITERAL_STRING("from ") + NS_ConvertUTF8toUTF16(callerURI) 
+										+ NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+									return NS_OK;
+								} else {
+									XSS_LOG("domaincheck: stored always allow! %s\n", 
+										ToNewCString(NS_LITERAL_STRING("from ") + NS_ConvertUTF8toUTF16(callerURI) 
+										+ NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+								}
+							}
+						} // end of tainted
+					} // end of question
+					/* If no node is found, just continue and let the other handlers do their job.
+					   node could be null if the googlebar is used to search for something.
+					*/
+				} // end of domains are not equal
+			} // end of initerror
+		} // end of thedoc
+	} // end of node
+#endif /* XSS */
+    
+
 #ifdef DEBUG
     {
         nsCOMPtr<nsIDOMNode> node(do_QueryInterface(requestingContext));
Index: mozilla-src/mozilla/content/base/src/nsDocument.cpp
diff -u mozilla-src/mozilla/content/base/src/nsDocument.cpp:1.1 mozilla-src/mozilla/content/base/src/nsDocument.cpp:1.4
--- mozilla-src/mozilla/content/base/src/nsDocument.cpp:1.1	Sat Nov 13 12:20:30 2004
+++ mozilla-src/mozilla/content/base/src/nsDocument.cpp	Wed Dec 14 14:55:19 2005
@@ -128,6 +128,11 @@
 #include "nsICharsetAlias.h"
 static NS_DEFINE_CID(kCharsetAliasCID, NS_CHARSETALIAS_CID);
 
+#ifdef XSS
+#include "xsstaint.h"
+#include "prlog.h"
+#endif /* XSS */
+
 // Helper structs for the content->subdoc map
 
 class SubDocMapEntry : public PLDHashEntryHdr
@@ -851,6 +856,21 @@
     // (or even the current time), fall back to what NS4.x returned.
     CopyASCIItoUCS2(NS_LITERAL_CSTRING("January 1, 1970 GMT"), aLastModified);
   }
+#ifdef XSS /* XSS */
+  {
+	  nsCString xss_doc_uri;
+	  if (mDocumentBaseURI) {
+		  mDocumentBaseURI->GetSpec(xss_doc_uri);
+	  }	  
+	  XSS_LOG("xsstaintstring nsDocument::GetLastModified: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aLastModified + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aLastModified.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
 
   return NS_OK;
 }
@@ -912,6 +932,21 @@
 nsDocument::GetReferrer(nsAString& aReferrer)
 {
   CopyUTF8toUTF16(mReferrer, aReferrer);
+#ifdef XSS /* XSS */
+  {
+	  nsCString xss_doc_uri;
+	  if (mDocumentBaseURI) {
+		  mDocumentBaseURI->GetSpec(xss_doc_uri);
+	  }	  
+	  XSS_LOG("xsstaintstring nsDocument::GetReferrer: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aReferrer + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aReferrer.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
   return NS_OK;
 }
 
@@ -2720,6 +2755,21 @@
 nsDocument::GetTitle(nsAString& aTitle)
 {
   aTitle.Assign(mDocumentTitle);
+#ifdef XSS /* XSS */
+  {
+	  nsCString xss_doc_uri;
+	  if (mDocumentBaseURI) {
+		  mDocumentBaseURI->GetSpec(xss_doc_uri);
+	  }	  
+	  XSS_LOG("xsstaintstring nsDocument::GetTitle: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aTitle + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aTitle.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
 
   return NS_OK;
 }
Index: mozilla-src/mozilla/content/base/src/nsGenericDOMDataNode.cpp
diff -u mozilla-src/mozilla/content/base/src/nsGenericDOMDataNode.cpp:1.1 mozilla-src/mozilla/content/base/src/nsGenericDOMDataNode.cpp:1.4
--- mozilla-src/mozilla/content/base/src/nsGenericDOMDataNode.cpp:1.1	Sat Nov 13 12:20:29 2004
+++ mozilla-src/mozilla/content/base/src/nsGenericDOMDataNode.cpp	Wed Dec 14 14:55:28 2005
@@ -58,6 +58,11 @@
 #include "pldhash.h"
 #include "prprf.h"
 
+#ifdef XSS /* XSS */
+#include "xsstaint.h"
+#include "prlog.h"
+#endif /* XSS */
+
 nsGenericDOMDataNode::nsGenericDOMDataNode()
   : mText()
 {
@@ -338,6 +343,24 @@
     }
   }
 
+#ifdef XSS /* XSS */
+  if (mText.xssGetTainted() == XSS_TAINTED)
+  {
+	  nsCString xss_doc_uri;
+	  nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+	  if (baseURI) {
+		baseURI->GetSpec(xss_doc_uri);
+	  }
+	  XSS_LOG("xsstaintstring nsGenericDOMDataNode::GetData: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aData + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aData.xssSetTainted(mText.xssGetTainted());
+#endif /* XSS */
+
   return NS_OK;
 }
 
@@ -353,6 +376,23 @@
   }
 
   nsCOMPtr<nsITextContent> textContent = do_QueryInterface(this);
+#ifdef XSS /* XSS */
+  if (aData.xssGetTainted() == XSS_TAINTED)
+  {
+	  nsCString xss_doc_uri;
+	  nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+	  if (baseURI) {
+		baseURI->GetSpec(xss_doc_uri);
+	  }
+	  XSS_LOG("xsstaintstring nsGenericDOMDataNode::SetData: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aData + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  mText.xssSetTainted(aData.xssGetTainted());
+#endif /* XSS */
 
   return SetText(aData, PR_TRUE);
 }
@@ -413,6 +453,24 @@
     // we'll just have to copy for now. See bug 121841 for details.
     old_data.Append(aData);
     rv = SetText(old_data, PR_FALSE);
+#ifdef XSS /* XSS */
+	if (old_data.xssGetTainted() == XSS_TAINTED) {
+		{
+			nsCString xss_doc_uri;
+			nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+			if (baseURI) {
+				baseURI->GetSpec(xss_doc_uri);
+			}
+			XSS_LOG("xsstaintstring nsGenericDOMDataNode::AppendData: %s\n",
+				ToNewCString(
+				NS_LITERAL_STRING("'") +
+				aData + 
+				NS_LITERAL_STRING("' ") + 
+				NS_ConvertUTF8toUTF16(xss_doc_uri)));
+		} while (0);
+		mText.xssSetTainted(XSS_TAINTED);
+	}
+#endif /* XSS */
   } else {
     // We know aData and the current data is ASCII, so use a
     // nsC*String, no need for any fancy unicode stuff here.
@@ -421,6 +479,24 @@
     length = old_data.Length();
     old_data.AppendWithConversion(aData);
     rv = SetText(old_data.get(), old_data.Length(), PR_FALSE);
+#ifdef XSS /* XSS */
+	if (old_data.xssGetTainted() == XSS_TAINTED) {
+		{
+			nsCString xss_doc_uri;
+			nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+			if (baseURI) {
+				baseURI->GetSpec(xss_doc_uri);
+			}
+			XSS_LOG("xsstaintstring nsGenericDOMDataNode::AppendData: %s\n",
+				ToNewCString(
+				NS_LITERAL_STRING("'") +
+				aData + 
+				NS_LITERAL_STRING("' ") + 
+				NS_ConvertUTF8toUTF16(xss_doc_uri)));
+		} while (0);
+		mText.xssSetTainted(XSS_TAINTED);
+	}
+#endif /* XSS */
   }
 
   NS_ENSURE_SUCCESS(rv, rv);
Index: mozilla-src/mozilla/content/base/src/nsGenericElement.cpp
diff -u mozilla-src/mozilla/content/base/src/nsGenericElement.cpp:1.1 mozilla-src/mozilla/content/base/src/nsGenericElement.cpp:1.3
--- mozilla-src/mozilla/content/base/src/nsGenericElement.cpp:1.1	Sat Nov 13 12:20:30 2004
+++ mozilla-src/mozilla/content/base/src/nsGenericElement.cpp	Fri Nov 25 18:35:33 2005
@@ -101,6 +101,10 @@
 
 #include "nsIDOMXPathEvaluator.h"
 
+#ifdef XSS /* XSS */
+#include "xsstaint.h"
+#endif /* XSS */
+
 #ifdef DEBUG_waterson
 
 /**
@@ -803,6 +807,9 @@
 nsGenericElement::nsGenericElement()
   : mFlagsOrSlots(GENERIC_ELEMENT_DOESNT_HAVE_DOMSLOTS)
 {
+#ifdef XSS /* XSS */
+	xss_istainted = XSS_NOT_TAINTED;
+#endif /* XSS */
 }
 
 nsGenericElement::~nsGenericElement()
Index: mozilla-src/mozilla/content/base/src/nsGenericElement.h
diff -u mozilla-src/mozilla/content/base/src/nsGenericElement.h:1.1 mozilla-src/mozilla/content/base/src/nsGenericElement.h:1.2
--- mozilla-src/mozilla/content/base/src/nsGenericElement.h:1.1	Sat Nov 13 12:20:30 2004
+++ mozilla-src/mozilla/content/base/src/nsGenericElement.h	Tue Jul 12 13:46:33 2005
@@ -639,6 +639,18 @@
   static PLDHashTable sEventListenerManagersHash;
   static PLDHashTable sRangeListsHash;
 
+#ifdef XSS /* XSS */
+
+	int xssGetTainted() {
+		return xss_istainted;
+	}
+
+	void xssSetTainted(int tainted) {
+		xss_istainted = tainted;
+	}
+
+#endif /* XSS */
+
 protected:
   /**
    * Copy attributes and children from another content object
@@ -769,6 +781,14 @@
    * Array containing all attributes and children for this element
    */
   nsAttrAndChildArray mAttrsAndChildren;
+
+#ifdef XSS /* XSS */
+	  
+	// flag if the string is tainted
+	int xss_istainted;
+
+#endif /* XSS */
+
 };
 
 // Internal non-public interface
Index: mozilla-src/mozilla/content/base/src/nsPlainTextSerializer.cpp
diff -u mozilla-src/mozilla/content/base/src/nsPlainTextSerializer.cpp:1.1 mozilla-src/mozilla/content/base/src/nsPlainTextSerializer.cpp:1.4
--- mozilla-src/mozilla/content/base/src/nsPlainTextSerializer.cpp:1.1	Sat Nov 13 12:20:30 2004
+++ mozilla-src/mozilla/content/base/src/nsPlainTextSerializer.cpp	Wed Dec 14 14:55:39 2005
@@ -57,6 +57,11 @@
 #include "nsCRT.h"
 #include "nsIParserService.h"
 
+#ifdef XSS /* XSS */
+#include "xsstaint.h"
+#include "prlog.h"
+#endif /* XSS */
+
 static NS_DEFINE_CID(kLWBrkCID, NS_LWBRK_CID);
 
 #define PREF_STRUCTS "converter.html2txt.structs"
@@ -338,6 +343,18 @@
       textstr.AssignWithConversion(frag->Get1b()+aStartOffset, length);
     }
   }
+#ifdef XSS /* XSS */
+  if (frag->xssGetTainted() == XSS_TAINTED)
+  {
+	  XSS_LOG("xsstaintstring nsPlainTextSerializer::AppendText: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  textstr +
+		  NS_LITERAL_STRING("'")
+		  ));
+  } while (0);
+  textstr.xssSetTainted(frag->xssGetTainted());
+#endif /* XSS */
 
   mOutputString = &aStr;
 
@@ -1643,6 +1660,20 @@
   
   PRInt32 totLen = aString.Length();
 
+#ifdef XSS /* XSS */
+  if (aString.xssGetTainted() == XSS_TAINTED) {
+	  {
+		  XSS_LOG("xsstaintstring nsPlainTextSerializer::Write: %s\n",
+			  ToNewCString(
+		      NS_LITERAL_STRING("'") +
+			  mCurrentLine +
+			  NS_LITERAL_STRING("' aString: ") +
+			  aString));
+	  } while (0);
+	  mCurrentLine.xssSetTainted(XSS_TAINTED);
+  }
+#endif /* XSS */
+
   // If the string is empty, do nothing:
   if (totLen <= 0) return;
 
Index: mozilla-src/mozilla/content/html/content/public/nsIFormSubmission.h
diff -u mozilla-src/mozilla/content/html/content/public/nsIFormSubmission.h:1.1 mozilla-src/mozilla/content/html/content/public/nsIFormSubmission.h:1.2
--- mozilla-src/mozilla/content/html/content/public/nsIFormSubmission.h:1.1	Sat Nov 13 12:20:40 2004
+++ mozilla-src/mozilla/content/html/content/public/nsIFormSubmission.h	Mon Nov 14 16:29:23 2005
@@ -117,6 +117,26 @@
                                const nsACString& aContentType,
                                PRBool aMoreFilesToCome) = 0;
 
+#ifdef XSS /* XSS */
+
+protected:
+
+	// flag if the submission form is tainted
+	int xss_istainted;
+
+public:
+
+	int xssGetTainted() {
+		return xss_istainted;
+	}
+
+	void xssSetTainted(int tainted) {
+		xss_istainted = tainted;
+	}
+
+
+#endif /* XSS */
+
 };
 
 //
Index: mozilla-src/mozilla/content/html/content/src/nsFormSubmission.cpp
diff -u mozilla-src/mozilla/content/html/content/src/nsFormSubmission.cpp:1.1 mozilla-src/mozilla/content/html/content/src/nsFormSubmission.cpp:1.3
--- mozilla-src/mozilla/content/html/content/src/nsFormSubmission.cpp:1.1	Sat Nov 13 12:20:32 2004
+++ mozilla-src/mozilla/content/html/content/src/nsFormSubmission.cpp	Fri Nov 25 18:35:54 2005
@@ -56,6 +56,11 @@
 #include "nsIScriptError.h"
 #include "nsIStringBundle.h"
 
+
+#ifdef XSS /* XSS */
+#include "xsstaint.h"
+#endif /* XSS */
+
 //BIDI
 #include "nsBidiUtils.h"
 //end
@@ -87,6 +92,9 @@
       mFormProcessor(aFormProcessor),
       mBidiOptions(aBidiOptions)
   {
+#ifdef XSS /* XSS */
+	xss_istainted = XSS_NOT_TAINTED;
+#endif /* XSS */
   };
   virtual ~nsFormSubmission()
   {
@@ -1475,3 +1483,4 @@
 
   return retval;
 }
+
Index: mozilla-src/mozilla/content/html/content/src/nsGenericHTMLElement.cpp
diff -u mozilla-src/mozilla/content/html/content/src/nsGenericHTMLElement.cpp:1.1 mozilla-src/mozilla/content/html/content/src/nsGenericHTMLElement.cpp:1.3
--- mozilla-src/mozilla/content/html/content/src/nsGenericHTMLElement.cpp:1.1	Sat Nov 13 12:20:32 2004
+++ mozilla-src/mozilla/content/html/content/src/nsGenericHTMLElement.cpp	Wed Dec 14 14:56:48 2005
@@ -136,6 +136,11 @@
 #include "nsAutoPtr.h"
 #include "nsCOMArray.h"
 
+#ifdef XSS /* XSS */
+#include "nsPrintfCString.h"
+#include "prlog.h"
+#endif /* XSS */
+
 static NS_DEFINE_CID(kPresStateCID,  NS_PRESSTATE_CID);
 // XXX todo: add in missing out-of-memory checks
 
@@ -1592,6 +1597,28 @@
     }
   }
 
+#ifdef XSS /* XSS */
+  // first added for anchor.href
+  if (aValue.xssGetTainted()) {
+	  {
+		  nsCString xss_doc_uri;
+          nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		  if (baseURI) {
+			  baseURI->GetSpec(xss_doc_uri);
+		  }	  
+		  XSS_LOG("xsstaintstring nsGenericHTMLElement::SetAttr: %s\n",
+			  ToNewCString(
+			  NS_LITERAL_STRING("'") +
+			  NS_ConvertUTF8toUTF16(nsPrintfCString("%d", aNamespaceID)) + 
+			  NS_LITERAL_STRING("' '") + 
+			  aValue + 
+			  NS_LITERAL_STRING("' ") + 
+			  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	  } while (0);
+	  xssSetTainted(aValue.xssGetTainted());
+  }
+#endif /* XSS */
+
   // Parse into a nsAttrValue
   nsAttrValue attrValue;
   if (aNamespaceID == kNameSpaceID_None) {
@@ -1792,6 +1819,28 @@
 
   attrValue->ToString(aResult);
 
+#ifdef XSS /* XSS */
+  // first added for anchor.href
+  if (xss_istainted != XSS_NOT_TAINTED) {
+	  {
+		  nsCString xss_doc_uri;
+          nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		  if (baseURI) {
+			  baseURI->GetSpec(xss_doc_uri);
+		  }	  
+		  XSS_LOG("xsstaintstring nsGenericHTMLElement::GetAttr: %s\n",
+			  ToNewCString(
+			  NS_LITERAL_STRING("'") +
+			  NS_ConvertUTF8toUTF16(nsPrintfCString("%d", aNameSpaceID)) + 
+			  NS_LITERAL_STRING("' '") + 
+			  aResult + 
+			  NS_LITERAL_STRING("' ") + 
+			  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	  } while (0);
+	  aResult.xssSetTainted(XSS_TAINTED);
+  }
+#endif /* XSS */
+
   return NS_CONTENT_ATTR_HAS_VALUE;
 }
 
Index: mozilla-src/mozilla/content/html/content/src/nsGenericHTMLElement.h
diff -u mozilla-src/mozilla/content/html/content/src/nsGenericHTMLElement.h:1.1 mozilla-src/mozilla/content/html/content/src/nsGenericHTMLElement.h:1.5
--- mozilla-src/mozilla/content/html/content/src/nsGenericHTMLElement.h:1.1	Sat Nov 13 12:20:35 2004
+++ mozilla-src/mozilla/content/html/content/src/nsGenericHTMLElement.h	Sat Jan  7 17:35:40 2006
@@ -904,6 +904,82 @@
                    PR_TRUE);                                         \
   }
 
+#ifdef XSS /* XSS */
+/**
+ * A macro to implement the getter and setter for a given string
+ * valued content property. The method uses the generic GetAttr and
+ * SetAttr methods.
+ */
+#define NS_IMPL_STRING_ATTR_XSS(_class, _method, _atom)              \
+  NS_IMETHODIMP                                                      \
+  _class::Get##_method(nsAString& aValue)                            \
+  {                                                                  \
+    GetAttr(kNameSpaceID_None, nsHTMLAtoms::_atom, aValue);          \
+	{																 \
+		nsCString xss_doc_uri;										 \
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();					 \
+		if (baseURI) {												 \
+			baseURI->GetSpec(xss_doc_uri);							 \
+		}															 \
+		XSS_LOG("xsstaintstring " #_class "::" #_method ": %s\n",	 \
+			ToNewCString(											 \
+		    NS_LITERAL_STRING("'") +								 \
+			aValue +												 \
+			NS_LITERAL_STRING("' ") +								 \
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));					 \
+	} while (0);													 \
+	aValue.xssSetTainted(XSS_TAINTED);								 \
+                                                                     \
+    return NS_OK;                                                    \
+  }                                                                  \
+  NS_IMETHODIMP                                                      \
+  _class::Set##_method(const nsAString& aValue)                      \
+  {                                                                  \
+    return SetAttr(kNameSpaceID_None, nsHTMLAtoms::_atom, aValue,    \
+                   PR_TRUE);                                         \
+  }
+
+/**
+ * A macro to implement the getter and setter for a given string
+ * valued content property. The method uses the generic GetAttr and
+ * SetAttr methods.
+ */
+#define NS_IMPL_URI_ATTR_XSS_HREFPARAM(_class, _method, _atom)       \
+  NS_IMETHODIMP                                                      \
+  _class::Get##_method(nsAString& aValue)                            \
+  {                                                                  \
+    GetURIAttr(nsHTMLAtoms::_atom, aValue);                          \
+    /* only taint if the url contains a '?'. i.e. there are */       \
+	/* parameters */												 \
+    if (aValue.FindChar('?') >= 0) {							     \
+		{															 \
+			nsCString xss_doc_uri;									 \
+			nsCOMPtr<nsIURI> baseURI = GetBaseURI();				 \
+			if (baseURI) {											 \
+				baseURI->GetSpec(xss_doc_uri);						 \
+			}														 \
+			XSS_LOG("xsstaintstring " #_class "::" #_method ": %s\n",\
+				ToNewCString(										 \
+				NS_LITERAL_STRING("'") +							 \
+				aValue +											 \
+				NS_LITERAL_STRING("' ") +							 \
+				NS_ConvertUTF8toUTF16(xss_doc_uri)));				 \
+		} while (0);												 \
+	  aValue.xssSetTainted(XSS_TAINTED);							 \
+    }																 \
+                                                                     \
+    return NS_OK;                                                    \
+  }                                                                  \
+  NS_IMETHODIMP                                                      \
+  _class::Set##_method(const nsAString& aValue)                      \
+  {                                                                  \
+    return SetAttr(kNameSpaceID_None, nsHTMLAtoms::_atom, aValue,    \
+                   PR_TRUE);                                         \
+  }
+
+#endif /* XSS */
+
+
 /**
  * A macro to implement the getter and setter for a given string
  * valued content property with a default value.
@@ -989,6 +1065,47 @@
                    PR_TRUE);                                        \
   }
 
+#ifdef XSS /* XSS */
+/**
+ * A macro to implement the getter and setter for a given content
+ * property that needs to return a URI in string form.  The method
+ * uses the generic GetAttr and SetAttr methods.  This macro is much
+ * like the NS_IMPL_STRING_ATTR macro, except we make sure the URI is
+ * absolute.
+ */
+#define NS_IMPL_URI_ATTR_XSS(_class, _method, _atom)                \
+  NS_IMETHODIMP                                                     \
+  _class::Get##_method(nsAString& aValue)                           \
+  {                                                                 \
+    GetURIAttr(nsHTMLAtoms::_atom, aValue);                         \
+    /* only taint location, if it contains a '?' */					\
+	if (aValue.FindChar('?') >= 0) {								\
+	{																\
+		nsCString xss_doc_uri;										\
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();					\
+		if (baseURI) {												\
+			baseURI->GetSpec(xss_doc_uri);							\
+		}															\
+		XSS_LOG("xsstaintstring " #_class "::" #_method ": %s\n",	\
+			ToNewCString(											\
+			NS_LITERAL_STRING("'") +								\
+			aValue +												\
+			NS_LITERAL_STRING("' ") +								\
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));					\
+	} while (0);													\
+		aValue.xssSetTainted(XSS_TAINTED);							\
+	}																\
+                                                                    \
+    return NS_OK;                                                   \
+  }                                                                 \
+  NS_IMETHODIMP                                                     \
+  _class::Set##_method(const nsAString& aValue)                     \
+  {                                                                 \
+    return SetAttr(kNameSpaceID_None, nsHTMLAtoms::_atom, aValue,   \
+                   PR_TRUE);                                        \
+  }
+#endif /* XSS */
+
 /**
  * QueryInterface() implementation helper macros
  */
Index: mozilla-src/mozilla/content/html/content/src/nsHTMLAnchorElement.cpp
diff -u mozilla-src/mozilla/content/html/content/src/nsHTMLAnchorElement.cpp:1.1 mozilla-src/mozilla/content/html/content/src/nsHTMLAnchorElement.cpp:1.3
--- mozilla-src/mozilla/content/html/content/src/nsHTMLAnchorElement.cpp:1.1	Sat Nov 13 12:20:34 2004
+++ mozilla-src/mozilla/content/html/content/src/nsHTMLAnchorElement.cpp	Wed Dec 14 14:56:48 2005
@@ -66,6 +66,10 @@
 #include "nsIPresShell.h"
 #include "nsIDocument.h"
 
+#ifdef XSS /* XSS */
+#include "prlog.h"
+#endif /* XSS */
+
 nsresult NS_NewContentIterator(nsIContentIterator** aInstancePtrResult);
 
 class nsHTMLAnchorElement : public nsGenericHTMLElement,
@@ -209,7 +213,11 @@
 
 NS_IMPL_STRING_ATTR(nsHTMLAnchorElement, Charset, charset)
 NS_IMPL_STRING_ATTR(nsHTMLAnchorElement, Coords, coords)
+#ifndef XSS /* original */
 NS_IMPL_URI_ATTR(nsHTMLAnchorElement, Href, href)
+#else /* XSS */
+NS_IMPL_URI_ATTR_XSS_HREFPARAM(nsHTMLAnchorElement, Href, href)
+#endif /* XSS */
 NS_IMPL_STRING_ATTR(nsHTMLAnchorElement, Hreflang, hreflang)
 NS_IMPL_STRING_ATTR(nsHTMLAnchorElement, Name, name)
 NS_IMPL_STRING_ATTR(nsHTMLAnchorElement, Rel, rel)
@@ -353,9 +361,34 @@
   if (NS_FAILED(rv))
     return rv;
 
+#ifndef XSS /* original */
+
   // XXX this should really use GetHrefURI and not do so much string stuff
   return GetProtocolFromHrefString(href, aProtocol,
                                    nsGenericHTMLElement::GetOwnerDocument());
+
+#else /* XSS */
+  
+  // XXX this should really use GetHrefURI and not do so much string stuff
+  rv = GetProtocolFromHrefString(href, aProtocol,
+								 nsGenericHTMLElement::GetOwnerDocument());
+	{
+		nsCString xss_doc_uri;
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		if (baseURI) {
+			baseURI->GetSpec(xss_doc_uri);
+		}	  
+		XSS_LOG("xsstaintstring nsHTMLAnchorElement::GetProtocol: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aProtocol + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aProtocol.xssSetTainted(XSS_TAINTED);
+  return rv;
+
+#endif /* XSS */
 }
 
 NS_IMETHODIMP
@@ -383,7 +416,30 @@
   if (NS_FAILED(rv))
     return rv;
 
+#ifndef XSS /* original */
+
   return GetHostFromHrefString(href, aHost);
+
+#else /* XSS */
+
+  rv = GetHostFromHrefString(href, aHost);
+	{
+		nsCString xss_doc_uri;
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		if (baseURI) {
+			baseURI->GetSpec(xss_doc_uri);
+		}	  
+		XSS_LOG("xsstaintstring nsHTMLAnchorElement::GetHost: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aHost + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aHost.xssSetTainted(XSS_TAINTED);
+  return rv;
+
+#endif /* XSS */
 }
 
 NS_IMETHODIMP
@@ -410,7 +466,30 @@
   if (NS_FAILED(rv))
     return rv;
 
+#ifndef XSS /* original */
+
   return GetHostnameFromHrefString(href, aHostname);
+
+#else /* XSS */
+
+  rv = GetHostnameFromHrefString(href, aHostname);
+	{
+		nsCString xss_doc_uri;
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		if (baseURI) {
+			baseURI->GetSpec(xss_doc_uri);
+		}	  
+		XSS_LOG("xsstaintstring nsHTMLAnchorElement::GetHostname: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aHostname + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aHostname.xssSetTainted(XSS_TAINTED);
+  return rv;
+
+#endif /* XSS */
 }
 
 NS_IMETHODIMP
@@ -438,7 +517,30 @@
   if (NS_FAILED(rv))
     return rv;
 
+#ifndef XSS /* original */
+
   return GetPathnameFromHrefString(href, aPathname);
+
+#else /* XSS */
+
+  rv = GetPathnameFromHrefString(href, aPathname);
+	{
+		nsCString xss_doc_uri;
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		if (baseURI) {
+			baseURI->GetSpec(xss_doc_uri);
+		}	  
+		XSS_LOG("xsstaintstring nsHTMLAnchorElement::GetPathname: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aPathname + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aPathname.xssSetTainted(XSS_TAINTED);
+  return rv;
+
+#endif /* XSS */
 }
 
 NS_IMETHODIMP
@@ -466,7 +568,30 @@
   if (NS_FAILED(rv))
     return rv;
 
+#ifndef XSS /* original */
+
   return GetSearchFromHrefString(href, aSearch);
+
+#else /* XSS */
+  
+  rv = GetSearchFromHrefString(href, aSearch);
+	{
+		nsCString xss_doc_uri;
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		if (baseURI) {
+			baseURI->GetSpec(xss_doc_uri);
+		}	  
+		XSS_LOG("xsstaintstring nsHTMLAnchorElement::GetSearch: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aSearch + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aSearch.xssSetTainted(XSS_TAINTED);
+  return rv;
+
+#endif /* XSS */
 }
 
 NS_IMETHODIMP
@@ -495,7 +620,30 @@
   if (NS_FAILED(rv))
     return rv;
 
+#ifndef XSS /* original */
+
   return GetPortFromHrefString(href, aPort);
+
+#else /* XSS */
+  
+  rv = GetPortFromHrefString(href, aPort);
+	{
+		nsCString xss_doc_uri;
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		if (baseURI) {
+			baseURI->GetSpec(xss_doc_uri);
+		}	  
+		XSS_LOG("xsstaintstring nsHTMLAnchorElement::GetPort: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aPort + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aPort.xssSetTainted(XSS_TAINTED);
+  return rv;
+
+#endif /* XSS */
 }
 
 NS_IMETHODIMP
@@ -524,7 +672,30 @@
   if (NS_FAILED(rv))
     return rv;
 
+#ifndef XSS /* original */
+
   return GetHashFromHrefString(href, aHash);
+
+#else /* XSS */
+
+  rv = GetHashFromHrefString(href, aHash);
+	{
+		nsCString xss_doc_uri;
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		if (baseURI) {
+			baseURI->GetSpec(xss_doc_uri);
+		}	  
+		XSS_LOG("xsstaintstring nsHTMLAnchorElement::GetHash: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aHash + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aHash.xssSetTainted(XSS_TAINTED);
+  return rv;
+
+#endif /* XSS */
 }
 
 NS_IMETHODIMP
@@ -584,7 +755,30 @@
 NS_IMETHODIMP
 nsHTMLAnchorElement::ToString(nsAString& aSource)
 {
+#ifndef XSS /* original */
+
   return GetHref(aSource);
+
+#else /* XSS */
+  
+  nsresult rv = GetHref(aSource);
+	{
+		nsCString xss_doc_uri;
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		if (baseURI) {
+			baseURI->GetSpec(xss_doc_uri);
+		}	  
+		XSS_LOG("xsstaintstring nsHTMLAnchorElement::ToString: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aSource + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aSource.xssSetTainted(XSS_TAINTED);
+  return rv;
+
+#endif /* XSS */
 }
 
 NS_IMETHODIMP
Index: mozilla-src/mozilla/content/html/content/src/nsHTMLFormElement.cpp
diff -u mozilla-src/mozilla/content/html/content/src/nsHTMLFormElement.cpp:1.1 mozilla-src/mozilla/content/html/content/src/nsHTMLFormElement.cpp:1.11
--- mozilla-src/mozilla/content/html/content/src/nsHTMLFormElement.cpp:1.1	Sat Nov 13 12:20:34 2004
+++ mozilla-src/mozilla/content/html/content/src/nsHTMLFormElement.cpp	Thu Mar  9 18:43:04 2006
@@ -85,6 +85,24 @@
 #include "nsIRadioVisitor.h"
 #include "nsIRadioGroupContainer.h"
 
+
+#ifdef XSS /* XSS */
+#include "nsIDOMHTMLDocument.h"
+#include "nsIPrompt.h"
+#include "nsReadableUtils.h"
+#include "nsIStringBundle.h"
+#include "nsIXSSHostConnectPermissionManager.h"
+
+#define xssDialogsProperties "chrome://global/locale/commonDialogs.properties"
+static NS_DEFINE_CID(kCStringBundleServiceCID,  NS_STRINGBUNDLESERVICE_CID);
+static NS_DEFINE_CID(kXSSHostConnectPermissionManagerCID,  NS_XSSHOSTCONNECTPERMISSIONMANAGER_CID);
+
+#include "xsstaint.h"
+#include "prenv.h"
+#include "prlog.h"
+
+#endif /* XSS */
+
 static const int NS_FORM_CONTROL_LIST_HASHTABLE_SIZE = 16;
 
 class nsFormControlList;
@@ -556,7 +574,11 @@
 }
 
 NS_IMPL_STRING_ATTR(nsHTMLFormElement, AcceptCharset, acceptcharset)
+#ifndef XSS /* original */
 NS_IMPL_STRING_ATTR(nsHTMLFormElement, Action, action)
+#else /* XSS */
+NS_IMPL_STRING_ATTR_XSS(nsHTMLFormElement, Action, action)
+#endif /* XSS */
 NS_IMPL_STRING_ATTR(nsHTMLFormElement, Enctype, enctype)
 NS_IMPL_STRING_ATTR(nsHTMLFormElement, Method, method)
 NS_IMPL_STRING_ATTR(nsHTMLFormElement, Name, name)
@@ -919,6 +941,280 @@
     return NS_OK;
   }
 
+#ifdef XSS /* XSS */
+	// to prompt the user
+	nsCOMPtr<nsIPrompt> prompt;
+	// document window
+	nsCOMPtr<nsIDOMWindowInternal> window (do_QueryInterface(mDocument->GetScriptGlobalObject()));
+	// the permissionmanager to use
+	nsCOMPtr<nsIXSSHostConnectPermissionManager> xssPermissionManager;
+	// stored rule for domains
+	PRUint32 xssRuleResult = nsIXSSHostConnectPermissionManager::UNKNOWN_CONNECT;
+	// flag if domains are equal
+    PRBool isDomainEqual = PR_FALSE;
+	// uris, hosts and domains
+	nsCString calledURI, callerURI, calledHost, callerHost, calledDomain, callerDomain, mSpecTaintedstr;
+	// the document uri
+	nsIURI* documenturi = mDocument->GetDocumentURI();
+	// if not 0, a error while initializing occured
+	int initerror = 0;
+	// flag if the contentLocation is tainted (=1) or not (=0)
+	int mSpecIstainted = 0;
+	// initialize string if mSpec is tainted
+	mSpecTaintedstr = ToNewCString(NS_LITERAL_STRING("untainted")); 
+
+	if (documenturi) {
+
+		if ((aFormSubmission->xssGetTainted() || xssGetTainted()) && (mSubmitInitiatedFromUserInput == 0)) {
+			mSpecIstainted = 1;
+			mSpecTaintedstr = ToNewCString(NS_LITERAL_STRING("tainted!")); 
+		}
+		// initialize the variables
+		if (window) {
+
+			// get the prompt-service
+			window->GetPrompter(getter_AddRefs(prompt));
+			if (!prompt)
+				initerror = 1;
+		} else {
+			initerror = 2;
+		}
+
+		if (actionURI) {
+			rv = actionURI->GetSpec(calledURI);
+			if (NS_FAILED(rv)) {
+				XSS_LOG("failed to get calledURI\n", "");
+				initerror = 3;
+			}
+			rv = actionURI->GetHost(calledHost);
+			if (NS_FAILED(rv)) {
+				XSS_LOG("failed to get calledHost\n", "");
+				initerror = 5;
+			}
+			rv = actionURI->GetDomain(calledDomain);
+			if (NS_FAILED(rv)) {
+				XSS_LOG("failed to get domain of called uri\n", "");
+				initerror = 7;
+			}
+		} else {
+			XSS_LOG("failed because actionURI is 0\n", "");
+			initerror = 11;
+		}
+
+		if (documenturi) {
+			rv = documenturi->GetSpec(callerURI);
+			if (NS_FAILED(rv)) {
+				XSS_LOG("failed to get callerURI\n", "");
+				initerror = 4;
+			}
+			rv = documenturi->GetHost(callerHost);
+			if (NS_FAILED(rv)) {
+				XSS_LOG("failed to get callerHost\n", "");
+				initerror = 6;
+			}
+			rv = documenturi->GetDomain(callerDomain);
+			if (NS_FAILED(rv)) {
+				XSS_LOG("failed to get domain of caller\n", "");
+				initerror = 8;
+			}
+		} else {
+			XSS_LOG("failed because documenturi is 0\n", "");
+			initerror = 12;
+		}
+
+		if (initerror == 0) {
+			xssPermissionManager =
+				do_GetService(NS_XSSHOSTCONNECTPERMISSIONMANAGER_CONTRACTID, &rv);
+			if (NS_FAILED(rv)) {
+				XSS_LOG("failed to get permissionmanager\n", "");
+				initerror = 9;
+			} else {
+				rv = xssPermissionManager->TestPermission(callerDomain, calledDomain, &xssRuleResult);
+				if (NS_FAILED(rv)) {
+					XSS_LOG("failed to test permission\n", "");
+					initerror = 10;
+				}
+			}
+			// check if the questioning is switched off (XSS_USERINTERACTION==XSS_ENV_USERINTERACTION_FALSE) by the environment
+			char* env = PR_GetEnv(XSS_ENV_USERINTERACTION_STR);
+			if (env) {
+				PRInt32 num;
+				if (sscanf(env, "%d", &num) > 0) {
+					// XSS_USERINTERACTION must be XSS_ENV_USERINTERACTION_FALSE and not persistent settings
+					if ((num == XSS_ENV_USERINTERACTION_FALSE) && (xssRuleResult == nsIXSSHostConnectPermissionManager::UNKNOWN_CONNECT)) {
+						xssRuleResult = nsIXSSHostConnectPermissionManager::ALLOW_CONNECT;
+						XSS_LOG("domaincheck: environment allowed %s\n", ToNewCString(NS_LITERAL_STRING("from ") + NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+					}
+				}
+			}
+			// check if permanent rules are always used regardless of tainted status
+			env = PR_GetEnv(XSS_ENV_DONTCHECKTAINT);
+			if (env) {
+				PRInt32 num;
+				if (sscanf(env, "%d", &num) > 0) {
+					// XSS_ENV_DONTCHECKTAINT must be XSS_ENV_DONTCHECKTAINT_TRUE
+					if (num == XSS_ENV_DONTCHECKTAINT_TRUE) {
+						xssRuleResult = nsIXSSHostConnectPermissionManager::UNKNOWN_CONNECT;
+						XSS_LOG("domaincheck: environment delayed stored decision %s\n", ToNewCString(NS_LITERAL_STRING("from ") + NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+					}
+				}
+			}
+		} // end of initerror == 0
+
+		// now all variables are initialized or initerror is now != 0
+
+		// if an error occured on initializing, we don't want to check.
+		// breaking expected behaviour is bad
+		if (initerror == 0) {
+
+			// check domains
+			rv = documenturi->DomainEquals(actionURI, &isDomainEqual);
+
+			// the hosts are not equal
+			if (NS_FAILED(rv) || !isDomainEqual) {
+
+				// if we have a stored decision use it regardless of the taint state
+				if (xssRuleResult == nsIXSSHostConnectPermissionManager::ALLOW_CONNECT) {
+
+					XSS_LOG("domaincheck: user allowed it always: %s\n", 
+						ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING(" from ") 
+						+ NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+
+				} else if (xssRuleResult == nsIXSSHostConnectPermissionManager::DENY_CONNECT) {
+
+					XSS_LOG("domaincheck: user stopped it always: %s\n", 
+						ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING(" from ") 
+						+ NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+					mIsSubmitting = PR_FALSE;
+					return NS_OK;
+
+				// no decision, so ask if it is tainted
+				} else {
+					// only check, if a formelelement or the action is tainted and the form is submitted by javascript
+					if (mSpecIstainted) {
+
+						// check again if we already have a stored permission
+						// it is possible that the env-variable overrides the initial test so
+						// do it again
+						rv = xssPermissionManager->TestPermission(callerDomain, calledDomain, &xssRuleResult);
+						if (NS_FAILED(rv)) {
+							XSS_LOG("failed to test permission\n", "");
+							initerror = 10;
+						}
+
+						// if there isn't a permanent rule for it, ask the user
+						if (xssRuleResult == nsIXSSHostConnectPermissionManager::UNKNOWN_CONNECT) {
+
+							XSS_LOG("domaincheck: ask %s\n", ToNewCString(NS_LITERAL_STRING("from ") + NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+
+							// get the question-string
+							nsString xss_question_str;
+
+							nsCOMPtr<nsIStringBundleService> stringBundleService =
+								do_GetService(kCStringBundleServiceCID, &rv);
+
+							if (NS_SUCCEEDED(rv) && stringBundleService) {
+								nsCOMPtr<nsIStringBundle> stringBundle;
+								rv = stringBundleService->CreateBundle(xssDialogsProperties,
+								getter_AddRefs(stringBundle));
+
+								if (stringBundle) {
+									nsXPIDLString tempString;
+									const PRUnichar *formatStrings[2];
+									formatStrings[0] = ToNewUnicode(callerHost);
+									formatStrings[1] = ToNewUnicode(calledHost);
+									rv = stringBundle->FormatStringFromName(
+										NS_LITERAL_STRING("ConfirmExXSS").get(),
+										formatStrings, 2, getter_Copies(tempString));
+									if (tempString)
+										xss_question_str = tempString.get();
+								}
+							}
+
+							// Just in case
+							if (xss_question_str.IsEmpty()) {
+								NS_WARNING("could not get ConfirmExXSS string from string bundle");
+								xss_question_str.Assign(NS_LITERAL_STRING("[ConfirmExXSS] from "));
+								xss_question_str.Append(NS_ConvertUTF8toUTF16(callerURI));
+								xss_question_str.Append(NS_LITERAL_STRING(" to "));
+								xss_question_str.Append(NS_ConvertUTF8toUTF16(calledURI));
+							}
+							PRUnichar *xss_question = ToNewUnicode(xss_question_str);
+
+							// ask the question
+							PRInt32 xss_choice;
+							rv = prompt->ConfirmExXSS(nsnull, xss_question,
+												nsIPrompt::BUTTON_TITLE_NO * nsIPrompt::BUTTON_POS_0 +
+												nsIPrompt::BUTTON_TITLE_NO_ALWAYS  * nsIPrompt::BUTTON_POS_1 +
+												nsIPrompt::BUTTON_TITLE_YES_ALWAYS  * nsIPrompt::BUTTON_POS_2,
+												nsIPrompt::BUTTON_TITLE_YES  * nsIPrompt::BUTTON_POS_0,
+												nsnull, nsnull, nsnull, nsnull, nsnull, nsnull, &xss_choice);
+							if (NS_FAILED(rv)) {
+								mIsSubmitting = PR_FALSE;
+								return NS_OK;
+							}
+
+							// evaluate the answer
+							switch (xss_choice) {
+								// yes-button
+								case 3:
+									XSS_LOG("domaincheck: user allowed it: %s\n", 
+										ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING(" from ") 
+										+ NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)) );
+									break;
+								// yes, always-button
+								case 2:
+									XSS_LOG("domaincheck: user allowed it always: %s\n", 
+										ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING(" from ") 
+										+ NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+									break;
+									xssPermissionManager->Add(callerDomain, calledDomain,nsIXSSHostConnectPermissionManager::ALLOW_CONNECT);
+								// no-always-button
+								case 1:
+									XSS_LOG("domaincheck: user stopped it always: %s\n", 
+										ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING(" from ") 
+										+ NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+									xssPermissionManager->Add(callerDomain, calledDomain, nsIXSSHostConnectPermissionManager::DENY_CONNECT);
+									mIsSubmitting = PR_FALSE;
+									return NS_OK;
+									break;
+								// no-button
+								case 0:
+									XSS_LOG("domaincheck: user stopped it: %s\n", 
+										ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING("from ") 
+										+ NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+									mIsSubmitting = PR_FALSE;
+									return NS_OK;
+									break;
+								default:
+									XSS_LOG("domaincheck: error! %s\n", 
+										ToNewCString(NS_ConvertUTF8toUTF16(mSpecTaintedstr) + NS_LITERAL_STRING("from ") 
+										+ NS_ConvertUTF8toUTF16(callerURI) + NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+									mIsSubmitting = PR_FALSE;
+									return NS_OK;
+									break;
+							}
+						// we already have a user decision
+						} else {
+							if (xssRuleResult == nsIXSSHostConnectPermissionManager::DENY_CONNECT) {
+								mIsSubmitting = PR_FALSE;
+								XSS_LOG("domaincheck: stored always deny! %s\n", 
+									ToNewCString(NS_LITERAL_STRING("from ") + NS_ConvertUTF8toUTF16(callerURI) 
+									+ NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+								return NS_OK;
+							} else {
+								XSS_LOG("domaincheck: stored always allow! %s\n", 
+									ToNewCString(NS_LITERAL_STRING("from ") + NS_ConvertUTF8toUTF16(callerURI) 
+									+ NS_LITERAL_STRING(" to ") + NS_ConvertUTF8toUTF16(calledURI)));
+							}
+						}
+					}
+				} // end of ask user
+			} // end of domain is equal
+		} // end of initerror
+	} // end of documenturi
+#endif /* XSS */
+
   // javascript URIs are not really submissions; they just call a function.
   // Also, they may synchronously call submit(), and we want them to be able to
   // do so while still disallowing other double submissions. (Bug 139798)
@@ -1107,6 +1403,37 @@
     NS_ENSURE_SUCCESS(rv, rv);
     control = do_QueryInterface(controlSupports);
 
+#ifdef XSS /* XSS */
+	// check if the control is tainted and taint the form if it is
+    nsCOMPtr<nsIDOMNode> node(do_QueryInterface(control));
+	if (node) {
+		nsCOMPtr<nsIDOMDocument> doc;		
+		node->GetOwnerDocument(getter_AddRefs(doc));
+		nsCOMPtr<nsIDOMHTMLDocument> htmlDoc = do_QueryInterface(doc);
+		if (htmlDoc) {
+			PRBool xss_test;
+			htmlDoc->XssIsNodeTainted(node, &xss_test);
+			if (xss_test) {
+				{
+					nsCString xss_doc_uri;
+					nsCOMPtr<nsIURI> baseURI;
+					GetActionURL(getter_AddRefs(baseURI));
+					if (baseURI) {
+						baseURI->GetSpec(xss_doc_uri);
+					}	  
+					XSS_LOG("xsstaintstring nsHTMLFormElement::WalkFormElements: %s\n",
+						ToNewCString(
+						NS_LITERAL_STRING("'") +
+						NS_ConvertUTF8toUTF16(xss_doc_uri) +
+					    NS_LITERAL_STRING("'")
+						));
+				} while (0);
+				xssSetTainted(XSS_TAINTED);
+			}
+		}
+	}
+#endif /* XSS */
+
     // Tell the control to submit its name/value pairs to the submission
     control->SubmitNamesValues(aFormSubmission, aSubmitElement);
   }
Index: mozilla-src/mozilla/content/html/content/src/nsHTMLInputElement.cpp
diff -u mozilla-src/mozilla/content/html/content/src/nsHTMLInputElement.cpp:1.1 mozilla-src/mozilla/content/html/content/src/nsHTMLInputElement.cpp:1.4
--- mozilla-src/mozilla/content/html/content/src/nsHTMLInputElement.cpp:1.1	Sat Nov 13 12:20:35 2004
+++ mozilla-src/mozilla/content/html/content/src/nsHTMLInputElement.cpp	Wed Dec 14 14:56:48 2005
@@ -109,6 +109,10 @@
 #include "nsImageLoadingContent.h"
 #include "nsIDOMWindowInternal.h"
 
+#ifdef XSS /* XSS */
+#include "prlog.h"
+#endif /* XSS */
+
 // XXX align=left, hspace, vspace, border? other nav4 attrs
 
 static NS_DEFINE_CID(kXULControllersCID,  NS_XULCONTROLLERS_CID);
@@ -579,7 +583,11 @@
   return nsGenericHTMLFormElement::GetForm(aForm);
 }
 
+#ifndef XSS /* original */
 NS_IMPL_STRING_ATTR(nsHTMLInputElement, DefaultValue, value)
+#else /* XSS */
+NS_IMPL_STRING_ATTR_XSS(nsHTMLInputElement, DefaultValue, value)
+#endif /* XSS */
 NS_IMPL_BOOL_ATTR(nsHTMLInputElement, DefaultChecked, checked)
 NS_IMPL_STRING_ATTR(nsHTMLInputElement, Accept, accept)
 NS_IMPL_STRING_ATTR(nsHTMLInputElement, AccessKey, accesskey)
@@ -588,7 +596,11 @@
 //NS_IMPL_BOOL_ATTR(nsHTMLInputElement, Checked, checked)
 NS_IMPL_BOOL_ATTR(nsHTMLInputElement, Disabled, disabled)
 NS_IMPL_INT_ATTR(nsHTMLInputElement, MaxLength, maxlength)
+#ifndef XSS /* original */
 NS_IMPL_STRING_ATTR(nsHTMLInputElement, Name, name)
+#else /* XSS */
+NS_IMPL_STRING_ATTR_XSS(nsHTMLInputElement, Name, name)
+#endif /* XSS */
 NS_IMPL_BOOL_ATTR(nsHTMLInputElement, ReadOnly, readonly)
 NS_IMPL_STRING_ATTR(nsHTMLInputElement, Src, src)
 NS_IMPL_INT_ATTR(nsHTMLInputElement, TabIndex, tabindex)
@@ -653,18 +665,73 @@
         CopyUTF8toUTF16(mValue, aValue);
       }
     }
+#ifdef XSS /* XSS */
+	nsGenericElement *thisNode = NS_STATIC_CAST(nsGenericElement *, this);
+	if (thisNode) {
+		{
+			nsCString xss_doc_uri;
+			nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+			if (baseURI) {
+				baseURI->GetSpec(xss_doc_uri);
+			}	  
+			XSS_LOG("xsstaintstring nsHTMLInputElement::GetValue: %s\n",
+				ToNewCString(
+				NS_LITERAL_STRING("'") +
+				aValue + 
+				NS_LITERAL_STRING("' ") + 
+				NS_ConvertUTF8toUTF16(xss_doc_uri)));
+		} while (0);
+		((nsAString &)aValue).xssSetTainted(thisNode->xssGetTainted());
+	}
+	// taint the value
+	aValue.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
 
     return NS_OK;
   }
 
   // Treat value == defaultValue for other input elements
   nsresult rv = GetAttr(kNameSpaceID_None, nsHTMLAtoms::value, aValue);
-
+#ifdef XSS /* XSS */
+  // taint the value
+  {
+	  nsCString xss_doc_uri;
+	  nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+	  if (baseURI) {
+		  baseURI->GetSpec(xss_doc_uri);
+	  }	  
+	  XSS_LOG("xsstaintstring nsHTMLInputElement::GetValue: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aValue + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aValue.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
   if (rv == NS_CONTENT_ATTR_NOT_THERE &&
       (mType == NS_FORM_INPUT_RADIO || mType == NS_FORM_INPUT_CHECKBOX)) {
     // The default value of a radio or checkbox input is "on".
     aValue.Assign(NS_LITERAL_STRING("on"));
 
+#ifdef XSS /* XSS */
+	// taint the value
+	{
+		nsCString xss_doc_uri;
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		if (baseURI) {
+			baseURI->GetSpec(xss_doc_uri);
+		}	  
+		XSS_LOG("xsstaintstring nsHTMLInputElement::GetValue: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aValue + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+	aValue.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
+
     return NS_OK;
   }
 
@@ -690,6 +757,25 @@
       return NS_ERROR_DOM_SECURITY_ERR;
     }
   }
+#ifdef XSS /* XSS */
+  nsGenericElement *thisNode = NS_STATIC_CAST(nsGenericElement *, this);
+  if (thisNode) {
+	  {
+		  nsCString xss_doc_uri;
+		  nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		  if (baseURI) {
+			  baseURI->GetSpec(xss_doc_uri);
+		  }	  
+		  XSS_LOG("xsstaintstring nsHTMLInputElement::SetValue: %s\n",
+			  ToNewCString(
+			  NS_LITERAL_STRING("'") +
+			  aValue + 
+			  NS_LITERAL_STRING("' ") + 
+			  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	  } while (0);
+	  thisNode->xssSetTainted(((nsAString &)aValue).xssGetTainted());
+  }
+#endif /* XSS */
   SetValueInternal(aValue, nsnull);
   return NS_OK;
 }
Index: mozilla-src/mozilla/content/html/content/src/nsHTMLOptionElement.cpp
diff -u mozilla-src/mozilla/content/html/content/src/nsHTMLOptionElement.cpp:1.1 mozilla-src/mozilla/content/html/content/src/nsHTMLOptionElement.cpp:1.3
--- mozilla-src/mozilla/content/html/content/src/nsHTMLOptionElement.cpp:1.1	Sat Nov 13 12:20:33 2004
+++ mozilla-src/mozilla/content/html/content/src/nsHTMLOptionElement.cpp	Wed Dec 14 14:56:48 2005
@@ -71,6 +71,10 @@
 #include "nsXULAtoms.h"
 #include "nsIDOMDocument.h"
 
+#ifdef XSS /* XSS */
+#include "prlog.h"
+#endif /* XSS */
+
 /**
  * Implementation of &lt;option&gt;
  */
@@ -306,6 +310,23 @@
     GetText(aValue);
   }
 
+#ifdef XSS /* XSS */
+  {
+	  nsCString xss_doc_uri;
+	  nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+	  if (baseURI) {
+		  baseURI->GetSpec(xss_doc_uri);
+	  }	  
+	  XSS_LOG("xsstaintstring nsHTMLOptionElement::GetValue: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aValue + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aValue.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
+
   return NS_OK;
 }
 
@@ -442,6 +463,23 @@
   text.CompressWhitespace(PR_TRUE, PR_TRUE);
   aText = text;
 
+#ifdef XSS /* XSS */
+  {
+	  nsCString xss_doc_uri;
+	  nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+	  if (baseURI) {
+		  baseURI->GetSpec(xss_doc_uri);
+	  }	  
+	  XSS_LOG("xsstaintstring nsHTMLOptionElement::GetText: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aText + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aText.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
+
   return NS_OK;
 }
 
Index: mozilla-src/mozilla/content/html/content/src/nsHTMLSelectElement.cpp
diff -u mozilla-src/mozilla/content/html/content/src/nsHTMLSelectElement.cpp:1.1 mozilla-src/mozilla/content/html/content/src/nsHTMLSelectElement.cpp:1.4
--- mozilla-src/mozilla/content/html/content/src/nsHTMLSelectElement.cpp:1.1	Sat Nov 13 12:20:35 2004
+++ mozilla-src/mozilla/content/html/content/src/nsHTMLSelectElement.cpp	Wed Dec 14 14:56:48 2005
@@ -82,6 +82,11 @@
 #include "nsDOMError.h"
 #include "nsRuleNode.h"
 
+#ifdef XSS /* XSS */
+#include "xsstaint.h"
+#include "nsIDOMHTMLDocument.h"
+#include "prlog.h"
+#endif /* XSS */
 
 class nsHTMLSelectElement;
 
@@ -2108,6 +2113,39 @@
     rv = optionElement->GetValue(value);
     NS_ENSURE_SUCCESS(rv, rv);
 
+#ifdef XSS /* XSS */
+    nsCOMPtr<nsIDOMNode> node(do_QueryInterface(optionElement));
+	if (node) {
+		// Use |GetOwnerDocument| so it works during destruction.
+		nsCOMPtr<nsIDOMDocument> doc;		
+		node->GetOwnerDocument(getter_AddRefs(doc));
+		nsCOMPtr<nsIDOMHTMLDocument> htmlDoc = do_QueryInterface(doc);
+		if (htmlDoc) {
+			// check if form must be tainted
+			PRBool xss_test;
+			htmlDoc->XssIsNodeTainted(node, &xss_test);
+			if (xss_test) {
+				// taint the form
+				{
+					nsCString xss_doc_uri;
+					nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+					if (baseURI) {
+						baseURI->GetSpec(xss_doc_uri);
+					}	  
+					XSS_LOG("xsstaintstring nsHTMLSelectElement::SubmitNamesValues: %s\n",
+						ToNewCString(
+						NS_LITERAL_STRING("'") +
+						NS_ConvertUTF8toUTF16(xss_doc_uri) +
+						NS_LITERAL_STRING("'")
+						));
+				} while (0);
+				aFormSubmission->xssSetTainted(XSS_TAINTED);
+			}
+		}
+	}
+#endif /* XSS */
+
+
     rv = aFormSubmission->AddNameValuePair(this, name, value);
   }
 
Index: mozilla-src/mozilla/content/html/content/src/nsHTMLTextAreaElement.cpp
diff -u mozilla-src/mozilla/content/html/content/src/nsHTMLTextAreaElement.cpp:1.1 mozilla-src/mozilla/content/html/content/src/nsHTMLTextAreaElement.cpp:1.3
--- mozilla-src/mozilla/content/html/content/src/nsHTMLTextAreaElement.cpp:1.1	Sat Nov 13 12:20:33 2004
+++ mozilla-src/mozilla/content/html/content/src/nsHTMLTextAreaElement.cpp	Wed Dec 14 14:56:48 2005
@@ -70,6 +70,10 @@
 #include "nsReadableUtils.h"
 #include "nsITextContent.h"
 
+#ifdef XSS /* XSS */
+#include "prlog.h"
+#endif /* XSS */
+
 static NS_DEFINE_CID(kXULControllersCID,  NS_XULCONTROLLERS_CID);
 
 
@@ -388,7 +392,11 @@
 NS_IMPL_STRING_ATTR(nsHTMLTextAreaElement, AccessKey, accesskey)
 NS_IMPL_INT_ATTR(nsHTMLTextAreaElement, Cols, cols)
 NS_IMPL_BOOL_ATTR(nsHTMLTextAreaElement, Disabled, disabled)
+#ifndef XSS /* original */
 NS_IMPL_STRING_ATTR(nsHTMLTextAreaElement, Name, name)
+#else /* XSS */
+NS_IMPL_STRING_ATTR_XSS(nsHTMLTextAreaElement, Name, name)
+#endif /* XSS */
 NS_IMPL_BOOL_ATTR(nsHTMLTextAreaElement, ReadOnly, readonly)
 NS_IMPL_INT_ATTR(nsHTMLTextAreaElement, Rows, rows)
 NS_IMPL_INT_ATTR(nsHTMLTextAreaElement, TabIndex, tabindex)
@@ -510,7 +518,28 @@
 NS_IMETHODIMP
 nsHTMLTextAreaElement::GetDefaultValue(nsAString& aDefaultValue)
 {
+#ifndef XSS /* original */
   return GetContentsAsText(aDefaultValue);
+#else /* XSS */
+	nsresult rv;
+	rv = GetContentsAsText(aDefaultValue);
+	// taint the returnvalue
+	{
+		nsCString xss_doc_uri;
+		nsCOMPtr<nsIURI> baseURI = GetBaseURI();
+		if (baseURI) {
+			baseURI->GetSpec(xss_doc_uri);
+		}	  
+		XSS_LOG("xsstaintstring nsHTMLTextAreaElement::GetDefaultValue: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aDefaultValue + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+	aDefaultValue.xssSetTainted(XSS_TAINTED);
+	return rv;
+#endif /* XSS */
 }  
 
 NS_IMETHODIMP
Index: mozilla-src/mozilla/content/html/document/src/nsHTMLDocument.cpp
diff -u mozilla-src/mozilla/content/html/document/src/nsHTMLDocument.cpp:1.1 mozilla-src/mozilla/content/html/document/src/nsHTMLDocument.cpp:1.7
--- mozilla-src/mozilla/content/html/document/src/nsHTMLDocument.cpp:1.1	Sat Nov 13 12:20:31 2004
+++ mozilla-src/mozilla/content/html/document/src/nsHTMLDocument.cpp	Wed Dec 14 14:56:48 2005
@@ -137,6 +137,11 @@
 static PRBool gInitDetector = PR_FALSE;
 static PRBool gPlugDetector = PR_FALSE;
 
+#ifdef XSS
+#include "xsstaint.h"
+#include "prlog.h"
+#endif /* XSS */
+
 #include "prmem.h"
 #include "prtime.h"
 
@@ -359,6 +364,12 @@
 
   PrePopulateHashTables();
 
+#ifdef XSS /* XSS */
+
+  mXssTaintedHash.Init();
+
+#endif /* XSS */
+
   return NS_OK;
 }
 
@@ -1630,6 +1641,21 @@
     // etc), just return an null string.
     SetDOMStringToNull(aDomain);
   }
+#ifdef XSS /* XSS */
+  {
+	  nsCString  xss_doc_uri;
+	  if (mDocumentBaseURI) {
+		  mDocumentBaseURI->GetSpec(xss_doc_uri);
+	  }
+	  XSS_LOG("xsstaintstring nsHTMLDocument::GetDomain: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aDomain + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aDomain.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
 
   return NS_OK;
 }
@@ -1709,6 +1735,24 @@
   }
 
   CopyUTF8toUTF16(str, aURL);
+#ifdef XSS /* XSS */
+  // only taint if the url contains a '?'. i.e. there are parameters
+  if (str.FindChar('?') >= 0) {
+	{
+		nsCString  xss_doc_uri;
+		if (mDocumentBaseURI) {
+			mDocumentBaseURI->GetSpec(xss_doc_uri);
+		}
+		XSS_LOG("xsstaintstring nsHTMLDocument::GetURL: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aURL + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+	aURL.xssSetTainted(XSS_TAINTED);
+  }
+#endif /* XSS */
 
   return NS_OK;
 }
@@ -1945,6 +1989,21 @@
     nsXPIDLCString cookie;
     service->GetCookieString(codebaseURI, mChannel, getter_Copies(cookie));
     CopyASCIItoUTF16(cookie, aCookie);
+#ifdef XSS /* XSS */
+	{
+		nsCString  xss_doc_uri;
+		if (mDocumentBaseURI) {
+			mDocumentBaseURI->GetSpec(xss_doc_uri);
+		}
+		XSS_LOG("xsstaintstring nsHTMLDocument::GetCookie: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aCookie + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+	aCookie.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
   }
 
   return NS_OK;
@@ -2529,6 +2588,85 @@
   return NS_OK;
 }
 
+#ifdef XSS /* XSS */
+
+/*
+ * Checks if the node (or one of its methods) is tainted.
+ * node ... the nsIDOMNode to test
+ * _retval ... true if the node was tainted, otherwise false
+ */
+NS_IMETHODIMP
+nsHTMLDocument::XssIsNodeTainted(nsIDOMNode *node, PRBool *_retval) {
+
+	*_retval = PR_FALSE;
+	nsInt32HashSet* hashset;
+	
+	mXssTaintedHash.Get(node, &hashset);
+	if (hashset) {
+		*_retval = PR_TRUE;
+	}
+
+	return NS_OK;
+}
+
+/*
+ * Checks if the node and the method is tainted.
+ * node ... the nsIDOMNode to test
+ * method ... the vtblIndex of the method to test
+ * _retval ... true if the node and the method was tainted, otherwise false
+ */
+NS_IMETHODIMP
+nsHTMLDocument::XssIsMethodTainted(nsIDOMNode *node, PRUint32 method, PRBool *_retval) {
+
+	*_retval = PR_FALSE;
+	nsInt32HashSet* hashset;
+	
+	mXssTaintedHash.Get(node, &hashset);
+	if (hashset) {
+		*_retval = hashset->Contains(method);
+	}
+
+	return NS_OK;
+}
+
+/*
+ * Sets the node and the method as tainted.
+ * node ... the nsIDOMNode to taint
+ * method ... the vtblIndex of the method to taint
+ */
+NS_IMETHODIMP
+nsHTMLDocument::XssSetMethodTainted(nsIDOMNode *node, PRUint32 method) {
+
+	nsInt32HashSet* hashset;
+	
+	mXssTaintedHash.Get(node, &hashset);
+
+	/* there is already a hashset at this position, so taint the method */
+	if (hashset) {
+		hashset->Put(method);
+
+	/* create a new hashset, taint the method and add it to the hash */
+	} else {
+		hashset = new nsInt32HashSet();
+		if (hashset) {
+			nsresult rv = hashset->Init(10);
+			NS_ENSURE_SUCCESS(rv, rv);
+
+			/* taint the method */
+			hashset->Put(method);
+
+			/* add the hashset */
+			mXssTaintedHash.Put(node, hashset);
+		} else {
+			return NS_ERROR_OUT_OF_MEMORY;
+		}
+	}
+
+	return NS_OK;
+}
+
+#endif /* XSS */
+
 void
 nsHTMLDocument::AddedForm()
 {
Index: mozilla-src/mozilla/content/html/document/src/nsHTMLDocument.h
diff -u mozilla-src/mozilla/content/html/document/src/nsHTMLDocument.h:1.1 mozilla-src/mozilla/content/html/document/src/nsHTMLDocument.h:1.3
--- mozilla-src/mozilla/content/html/document/src/nsHTMLDocument.h:1.1	Sat Nov 13 12:20:31 2004
+++ mozilla-src/mozilla/content/html/document/src/nsHTMLDocument.h	Mon Nov 14 16:32:13 2005
@@ -62,6 +62,14 @@
 
 #include "nsICommandManager.h"
 
+#ifdef XSS /* XSS */
+
+#include "nsClassHashtable.h"
+#include "nsHashKeys.h"
+#include "nsHashSets.h"
+
+#endif /* XSS */
+
 class nsIParser;
 class nsICSSLoader;
 class nsIURI;
@@ -182,6 +190,30 @@
   NS_IMETHOD GetElementsByName(const nsAString & elementName,
                                nsIDOMNodeList **_retval);
 
+#ifdef XSS /* XSS */
+
+/*
+ * Checks if the node (or one of its methods) is tainted.
+ * node ... the nsIDOMNode to test
+ * _retval ... true if the node was tainted, otherwise false
+ */
+  NS_IMETHOD XssIsNodeTainted(nsIDOMNode *node, PRBool *_retval);
+/*
+ * Checks if the node and the method is tainted.
+ * node ... the nsIDOMNode to test
+ * method ... the vtblIndex of the method to test
+ * _retval ... true if the node and the method was tainted, otherwise false
+ */
+  NS_IMETHOD XssIsMethodTainted(nsIDOMNode *node, PRUint32 method, PRBool *_retval);
+/*
+ * Sets the node and the method as tainted.
+ * node ... the nsIDOMNode to taint
+ * method ... the vtblIndex of the method to taint
+ */
+  NS_IMETHOD XssSetMethodTainted(nsIDOMNode *node, PRUint32 method);
+
+#endif /* XSS */
+
   // nsIDOMNSHTMLDocument interface
   NS_DECL_NSIDOMNSHTMLDOCUMENT
 
@@ -343,6 +375,13 @@
   // kNameSpaceID_None for good ol' HTML documents, and
   // kNameSpaceID_XHTML for spiffy new XHTML documents.
   PRInt32 mDefaultNamespaceID;
+
+#ifdef XSS /* XSS */
+
+  nsClassHashtable<nsISupportsHashKey, nsInt32HashSet> mXssTaintedHash;
+
+#endif /* XSS */
+
 };
 
 #endif /* nsHTMLDocument_h___ */
Index: mozilla-src/mozilla/content/shared/public/nsTextFragment.h
diff -u mozilla-src/mozilla/content/shared/public/nsTextFragment.h:1.1 mozilla-src/mozilla/content/shared/public/nsTextFragment.h:1.3
--- mozilla-src/mozilla/content/shared/public/nsTextFragment.h:1.1	Sat Nov 13 12:20:35 2004
+++ mozilla-src/mozilla/content/shared/public/nsTextFragment.h	Fri Nov 25 18:37:28 2005
@@ -39,6 +39,11 @@
 #define nsTextFragment_h___
 
 #include "nsAString.h"
+
+#ifdef XSS /* XSS */
+#include "xsstaint.h"
+#endif /* XSS */
+
 class nsString;
 class nsCString;
 
@@ -79,6 +84,11 @@
   nsTextFragment()
     : m1b(nsnull), mAllBits(0)
   {
+#ifdef XSS /* XSS */
+	  
+	  xss_istainted = XSS_NOT_TAINTED;
+
+#endif /* XSS */
   }
 
   ~nsTextFragment();
@@ -250,6 +260,24 @@
     PRUint32 mLength : 29;
   };
 
+#ifdef XSS /* XSS */
+		
+    /**
+	 * Checks if this string is tainted
+	 */
+	int xssGetTainted() const
+	{
+		return xss_istainted;
+	}
+
+
+	/**
+     * Sets this string to tainted
+	 */
+	void xssSetTainted(int tainted);
+
+#endif /* XSS */
+
 protected:
   void ReleaseText();
 
@@ -262,6 +290,13 @@
     PRUint32 mAllBits;
     FragmentBits mState;
   };
+
+#ifdef XSS /* XSS */
+	  
+	  // flag if the string is tainted
+	  int xss_istainted;
+
+#endif /* XSS */
 };
 
 #endif /* nsTextFragment_h___ */
Index: mozilla-src/mozilla/content/shared/src/Makefile.in
diff -u mozilla-src/mozilla/content/shared/src/Makefile.in:1.1 mozilla-src/mozilla/content/shared/src/Makefile.in:1.2
--- mozilla-src/mozilla/content/shared/src/Makefile.in:1.1	Sat Nov 13 12:20:35 2004
+++ mozilla-src/mozilla/content/shared/src/Makefile.in	Fri Nov 25 18:37:50 2005
@@ -38,6 +38,7 @@
 		  necko \
 		  unicharutil \
 		  imglib2 \
+		  js \
 		  $(NULL)
 
 CPPSRCS		= \
Index: mozilla-src/mozilla/content/shared/src/nsTextFragment.cpp
diff -u mozilla-src/mozilla/content/shared/src/nsTextFragment.cpp:1.1 mozilla-src/mozilla/content/shared/src/nsTextFragment.cpp:1.2
--- mozilla-src/mozilla/content/shared/src/nsTextFragment.cpp:1.1	Sat Nov 13 12:20:35 2004
+++ mozilla-src/mozilla/content/shared/src/nsTextFragment.cpp	Tue Jul 26 17:35:50 2005
@@ -74,6 +74,9 @@
   } else {
     SetTo(aOther.Get1b(), aOther.GetLength());
   }
+#ifdef XSS /* XSS */
+  xssSetTainted(aOther.xssGetTainted());
+#endif /* XSS */
 }
 
 nsTextFragment::nsTextFragment(const char *aString)
@@ -359,3 +362,12 @@
     }
   }
 }
+
+#ifdef XSS /* XSS */
+
+void
+nsTextFragment::xssSetTainted(int tainted)
+  {
+    xss_istainted = tainted;
+  }
+#endif /* XSS */
Index: mozilla-src/mozilla/dom/public/idl/html/nsIDOMHTMLDocument.idl
diff -u mozilla-src/mozilla/dom/public/idl/html/nsIDOMHTMLDocument.idl:1.1 mozilla-src/mozilla/dom/public/idl/html/nsIDOMHTMLDocument.idl:1.3
--- mozilla-src/mozilla/dom/public/idl/html/nsIDOMHTMLDocument.idl:1.1	Sat Nov 13 12:22:18 2004
+++ mozilla-src/mozilla/dom/public/idl/html/nsIDOMHTMLDocument.idl	Mon Nov 14 16:35:15 2005
@@ -82,4 +82,10 @@
   [noscript] void           writeln(in DOMString text);
 
   nsIDOMNodeList            getElementsByName(in DOMString elementName);
+
+#ifdef XSS /* XSS */
+  [noscript] boolean        XssIsNodeTainted(in nsIDOMNode node);
+  [noscript] boolean        XssIsMethodTainted(in nsIDOMNode node, in unsigned long method);
+  [noscript] void           XssSetMethodTainted(in nsIDOMNode node, in unsigned long method);
+#endif /* XSS */
 };
Index: mozilla-src/mozilla/dom/src/base/nsGlobalWindow.cpp
diff -u mozilla-src/mozilla/dom/src/base/nsGlobalWindow.cpp:1.1 mozilla-src/mozilla/dom/src/base/nsGlobalWindow.cpp:1.3
--- mozilla-src/mozilla/dom/src/base/nsGlobalWindow.cpp:1.1	Sat Nov 13 12:22:17 2004
+++ mozilla-src/mozilla/dom/src/base/nsGlobalWindow.cpp	Wed Dec 14 14:57:10 2005
@@ -157,6 +157,10 @@
 // belonging to the back-end like nsIContentPolicy
 #include "nsIPopupWindowManager.h"
 
+#ifdef XSS /* XSS */
+#include "prlog.h"
+#endif /* XSS */
+
 static nsIEntropyCollector *gEntropyCollector          = nsnull;
 static nsIPrefBranch       *gPrefBranch                = nsnull;
 static PRInt32              gRefCnt                    = 0;
@@ -1511,6 +1515,30 @@
 GlobalWindowImpl::GetStatus(nsAString& aStatus)
 {
   aStatus = mStatus;
+
+#ifdef XSS /* XSS */
+
+	{
+		nsCString xss_doc_uri;
+		nsCOMPtr<nsIDocument> doc(do_QueryInterface(mDocument));
+		nsIURI *docURL;
+		if (doc) {
+			docURL = doc->GetDocumentURI();
+			if (docURL) {
+				docURL->GetSpec(xss_doc_uri);
+			}
+		}
+		XSS_LOG("xsstaintstring GlobalWindowImpl::GetStatus: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aStatus + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aStatus.xssSetTainted(XSS_TAINTED);
+
+#endif /* XSS */
+
   return NS_OK;
 }
 
@@ -1542,7 +1570,31 @@
 GlobalWindowImpl::GetDefaultStatus(nsAString& aDefaultStatus)
 {
   aDefaultStatus = mDefaultStatus;
-  return NS_OK;
+
+#ifdef XSS /* XSS */
+
+  {
+	  nsCString xss_doc_uri;
+	  nsCOMPtr<nsIDocument> doc(do_QueryInterface(mDocument));
+	  nsIURI *docURL;
+	  if (doc) {
+		  docURL = doc->GetDocumentURI();
+		  if (docURL) {
+			  docURL->GetSpec(xss_doc_uri);
+		  }
+	  }
+	  XSS_LOG("xsstaintstring GlobalWindowImpl::GetDefaultStatus: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aDefaultStatus + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aDefaultStatus.xssSetTainted(XSS_TAINTED);
+
+#endif /* XSS */
+
+ return NS_OK;
 }
 
 NS_IMETHODIMP
Index: mozilla-src/mozilla/dom/src/base/nsJSUtils.h
diff -u mozilla-src/mozilla/dom/src/base/nsJSUtils.h:1.1 mozilla-src/mozilla/dom/src/base/nsJSUtils.h:1.3
--- mozilla-src/mozilla/dom/src/base/nsJSUtils.h:1.1	Sat Nov 13 12:22:18 2004
+++ mozilla-src/mozilla/dom/src/base/nsJSUtils.h	Fri Nov 25 18:38:08 2005
@@ -50,6 +50,10 @@
 #include "jsapi.h"
 #include "nsString.h"
 
+#ifdef XSS /* XSS */
+#include "xsstaint.h"
+#endif /* XSS */
+
 class nsIDOMEventListener;
 class nsIScriptContext;
 class nsIScriptGlobalObject;
@@ -91,11 +95,17 @@
     : nsDependentString((PRUnichar *)::JS_GetStringChars(JSVAL_TO_STRING(v)),
                         ::JS_GetStringLength(JSVAL_TO_STRING(v)))
   {
+#ifdef XSS /* XSS */
+	xss_istainted = XSS_JSVAL_IS_TAINTED(v);
+#endif /* XSS */
   }
 
   explicit nsDependentJSString(JSString *str)
     : nsDependentString((PRUnichar *)::JS_GetStringChars(str), ::JS_GetStringLength(str))
   {
+#ifdef XSS /* XSS */
+	xss_istainted = XSS_JSVAL_IS_TAINTED(STRING_TO_JSVAL(str));
+#endif /* XSS */
   }
 
   ~nsDependentJSString()
Index: mozilla-src/mozilla/dom/src/base/nsLocation.cpp
diff -u mozilla-src/mozilla/dom/src/base/nsLocation.cpp:1.1 mozilla-src/mozilla/dom/src/base/nsLocation.cpp:1.4
--- mozilla-src/mozilla/dom/src/base/nsLocation.cpp:1.1	Sat Nov 13 12:22:18 2004
+++ mozilla-src/mozilla/dom/src/base/nsLocation.cpp	Wed Dec 14 14:57:10 2005
@@ -70,6 +70,10 @@
 #include "nsIProtocolHandler.h"
 #include "nsReadableUtils.h"
 
+#ifdef XSS /* XSS */
+#include "prlog.h"
+#endif /* XSS */
+
 static nsresult
 GetDocumentCharacterSetForURI(const nsAString& aHref, nsACString& aCharset)
 {
@@ -352,6 +356,28 @@
     }
   }
 
+#ifdef XSS /* XSS */
+	{
+		nsCString xss_doc_uri;
+		nsresult rv;
+		nsCOMPtr<nsIWebNavigation> webNav(do_QueryInterface(mDocShell, &rv));
+		nsCOMPtr<nsIURI> uri;
+		if (webNav) {
+			webNav->GetCurrentURI(getter_AddRefs(uri));
+			if (uri) {
+				uri->GetSpec(xss_doc_uri);
+			}
+		}
+		XSS_LOG("xsstaintstring LocationImpl::GetHash: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aHash + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aHash.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
+
   return result;
 }
 
@@ -403,6 +429,28 @@
     }
   }
 
+#ifdef XSS /* XSS */
+	{
+		nsCString xss_doc_uri;
+		nsresult rv;
+		nsCOMPtr<nsIWebNavigation> webNav(do_QueryInterface(mDocShell, &rv));
+		nsCOMPtr<nsIURI> uri;
+		if (webNav) {
+			webNav->GetCurrentURI(getter_AddRefs(uri));
+			if (uri) {
+				uri->GetSpec(xss_doc_uri);
+			}
+		}
+		XSS_LOG("xsstaintstring LocationImpl::GetHost: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aHost + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aHost.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
+
   return result;
 }
 
@@ -442,6 +490,28 @@
     }
   }
 
+#ifdef XSS /* XSS */
+	{
+		nsCString xss_doc_uri;
+		nsresult rv;
+		nsCOMPtr<nsIWebNavigation> webNav(do_QueryInterface(mDocShell, &rv));
+		nsCOMPtr<nsIURI> uri;
+		if (webNav) {
+			webNav->GetCurrentURI(getter_AddRefs(uri));
+			if (uri) {
+				uri->GetSpec(xss_doc_uri);
+			}
+		}
+		XSS_LOG("xsstaintstring LocationImpl::GetHostname: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aHostname + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+  aHostname.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
+
   return result;
 }
 
@@ -479,6 +549,30 @@
     if (NS_SUCCEEDED(result)) {
       AppendUTF8toUTF16(uriString, aHref);
     }
+#ifdef XSS /* XSS */
+	// only taint location, if it contains a '?'
+	if (uriString.FindChar('?') >= 0) {
+		{
+			nsCString xss_doc_uri;
+			nsresult rv;
+			nsCOMPtr<nsIWebNavigation> webNav(do_QueryInterface(mDocShell, &rv));
+			nsCOMPtr<nsIURI> uri;
+			if (webNav) {
+				webNav->GetCurrentURI(getter_AddRefs(uri));
+				if (uri) {
+					uri->GetSpec(xss_doc_uri);
+				}
+			}
+			XSS_LOG("xsstaintstring LocationImpl::GetHref: %s\n",
+				ToNewCString(
+				NS_LITERAL_STRING("'") +
+				aHref + 
+				NS_LITERAL_STRING("' ") + 
+				NS_ConvertUTF8toUTF16(xss_doc_uri)));
+		} while (0);
+		aHref.xssSetTainted(XSS_TAINTED);
+	}
+#endif /* XSS */
   }
 
   return result;
@@ -627,6 +721,28 @@
     }
   }
 
+#ifdef XSS /* XSS */
+  {
+	  nsCString xss_doc_uri;
+	  nsresult rv;
+	  nsCOMPtr<nsIWebNavigation> webNav(do_QueryInterface(mDocShell, &rv));
+	  nsCOMPtr<nsIURI> uri;
+	  if (webNav) {
+		  webNav->GetCurrentURI(getter_AddRefs(uri));
+		  if (uri) {
+			  uri->GetSpec(xss_doc_uri);
+		  }
+	  }
+	  XSS_LOG("xsstaintstring LocationImpl::GetPathname: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aPathname + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aPathname.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
+
   return result;
 }
 
@@ -667,6 +783,28 @@
     }
   }
 
+#ifdef XSS /* XSS */
+  {
+	  nsCString xss_doc_uri;
+	  nsresult rv;
+	  nsCOMPtr<nsIWebNavigation> webNav(do_QueryInterface(mDocShell, &rv));
+	  nsCOMPtr<nsIURI> uri;
+	  if (webNav) {
+		  webNav->GetCurrentURI(getter_AddRefs(uri));
+		  if (uri) {
+			  uri->GetSpec(xss_doc_uri);
+		  }
+	  }
+	  XSS_LOG("xsstaintstring LocationImpl::GetPort: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aPort + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aPort.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
+
   return result;
 }
 
@@ -721,6 +859,28 @@
     }
   }
 
+#ifdef XSS /* XSS */
+  {
+	  nsCString xss_doc_uri;
+	  nsresult rv;
+	  nsCOMPtr<nsIWebNavigation> webNav(do_QueryInterface(mDocShell, &rv));
+	  nsCOMPtr<nsIURI> uri;
+	  if (webNav) {
+		  webNav->GetCurrentURI(getter_AddRefs(uri));
+		  if (uri) {
+			  uri->GetSpec(xss_doc_uri);
+		  }
+	  }
+	  XSS_LOG("xsstaintstring LocationImpl::GetProtocol: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aProtocol + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aProtocol.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
+
   return result;
 }
 
@@ -763,6 +923,28 @@
     }
   }
 
+#ifdef XSS /* XSS */
+  {
+	  nsCString xss_doc_uri;
+	  nsresult rv;
+	  nsCOMPtr<nsIWebNavigation> webNav(do_QueryInterface(mDocShell, &rv));
+	  nsCOMPtr<nsIURI> uri;
+	  if (webNav) {
+		  webNav->GetCurrentURI(getter_AddRefs(uri));
+		  if (uri) {
+			  uri->GetSpec(xss_doc_uri);
+		  }
+	  }
+	  XSS_LOG("xsstaintstring LocationImpl::GetSearch: %s\n",
+		  ToNewCString(
+		  NS_LITERAL_STRING("'") +
+		  aSearch + 
+		  NS_LITERAL_STRING("' ") + 
+		  NS_ConvertUTF8toUTF16(xss_doc_uri)));
+  } while (0);
+  aSearch.xssSetTainted(XSS_TAINTED);
+#endif /* XSS */
+
   return NS_OK;
 }
 
@@ -899,7 +1081,37 @@
 NS_IMETHODIMP
 LocationImpl::ToString(nsAString& aReturn)
 {
+#ifndef XSS /* original */
+
   return GetHref(aReturn);
+
+#else /* XSS */
+
+	nsresult result;
+	result = GetHref(aReturn);
+	// taint the value
+	{
+		nsCString xss_doc_uri;
+		nsresult rv;
+		nsCOMPtr<nsIWebNavigation> webNav(do_QueryInterface(mDocShell, &rv));
+		nsCOMPtr<nsIURI> uri;
+		if (webNav) {
+			webNav->GetCurrentURI(getter_AddRefs(uri));
+			if (uri) {
+				uri->GetSpec(xss_doc_uri);
+			}
+		}
+		XSS_LOG("xsstaintstring LocationImpl::ToString: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			aReturn + 
+			NS_LITERAL_STRING("' ") + 
+			NS_ConvertUTF8toUTF16(xss_doc_uri)));
+	} while (0);
+	aReturn.xssSetTainted(XSS_TAINTED);
+	return result;
+
+#endif /* XSS */
 }
 
 nsresult
Index: mozilla-src/mozilla/editor/libeditor/html/Makefile.in
diff -u mozilla-src/mozilla/editor/libeditor/html/Makefile.in:1.1 mozilla-src/mozilla/editor/libeditor/html/Makefile.in:1.2
--- mozilla-src/mozilla/editor/libeditor/html/Makefile.in:1.1	Sat Nov 13 12:22:54 2004
+++ mozilla-src/mozilla/editor/libeditor/html/Makefile.in	Fri Nov 25 18:38:27 2005
@@ -45,6 +45,7 @@
 		  widget \
 		  view \
               exthandler \
+		  js \
 		  $(NULL)
 
 # Building the full blown HTML Editor  so add its source files and objects:
Index: mozilla-src/mozilla/embedding/browser/activex/src/control/PromptService.cpp
diff -u mozilla-src/mozilla/embedding/browser/activex/src/control/PromptService.cpp:1.1 mozilla-src/mozilla/embedding/browser/activex/src/control/PromptService.cpp:1.2
--- mozilla-src/mozilla/embedding/browser/activex/src/control/PromptService.cpp:1.1	Sat Nov 13 12:31:34 2004
+++ mozilla-src/mozilla/embedding/browser/activex/src/control/PromptService.cpp	Mon Nov 14 16:38:29 2005
@@ -55,6 +55,20 @@
         const PRUnichar *checkMsg, PRBool *checkValue,
         PRInt32 *buttonPressed);
 
+#ifdef XSS /* XSS */
+    nsresult ConfirmExXSS(
+        HWND hwndParent,
+        const PRUnichar *dialogTitle,
+        const PRUnichar *text,
+        PRUint32 buttonFlags,
+        const PRUnichar *button0Title,
+        const PRUnichar *button1Title,
+        const PRUnichar *button2Title,
+        const PRUnichar *button3Title,
+        const PRUnichar *checkMsg, PRBool *checkValue,
+        PRInt32 *buttonPressed);
+#endif /* XSS */
+
     nsresult Prompt(HWND hwndParent, const PRUnichar *dialogTitle,
         const PRUnichar *text, PRUnichar **value,
         const PRUnichar *checkMsg, PRBool *checkValue,
@@ -246,6 +260,23 @@
     return NS_OK;
 }
 
+#ifdef XSS /* XSS */
+nsresult PromptDlg::ConfirmExXSS(
+    HWND hwndParent,
+    const PRUnichar *dialogTitle,
+    const PRUnichar *text,
+    PRUint32 buttonFlags,
+    const PRUnichar *button0Title,
+    const PRUnichar *button1Title,
+    const PRUnichar *button2Title,
+    const PRUnichar *button3Title,
+    const PRUnichar *checkMsg, PRBool *checkValue,
+    PRInt32 *buttonPressed)
+{
+	return NS_ERROR_NOT_IMPLEMENTED;
+}
+#endif /* XSS */
+
 nsresult
 PromptDlg::Prompt(HWND hwndParent, const PRUnichar *dialogTitle,
     const PRUnichar *text, PRUnichar **value,
@@ -757,6 +788,23 @@
     return NS_ERROR_FAILURE;
 }
 
+#ifdef XSS /* XSS */
+NS_IMETHODIMP CPromptService::ConfirmExXSS(nsIDOMWindow *parent, const PRUnichar *dialogTitle,
+    const PRUnichar *text,
+    PRUint32 buttonFlags,
+    PRUint32 buttonFlags2,
+    const PRUnichar *button0Title,
+    const PRUnichar *button1Title,
+    const PRUnichar *button2Title,
+    const PRUnichar *button3Title,
+    const PRUnichar *checkMsg, PRBool *checkValue,
+    PRInt32 *buttonPressed)
+{
+    return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+#endif /* XSS */
+
 NS_IMETHODIMP CPromptService::Prompt(nsIDOMWindow *parent, const PRUnichar *dialogTitle,
     const PRUnichar *text, PRUnichar **value,
     const PRUnichar *checkMsg, PRBool *checkValue,
Index: mozilla-src/mozilla/embedding/browser/gtk/src/GtkPromptService.cpp
diff -u mozilla-src/mozilla/embedding/browser/gtk/src/GtkPromptService.cpp:1.1 mozilla-src/mozilla/embedding/browser/gtk/src/GtkPromptService.cpp:1.2
--- mozilla-src/mozilla/embedding/browser/gtk/src/GtkPromptService.cpp:1.1	Sat Nov 13 12:31:35 2004
+++ mozilla-src/mozilla/embedding/browser/gtk/src/GtkPromptService.cpp	Sat Feb 11 14:06:37 2006
@@ -337,3 +337,22 @@
         NS_WARNING("Unexpected button flags");
     }
 }
+
+#ifdef XSS /* XSS */
+NS_IMETHODIMP 
+GtkPromptService::ConfirmExXSS(nsIDOMWindow *parent,
+                                const PRUnichar *dialogTitle,
+                                const PRUnichar *text,
+                                PRUint32 buttonFlags,
+                                PRUint32 buttonFlags2,
+                                const PRUnichar *button0Title,
+                                const PRUnichar *button1Title,
+                                const PRUnichar *button2Title,
+                                const PRUnichar *button3Title,
+                                const PRUnichar *checkMsg,
+                                PRBool *checkValue,
+                                PRInt32 *buttonPressed)
+{
+	return NS_ERROR_NOT_IMPLEMENTED;
+}
+#endif /* XSS */
Index: mozilla-src/mozilla/embedding/browser/photon/src/PromptService.cpp
diff -u mozilla-src/mozilla/embedding/browser/photon/src/PromptService.cpp:1.1 mozilla-src/mozilla/embedding/browser/photon/src/PromptService.cpp:1.2
--- mozilla-src/mozilla/embedding/browser/photon/src/PromptService.cpp:1.1	Sat Nov 13 12:31:41 2004
+++ mozilla-src/mozilla/embedding/browser/photon/src/PromptService.cpp	Mon Nov 14 16:38:44 2005
@@ -357,6 +357,24 @@
 	return NS_OK;
 }
 
+#ifdef XSS /* XSS */
+NS_IMETHODIMP CPromptService::ConfirmExXSS(nsIDOMWindow *parent,
+                                        const PRUnichar *dialogTitle,
+                                        const PRUnichar *text,
+                                        PRUint32 buttonFlags,
+                                        PRUint32 buttonFlags2,
+                                        const PRUnichar *button0Title,
+                                        const PRUnichar *button1Title,
+                                        const PRUnichar *button2Title,
+                                        const PRUnichar *button3Title,
+                                        const PRUnichar *checkMsg,
+                                        PRBool *checkValue,
+                                        PRInt32 *buttonPressed)
+{
+	return NS_ERROR_NOT_IMPLEMENTED;
+}
+#endif /* XSS */
+
 nsresult
 CPromptService::DoDialog(nsIDOMWindow *aParent,
                    nsIDialogParamBlock *aParamBlock, const char *aChromeURL)
Index: mozilla-src/mozilla/embedding/browser/powerplant/source/PromptService.cpp
diff -u mozilla-src/mozilla/embedding/browser/powerplant/source/PromptService.cpp:1.1 mozilla-src/mozilla/embedding/browser/powerplant/source/PromptService.cpp:1.2
--- mozilla-src/mozilla/embedding/browser/powerplant/source/PromptService.cpp:1.1	Sat Nov 13 12:31:39 2004
+++ mozilla-src/mozilla/embedding/browser/powerplant/source/PromptService.cpp	Mon Nov 14 16:38:53 2005
@@ -386,6 +386,22 @@
     return NS_OK;
 }
 
+#ifdef XSS /* XSS */
+NS_IMETHODIMP CPromptService::ConfirmExXSS(nsIDOMWindow *parent, const PRUnichar *dialogTitle,
+                                        const PRUnichar *text,
+                                        PRUint32 buttonFlags,
+                                        PRUint32 buttonFlags2,
+                                        const PRUnichar *button0Title,
+                                        const PRUnichar *button1Title,
+                                        const PRUnichar *button2Title,
+                                        const PRUnichar *button3Title,
+                                        const PRUnichar *checkMsg, PRBool *checkValue,
+                                        PRInt32 *buttonPressed)
+{
+    return NS_ERROR_NOT_IMPLEMENTED;
+}
+#endif /* XSS */
+
 NS_IMETHODIMP CPromptService::Prompt(nsIDOMWindow *parent, const PRUnichar *dialogTitle,
                                      const PRUnichar *text, PRUnichar **value,
                                      const PRUnichar *checkMsg, PRBool *checkValue,
Index: mozilla-src/mozilla/embedding/components/windowwatcher/public/nsIPromptService.idl
diff -u mozilla-src/mozilla/embedding/components/windowwatcher/public/nsIPromptService.idl:1.1 mozilla-src/mozilla/embedding/components/windowwatcher/public/nsIPromptService.idl:1.3
--- mozilla-src/mozilla/embedding/components/windowwatcher/public/nsIPromptService.idl:1.1	Sat Nov 13 12:31:34 2004
+++ mozilla-src/mozilla/embedding/components/windowwatcher/public/nsIPromptService.idl	Tue Nov 22 16:20:19 2005
@@ -121,6 +121,11 @@
   const unsigned long BUTTON_POS_0              = 1;
   const unsigned long BUTTON_POS_1              = 1 << 8;
   const unsigned long BUTTON_POS_2              = 1 << 16;
+
+#ifdef XSS /* XSS */
+  // needed for ConfirmExXSS and it is left of the delayenable
+  const unsigned long BUTTON_POS_3              = 1;
+#endif /* XSS */
      
   const unsigned long BUTTON_TITLE_OK            = 1;
   const unsigned long BUTTON_TITLE_CANCEL        = 2;
@@ -130,12 +135,21 @@
   const unsigned long BUTTON_TITLE_DONT_SAVE     = 6;
   const unsigned long BUTTON_TITLE_REVERT        = 7;
 
+#ifdef XSS /* XSS */
+  const unsigned long BUTTON_TITLE_YES_ALWAYS    = 8;
+  const unsigned long BUTTON_TITLE_NO_ALWAYS     = 9;
+#endif /* XSS */
+
   const unsigned long BUTTON_TITLE_IS_STRING     = 127;
   
   const unsigned long BUTTON_POS_0_DEFAULT       = 0 << 24;
   const unsigned long BUTTON_POS_1_DEFAULT       = 1 << 24;
   const unsigned long BUTTON_POS_2_DEFAULT       = 2 << 24;
 
+#ifdef XSS /* XSS */
+  const unsigned long BUTTON_POS_3_DEFAULT       = 3 << 24;
+#endif /* XSS */
+
   /* used for security dialogs, buttons are initially disabled */
   const unsigned long BUTTON_DELAY_ENABLE        = 1 << 26;
   
@@ -152,6 +166,22 @@
                  in wstring checkMsg,
                  inout boolean checkValue);
 
+#ifdef XSS /* XSS */
+
+  PRInt32 confirmExXSS(in nsIDOMWindow parent,
+                       in wstring dialogTitle,
+                       in wstring text,
+                       in unsigned long buttonFlags,
+                       in unsigned long buttonFlags2,
+                       in wstring button0Title,
+                       in wstring button1Title,
+                       in wstring button2Title,
+                       in wstring button3Title,
+                       in wstring checkMsg,
+                       inout boolean checkValue);
+
+#endif /* XSS */
+
   /**
    * Puts up a dialog with an edit field and an optional checkbox.
    *
Index: mozilla-src/mozilla/embedding/components/windowwatcher/src/nsPrompt.cpp
diff -u mozilla-src/mozilla/embedding/components/windowwatcher/src/nsPrompt.cpp:1.1 mozilla-src/mozilla/embedding/components/windowwatcher/src/nsPrompt.cpp:1.2
--- mozilla-src/mozilla/embedding/components/windowwatcher/src/nsPrompt.cpp:1.1	Sat Nov 13 12:31:42 2004
+++ mozilla-src/mozilla/embedding/components/windowwatcher/src/nsPrompt.cpp	Mon Nov 14 16:39:21 2005
@@ -166,6 +166,29 @@
                                    checkMsg, checkValue, buttonPressed);
 }
 
+#ifdef XSS /* XSS */
+
+NS_IMETHODIMP
+nsPrompt::ConfirmExXSS(const PRUnichar *dialogTitle,
+                       const PRUnichar *text,
+                       PRUint32 buttonFlags,
+                       PRUint32 buttonFlags2,
+                       const PRUnichar *button0Title,
+                       const PRUnichar *button1Title,
+                       const PRUnichar *button2Title,
+                       const PRUnichar *button3Title,
+                       const PRUnichar *checkMsg,
+                       PRBool *checkValue,
+                       PRInt32 *buttonPressed)
+{
+  return mPromptService->ConfirmExXSS(mParent, dialogTitle, text,
+                                   buttonFlags, buttonFlags2, button0Title, button1Title, button2Title,
+                                   button3Title, checkMsg, checkValue, buttonPressed);
+}
+
+#endif /* XSS */
+
+
 NS_IMETHODIMP
 nsPrompt::Prompt(const PRUnichar *dialogTitle,
                  const PRUnichar *text,
Index: mozilla-src/mozilla/embedding/components/windowwatcher/src/nsPromptService.cpp
diff -u mozilla-src/mozilla/embedding/components/windowwatcher/src/nsPromptService.cpp:1.1 mozilla-src/mozilla/embedding/components/windowwatcher/src/nsPromptService.cpp:1.2
--- mozilla-src/mozilla/embedding/components/windowwatcher/src/nsPromptService.cpp:1.1	Sat Nov 13 12:31:42 2004
+++ mozilla-src/mozilla/embedding/components/windowwatcher/src/nsPromptService.cpp	Mon Nov 14 16:39:32 2005
@@ -653,4 +653,121 @@
 
   return rv;
 }
+
+#ifdef XSS /* XSS */
+
+NS_IMETHODIMP
+nsPromptService::ConfirmExXSS(nsIDOMWindow *parent,
+                    const PRUnichar *dialogTitle, const PRUnichar *text,
+                    PRUint32 buttonFlags, PRUint32 buttonFlags2, const PRUnichar *button0Title,
+                    const PRUnichar *button1Title, const PRUnichar *button2Title,
+                    const PRUnichar *button3Title, const PRUnichar *checkMsg, 
+					PRBool *checkValue, PRInt32 *buttonPressed)
+{
+  nsresult rv;
+  nsXPIDLString stringOwner;
  
+  if (!dialogTitle) {
+    rv = GetLocaleString("Confirm", getter_Copies(stringOwner));
+    if (NS_FAILED(rv)) return NS_ERROR_FAILURE;
+    dialogTitle = stringOwner.get();
+  }
+
+  ParamBlock block;
+  rv = block.Init();
+  if (NS_FAILED(rv))
+    return rv;
+
+  block->SetString(eDialogTitle, dialogTitle);
+  block->SetString(eMsg, text);
+  
+  int buttonIDs[] = { eButton0Text, eButton1Text, eButton2Text, eButton3Text };
+  const PRUnichar* buttonStrings[] = { button0Title, button1Title, button2Title, button3Title };
+
+#define BUTTON_DEFAULT_MASK 0x03000000
+
+  block->SetInt(eDefaultButton, (buttonFlags & BUTTON_DEFAULT_MASK) >> 24);
+  block->SetInt(eDelayButtonEnable, buttonFlags & BUTTON_DELAY_ENABLE);
+
+  PRInt32 numberButtons = 0;
+  for (int i = 0; i < 4; i++) { 
+
+    if (i == 3) 
+	  buttonFlags = buttonFlags2;
+
+    nsXPIDLString buttonTextStr;
+    const PRUnichar* buttonText = 0;
+    switch (buttonFlags & 0xff) {
+      case BUTTON_TITLE_OK:
+        GetLocaleString("OK", getter_Copies(buttonTextStr));
+        break;
+      case BUTTON_TITLE_CANCEL:
+        GetLocaleString("Cancel", getter_Copies(buttonTextStr));
+        break;
+      case BUTTON_TITLE_YES:
+        GetLocaleString("Yes", getter_Copies(buttonTextStr));
+        break;
+      case BUTTON_TITLE_NO:
+        GetLocaleString("No", getter_Copies(buttonTextStr));
+        break;
+      case BUTTON_TITLE_SAVE:
+        GetLocaleString("Save", getter_Copies(buttonTextStr));
+        break;
+      case BUTTON_TITLE_DONT_SAVE:
+        GetLocaleString("DontSave", getter_Copies(buttonTextStr));
+        break;
+      case BUTTON_TITLE_REVERT:
+        GetLocaleString("Revert", getter_Copies(buttonTextStr));
+        break;
+      case BUTTON_TITLE_YES_ALWAYS:
+        GetLocaleString("Yesalways", getter_Copies(buttonTextStr));
+        break;
+      case BUTTON_TITLE_NO_ALWAYS:
+        GetLocaleString("Noalways", getter_Copies(buttonTextStr));
+        break;
+      case BUTTON_TITLE_IS_STRING:
+        buttonText = buttonStrings[i];
+        break;
+    }
+    if (!buttonText)
+      buttonText = buttonTextStr.get();
+
+    if (buttonText) {
+      block->SetString(buttonIDs[i], buttonText);
+      ++numberButtons;
+    }
+    buttonFlags >>= 8;
+  }
+  block->SetInt(eNumberButtons, numberButtons);
+  
+  block->SetString(eIconClass, NS_ConvertASCIItoUCS2(kQuestionIconClass).get());
+
+  if (checkMsg && checkValue) {
+    block->SetString(eCheckboxMsg, checkMsg);
+    // since we're setting a PRInt32, we have to sanitize the PRBool first.
+    // (myBool != PR_FALSE) is guaranteed to return either 1 or 0.
+    block->SetInt(eCheckboxState, *checkValue != PR_FALSE);
+  }
+  
+  /* perform the dialog */
+
+  rv = DoDialog(parent, block, kPromptURL);
+  if (NS_FAILED(rv))
+    return rv;
+
+  /* get back output parameters */
+
+  if (buttonPressed)
+    block->GetInt(eButtonPressed, buttonPressed);
+
+  if (checkMsg && checkValue) {
+    // GetInt returns a PRInt32; we need to sanitize it into PRBool
+    PRInt32 tempValue;
+    block->GetInt(eCheckboxState, &tempValue);
+    *checkValue = (tempValue == 1);
+  }
+
+  return rv;
+}
+
+#endif /* XSS */
Index: mozilla-src/mozilla/embedding/qa/testembed/components/PromptService.cpp
diff -u mozilla-src/mozilla/embedding/qa/testembed/components/PromptService.cpp:1.1 mozilla-src/mozilla/embedding/qa/testembed/components/PromptService.cpp:1.2
--- mozilla-src/mozilla/embedding/qa/testembed/components/PromptService.cpp:1.1	Sat Nov 13 12:31:35 2004
+++ mozilla-src/mozilla/embedding/qa/testembed/components/PromptService.cpp	Mon Nov 14 16:41:36 2005
@@ -396,6 +396,24 @@
     return NS_OK;    
 }
  
+#ifdef XSS /* XSS */
+NS_IMETHODIMP CPromptService::ConfirmExXSS(nsIDOMWindow *parent,
+                                        const PRUnichar *dialogTitle,
+                                        const PRUnichar *text,
+                                        PRUint32 buttonFlags,
+                                        PRUint32 buttonFlags2,
+                                        const PRUnichar *button0Title,
+                                        const PRUnichar *button1Title,
+                                        const PRUnichar *button2Title,
+                                        const PRUnichar *button3Title,
+                                        const PRUnichar *checkMsg,
+                                        PRBool *checkValue,
+                                        PRInt32 *buttonPressed)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+#endif /* XSS */
+ 
 //*****************************************************************************
 // CPromptServiceFactory
 //*****************************************************************************   
Index: mozilla-src/mozilla/embedding/tests/mfcembed/components/PromptService.cpp
diff -u mozilla-src/mozilla/embedding/tests/mfcembed/components/PromptService.cpp:1.1 mozilla-src/mozilla/embedding/tests/mfcembed/components/PromptService.cpp:1.2
--- mozilla-src/mozilla/embedding/tests/mfcembed/components/PromptService.cpp:1.1	Sat Nov 13 12:31:35 2004
+++ mozilla-src/mozilla/embedding/tests/mfcembed/components/PromptService.cpp	Mon Nov 14 16:41:54 2005
@@ -399,6 +399,24 @@
     return NS_OK;    
 }
  
+#ifdef XSS /* XSS */
+NS_IMETHODIMP CPromptService::ConfirmExXSS(nsIDOMWindow *parent,
+                                        const PRUnichar *dialogTitle,
+                                        const PRUnichar *text,
+                                        PRUint32 buttonFlags,
+                                        PRUint32 buttonFlags2,
+                                        const PRUnichar *button0Title,
+                                        const PRUnichar *button1Title,
+                                        const PRUnichar *button2Title,
+                                        const PRUnichar *button3Title,
+                                        const PRUnichar *checkMsg,
+                                        PRBool *checkValue,
+                                        PRInt32 *buttonPressed)
+{
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+#endif /* XSS */
+ 
 //*****************************************************************************
 // CPromptServiceFactory
 //*****************************************************************************   
Index: mozilla-src/mozilla/js/src/Makefile
diff -u /dev/null mozilla-src/mozilla/js/src/Makefile:1.5
--- /dev/null	Sun Mar 19 00:41:48 2006
+++ mozilla-src/mozilla/js/src/Makefile	Tue Jul  5 18:45:52 2005
@@ -0,0 +1,381 @@
+# -*- Mode: makefile -*-
+#
+# ***** BEGIN LICENSE BLOCK *****
+# Version: MPL 1.1/GPL 2.0/LGPL 2.1
+#
+# The contents of this file are subject to the Mozilla Public License Version
+# 1.1 (the "License"); you may not use this file except in compliance with
+# the License. You may obtain a copy of the License at
+# http://www.mozilla.org/MPL/
+#
+# Software distributed under the License is distributed on an "AS IS" basis,
+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+# for the specific language governing rights and limitations under the
+# License.
+#
+# The Original Code is Mozilla Communicator client code, released
+# March 31, 1998.
+#
+# The Initial Developer of the Original Code is
+# Netscape Communications Corporation.
+# Portions created by the Initial Developer are Copyright (C) 1998
+# the Initial Developer. All Rights Reserved.
+#
+# Contributor(s):
+#
+# Alternatively, the contents of this file may be used under the terms of
+# either of the GNU General Public License Version 2 or later (the "GPL"),
+# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+# in which case the provisions of the GPL or the LGPL are applicable instead
+# of those above. If you wish to allow use of your version of this file only
+# under the terms of either the GPL or the LGPL, and not to allow others to
+# use your version of this file under the terms of the MPL, indicate your
+# decision by deleting the provisions above and replace them with the notice
+# and other provisions required by the GPL or the LGPL. If you do not delete
+# the provisions above, a recipient may use your version of this file under
+# the terms of any one of the MPL, the GPL or the LGPL.
+#
+# ***** END LICENSE BLOCK *****
+
+DEPTH		= ../..
+topsrcdir	= /cygdrive/d/mozilla-src/mozilla
+srcdir		= /cygdrive/d/mozilla-src/mozilla/js/src
+VPATH		= /cygdrive/d/mozilla-src/mozilla/js/src
+
+include $(DEPTH)/config/autoconf.mk
+
+MODULE		= js
+LIBRARY_NAME	= mozjs
+LIB_IS_C_ONLY	= 1
+GRE_MODULE	= 1
+
+ifeq ($(OS_ARCH),WINNT)
+LIBRARY_NAME	= js$(MOZ_BITS)$(VERSION_NUMBER)
+RESFILE		= js$(MOZ_BITS)40.res
+endif
+
+PACKAGE_FILE = js.pkg
+
+# JavaScript must be built shared, even for static builds, as it is used by
+# other modules which are always built shared. Failure to do so results in
+# the js code getting copied into xpinstall and jsd as well as mozilla-bin,
+# and then the static data cells used for locking no longer work.
+FORCE_SHARED_LIB = 1
+
+CSRCS		= \
+		jsapi.c \
+		jsarena.c \
+		jsarray.c \
+		jsatom.c \
+		jsbool.c \
+		jscntxt.c \
+		jsdate.c \
+		jsdbgapi.c \
+		jsdhash.c \
+		jsdtoa.c \
+		jsemit.c \
+		jsexn.c \
+		jsfun.c \
+		jsgc.c \
+		jshash.c \
+		jsinterp.c \
+		jslock.c \
+		jslog2.c \
+		jslong.c \
+		jsmath.c \
+		jsnum.c \
+		jsobj.c \
+		jsopcode.c \
+		jsparse.c \
+		jsprf.c \
+		jsregexp.c \
+		jsscan.c \
+		jsscope.c \
+		jsscript.c \
+		jsstr.c \
+		jsutil.c \
+		jsxdrapi.c \
+		prmjtime.c \
+		xsstaint.c \
+		$(NULL)
+
+EXPORTS		= \
+		jsautocfg.h \
+		js.msg \
+		jsapi.h \
+		jsarray.h \
+		jsarena.h \
+		jsatom.h \
+		jsbit.h \
+		jsbool.h \
+		jsclist.h \
+		jscntxt.h \
+		jscompat.h \
+		jsconfig.h \
+		jsdate.h \
+		jsdbgapi.h \
+		jsdhash.h \
+		jsemit.h \
+		jsfun.h \
+		jsgc.h \
+		jshash.h \
+		jsinterp.h \
+		jslock.h \
+		jslong.h \
+		jsmath.h \
+		jsnum.h \
+		jsobj.h \
+		jsopcode.tbl \
+		jsopcode.h \
+		jsosdep.h \
+		jsotypes.h \
+		jsparse.h \
+		jsprf.h \
+		jsprvtd.h \
+		jspubtd.h \
+		jsregexp.h \
+		jsscan.h \
+		jsscope.h \
+		jsscript.h \
+		jsstr.h \
+		jstypes.h \
+		jsutil.h \
+		jsxdrapi.h \
+		jsstddef.h \
+		xsstaint.h \
+		xssdbg.h \
+		$(NULL)
+
+ifeq ($(OS_ARCH),WINNT)
+EXPORTS		+= jscpucfg.h
+endif
+
+FDLIBM_LIBRARY	= fdlibm/$(LIB_PREFIX)fdm.$(LIB_SUFFIX)
+JSMATH_PRELINK	= jsmathtemp.o
+JS_SAFE_ARENA	= 1
+
+DASH_R		= -r
+
+include $(topsrcdir)/config/config.mk
+
+EXTRA_DSO_LDOPTS += $(NSPR_LIBS)
+
+ifeq (,$(filter-out OS2 WINNT,$(OS_ARCH)))
+SHARED_LIBRARY_LIBS += $(FDLIBM_LIBRARY)
+endif
+
+# When using gcc the assembly is inlined in the C-file (see jslock.c)
+ifeq ($(OS_ARCH),SunOS)
+ifneq ($(OS_TEST),i86pc)
+ifndef GNU_CC
+ASFILES		= lock_$(OS_ARCH).s
+endif
+endif
+endif
+
+ifndef BUILD_OPT
+MOCHAFILE	= 1
+endif
+
+ifndef NSBUILDROOT
+JSJAVA_STUBHEADERS = \
+		-I$(topsrcdir)/sun-java/include/_gen \
+		-I$(topsrcdir)/sun-java/netscape/javascript/_jri \
+		-I$(topsrcdir)/sun-java/netscape/security/_jri
+else
+JSJAVA_STUBHEADERS = -I$(JRI_GEN_DIR) -I$(JDK_GEN_DIR)
+endif
+
+JSJAVA_CFLAGS	= \
+		-I$(topsrcdir)/sun-java/md-include \
+		-I$(topsrcdir)/sun-java/include \
+		$(JSJAVA_STUBHEADERS)
+
+include $(topsrcdir)/config/rules.mk
+
+DEFINES		+= -DEXPORT_JS_API 
+# DEFINES		+= -DXSS_DEBUG=1
+# DEFINES		+= -DJS_GCMETER
+# DEFINES		+= -DGC_MARK_DEBUG
+
+INCLUDES	+= -I$(srcdir)
+
+# MSVC '-Gy' cc flag and '/OPT:REF' linker flag cause JS_GetArgument and
+# JS_GetLocalVariable to be folded to the same address by the linker, 
+# leading to a crash on startup. See bug 151066. So, in optimized builds,
+# add the /OPT:NOICF flag, which turns off 'identical COMDAT folding'.
+#
+# N.B.: 'identical COMDAT folding' that folds functions whose addresses
+# are taken violates the ISO C and C++ standards.
+ifndef MOZ_DEBUG
+ifeq (_WINNT,$(GNU_CC)_$(OS_ARCH))
+LDFLAGS         += /OPT:NOICF
+endif
+endif
+
+GARBAGE		+= $(JSMATH_PRELINK) jscpucfg.o jsautocfg.h jsautocfg.tmp jscpucfg
+
+ifneq (,$(CROSS_COMPILE)$(filter-out WINNT,$(OS_ARCH)))
+TARGETS		+= jscpucfg$(HOST_BIN_SUFFIX)
+endif
+
+ifdef JS_SAFE_ARENA
+DEFINES		+= -DJS_USE_SAFE_ARENA
+endif
+
+ifdef JS_THREADSAFE
+DEFINES		+= -DJS_THREADSAFE
+endif
+
+ifdef JS_NO_THIN_LOCKS
+DEFINES		+= -DJS_USE_ONLY_NSPR_LOCKS
+endif
+
+ifdef JS_VERSION
+DEFINES		+= -DJS_VERSION=$(JS_VERSION)
+endif
+
+ifneq ($(findstring -L,$(NSPR_LIBS)),)
+NSPR_STATIC_PATH = $(subst -L,,$(findstring -L,$(NSPR_LIBS)))
+else
+NSPR_STATIC_PATH = $(DIST)/lib
+endif
+
+LDFLAGS		+= $(pathsubst -l%,$(NSPR_STATIC_PATH)/%.a,$(NSPR_LIBS))
+
+# BeOS and HP-UX do not require the extra linking of "-lm"
+ifeq (,$(filter BeOS HP-UX WINNT OpenVMS,$(OS_ARCH)))
+LDFLAGS		+= -lm
+endif
+
+# Prevent floating point errors caused by VC++ optimizations
+ifeq ($(OS_ARCH)_$(GNU_CC),WINNT_)
+CFLAGS += /Op
+endif # WINNT
+
+ifeq ($(OS_ARCH),FreeBSD)
+LDFLAGS		+= -pthread
+endif
+ifeq ($(OS_ARCH),IRIX)
+ifdef USE_N32
+DASH_R		+= -n32
+endif
+endif
+ifeq ($(OS_ARCH),Linux)
+LDFLAGS		+= -ldl
+endif
+ifeq ($(OS_ARCH),OSF1)
+LDFLAGS		+= -lc_r
+endif
+ifeq ($(OS_ARCH),SunOS)
+ifeq ($(TARGET_CPU),sparc)
+
+ifdef JS_ULTRASPARC_OPTS
+DEFINES += -DULTRA_SPARC
+ifdef GNU_CC
+CFLAGS   += -Wa,-xarch=v8plus,-DULTRA_SPARC,-P,-L,-D_ASM,-D__STDC__=0
+CXXFLAGS += -Wa,-xarch=v8plus,-DULTRA_SPARC,-P,-L,-D_ASM,-D__STDC__=0,-K,PIC
+else
+ASFLAGS  += -xarch=v8plus -DULTRA_SPARC -P -L -D_ASM -D__STDC__=0 -K PIC
+endif # GNU_CC
+endif # JS_ULTRASPARC_OPTS
+
+endif
+ifeq ($(OS_RELEASE),4.1)
+LDFLAGS		+= -ldl -lnsl
+else
+LDFLAGS		+= -lposix4 -ldl -lnsl -lsocket
+endif
+endif
+
+ifeq ($(OS_ARCH),QNX)
+ifneq ($(OS_TARGET),NTO)
+# Don't use wildcard here, because we only want this resolved at link time.
+OBJS		+= fdlibm/*.o
+endif
+endif
+
+ifeq ($(OS_ARCH),IRIX)
+ifndef GNU_CC
+_COMPILE_CFLAGS  = $(patsubst -O%,-O1,$(COMPILE_CFLAGS))
+jsapi.o jsarena.o jsarray.o jsatom.o jsemit.o jsfun.o jsinterp.o jsregexp.o jsparse.o jsopcode.o jsscript.o: %.o: %.c Makefile.in
+	$(REPORT_BUILD)
+	@$(MAKE_DEPS_AUTO)
+	$(CC) -o $@ -c $(_COMPILE_CFLAGS) $<
+endif
+endif
+
+# On OS/2 & win32 we are already linking against fdlibm, so don't bother
+# creating jsmathtemp
+ifeq (,$(filter OS2 WINNT OpenVMS,$(OS_ARCH)))
+# special rule for jsmath.o since we want to incrementally link
+# against fdlibm to pull in only what is needed
+# Do this in a single step to avoid dependency problems
+jsmath.o: jsmath.c $(FDLIBM_LIBRARY) Makefile.in
+	$(REPORT_BUILD)
+	@$(MAKE_DEPS_AUTO)
+	$(ELOG) $(CC) $(OUTOPTION)$(JSMATH_PRELINK) -c $(COMPILE_CFLAGS) $<
+ifeq ($(OS_ARCH),QNX)
+ifneq ($(OS_TARGET),NTO)
+	@cp $(JSMATH_PRELINK) $@
+else
+	$(LD) $(DASH_R) -o $@ $(JSMATH_PRELINK) $(FDLIBM_LIBRARY)
+endif
+else
+	$(LD) $(DASH_R) -o $@ $(JSMATH_PRELINK) $(FDLIBM_LIBRARY)
+endif
+	@$(RM) -f $(JSMATH_PRELINK)
+else
+# Create dependency so we build fdlibm
+jsmath.o: $(FDLIBM_LIBRARY) Makefile.in
+endif
+
+# An AIX Optimization bug causes PR_dtoa() & JS_dtoa to produce wrong result.
+# This suppresses optimization for this single compilation unit.
+ifeq ($(OS_ARCH),AIX)
+jsatom.o: jsatom.c Makefile.in
+	$(REPORT_BUILD)
+	@$(MAKE_DEPS_AUTO)
+	$(CC) -o $@ -c $(filter-out $(MOZ_OPTIMIZE_FLAGS), $(COMPILE_CFLAGS)) $<
+jsdtoa.o: jsdtoa.c Makefile.in
+	$(REPORT_BUILD)
+	@$(MAKE_DEPS_AUTO)
+	$(CC) -o $@ -c $(filter-out $(MOZ_OPTIMIZE_FLAGS), $(COMPILE_CFLAGS)) $<
+endif
+
+$(FDLIBM_LIBRARY):
+	$(MAKE) -C $(@D) $(@F)
+
+jsopcode.h jsopcode.c: jsopcode.tbl
+
+ifeq (,$(CROSS_COMPILE)$(filter-out WINNT,$(OS_ARCH)))
+jsautocfg.h:
+	touch $@
+else
+jsautocfg.h: jscpucfg$(HOST_BIN_SUFFIX)
+	@rm -f $@ jsautocfg.tmp
+	./jscpucfg > jsautocfg.tmp
+	mv jsautocfg.tmp $@
+endif
+
+# jscpucfg is a strange target
+# Needs to be built with the host compiler but needs to include
+# the mdcpucfg for the target so it needs the appropriate target defines
+ifdef HOST_NSPR_MDCPUCFG
+HOST_CC := $(HOST_CC) -DMDCPUCFG=$(TARGET_NSPR_MDCPUCFG)
+endif
+
+ifeq ($(OS_ARCH),QNX)
+ifneq ($(OS_TARGET),NTO)
+# QNX's compiler apparently can't build a binary directly from a source file.
+jscpucfg.o: jscpucfg.c Makefile.in
+	$(HOST_CC) $(HOST_CFLAGS) -c $(DEFINES) $(NSPR_CFLAGS) -o $@ $<
+
+jscpucfg: jscpucfg.o
+	$(HOST_CC) $(HOST_CFLAGS) $(DEFINES) -o $@ $<
+endif
+else
+jscpucfg$(HOST_BIN_SUFFIX): jscpucfg.c Makefile.in
+	$(HOST_CC) $(HOST_CFLAGS) $(DEFINES) $(NSPR_CFLAGS) $(OUTOPTION)$@ $<
+endif
+
Index: mozilla-src/mozilla/js/src/Makefile.in
diff -u mozilla-src/mozilla/js/src/Makefile.in:1.1 mozilla-src/mozilla/js/src/Makefile.in:1.2
--- mozilla-src/mozilla/js/src/Makefile.in:1.1	Sat Nov 13 12:38:59 2004
+++ mozilla-src/mozilla/js/src/Makefile.in	Tue Nov 22 16:22:51 2005
@@ -96,6 +96,7 @@
 		jsutil.c \
 		jsxdrapi.c \
 		prmjtime.c \
+		xsstaint.c \
 		$(NULL)
 
 EXPORTS		= \
@@ -141,6 +142,8 @@
 		jsutil.h \
 		jsxdrapi.h \
 		jsstddef.h \
+		xsstaint.h \
+		xssdbg.h \
 		$(NULL)
 
 ifeq ($(OS_ARCH),WINNT)
Index: mozilla-src/mozilla/js/src/embed.mak
diff -u /dev/null mozilla-src/mozilla/js/src/embed.mak:1.1
--- /dev/null	Sun Mar 19 00:41:48 2006
+++ mozilla-src/mozilla/js/src/embed.mak	Tue Mar 29 15:36:39 2005
@@ -0,0 +1,4117 @@
+# Microsoft Developer Studio Generated NMAKE File, Format Version 4.20
+# ** DO NOT EDIT **
+
+# TARGTYPE "Win32 (x86) Console Application" 0x0103
+# TARGTYPE "Win32 (x86) Dynamic-Link Library" 0x0102
+# TARGTYPE "Win32 (x86) Static Library" 0x0104
+
+!IF "$(CFG)" == ""
+CFG=embedtest - Win32 Debug
+!MESSAGE No configuration specified.  Defaulting to embedtest - Win32 Debug.
+!ENDIF 
+
+!IF "$(CFG)" != "js - Win32 Release" && "$(CFG)" != "js - Win32 Debug" &&\
+ "$(CFG)" != "embedtest - Win32 Release" && "$(CFG)" != "embedtest - Win32 Debug" &&\
+ "$(CFG)" != "fdlibm - Win32 Release" && "$(CFG)" != "fdlibm - Win32 Debug"
+!MESSAGE Invalid configuration "$(CFG)" specified.
+!MESSAGE You can specify a configuration when running NMAKE on this makefile
+!MESSAGE by defining the macro CFG on the command line.  For example:
+!MESSAGE 
+!MESSAGE NMAKE /f "js.mak" CFG="embedtest - Win32 Debug"
+!MESSAGE 
+!MESSAGE Possible choices for configuration are:
+!MESSAGE 
+!MESSAGE "js - Win32 Release" (based on "Win32 (x86) Dynamic-Link Library")
+!MESSAGE "js - Win32 Debug" (based on "Win32 (x86) Dynamic-Link Library")
+!MESSAGE "embedtest - Win32 Release" (based on "Win32 (x86) Console Application")
+!MESSAGE "embedtest - Win32 Debug" (based on "Win32 (x86) Console Application")
+!MESSAGE "fdlibm - Win32 Release" (based on "Win32 (x86) Static Library")
+!MESSAGE "fdlibm - Win32 Debug" (based on "Win32 (x86) Static Library")
+!MESSAGE 
+!ERROR An invalid configuration is specified.
+!ENDIF 
+
+!IF "$(OS)" == "Windows_NT"
+NULL=
+!ELSE 
+NULL=nul
+!ENDIF 
+################################################################################
+# Begin Project
+# PROP Target_Last_Scanned "embedtest - Win32 Debug"
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 0
+# PROP BASE Output_Dir "js___Wi1"
+# PROP BASE Intermediate_Dir "js___Wi1"
+# PROP BASE Target_Dir ""
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 0
+# PROP Output_Dir "Release"
+# PROP Intermediate_Dir "Release"
+# PROP Target_Dir ""
+OUTDIR=.\Release
+INTDIR=.\Release
+
+ALL : "fdlibm - Win32 Release" "$(OUTDIR)\js32.dll"
+
+CLEAN : 
+	-@erase "$(INTDIR)\jsapi.obj"
+	-@erase "$(INTDIR)\jsarena.obj"
+	-@erase "$(INTDIR)\jsarray.obj"
+	-@erase "$(INTDIR)\jsatom.obj"
+	-@erase "$(INTDIR)\jsbool.obj"
+	-@erase "$(INTDIR)\jscntxt.obj"
+	-@erase "$(INTDIR)\jsdate.obj"
+	-@erase "$(INTDIR)\jsdbgapi.obj"
+	-@erase "$(INTDIR)\jsdhash.obj"
+	-@erase "$(INTDIR)\jsdtoa.obj"
+	-@erase "$(INTDIR)\jsemit.obj"
+	-@erase "$(INTDIR)\jsexn.obj"
+	-@erase "$(INTDIR)\jsfun.obj"
+	-@erase "$(INTDIR)\jsgc.obj"
+	-@erase "$(INTDIR)\jshash.obj"
+	-@erase "$(INTDIR)\jsinterp.obj"
+	-@erase "$(INTDIR)\jslock.obj"
+	-@erase "$(INTDIR)\jslog2.obj"
+	-@erase "$(INTDIR)\jslong.obj"
+	-@erase "$(INTDIR)\jsmath.obj"
+	-@erase "$(INTDIR)\jsnum.obj"
+	-@erase "$(INTDIR)\jsobj.obj"
+	-@erase "$(INTDIR)\jsopcode.obj"
+	-@erase "$(INTDIR)\jsparse.obj"
+	-@erase "$(INTDIR)\jsprf.obj"
+	-@erase "$(INTDIR)\jsregexp.obj"
+	-@erase "$(INTDIR)\jsscan.obj"
+	-@erase "$(INTDIR)\jsscope.obj"
+	-@erase "$(INTDIR)\jsscript.obj"
+	-@erase "$(INTDIR)\jsstr.obj"
+	-@erase "$(INTDIR)\jsutil.obj"
+	-@erase "$(INTDIR)\jsxdrapi.obj"
+	-@erase "$(INTDIR)\prmjtime.obj"
+	-@erase "$(INTDIR)\taint.obj"
+	-@erase "$(OUTDIR)\js32.dll"
+	-@erase "$(OUTDIR)\js32.exp"
+	-@erase "$(OUTDIR)\js32.lib"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /MT /W3 /GX /O2 /D "WIN32" /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
+# ADD CPP /nologo /MD /W3 /GX /O2 /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /YX /c
+CPP_PROJ=/nologo /MD /W3 /GX /O2 /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /D "WIN32" /D\
+ "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /Fp"$(INTDIR)/js.pch" /YX\
+ /Fo"$(INTDIR)/" /c 
+CPP_OBJS=.\Release/
+CPP_OBJS2=.\xss
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+MTL=mktyplib.exe
+# ADD BASE MTL /nologo /D "NDEBUG" /win32
+# ADD MTL /nologo /D "NDEBUG" /win32
+MTL_PROJ=/nologo /D "NDEBUG" /win32 
+RSC=rc.exe
+# ADD BASE RSC /l 0x409 /d "NDEBUG"
+# ADD RSC /l 0x409 /d "NDEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/js.bsc" 
+BSC32_SBRS= \
+	
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /machine:I386
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /machine:I386 /out:"Release/js32.dll"
+# SUBTRACT LINK32 /nodefaultlib
+LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
+ advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
+ odbccp32.lib /nologo /subsystem:windows /dll /incremental:no\
+ /pdb:"$(OUTDIR)/js32.pdb" /machine:I386 /out:"$(OUTDIR)/js32.dll"\
+ /implib:"$(OUTDIR)/js32.lib" /opt:ref /opt:noicf
+LINK32_OBJS= \
+	"$(INTDIR)\jsapi.obj" \
+	"$(INTDIR)\jsarena.obj" \
+	"$(INTDIR)\jsarray.obj" \
+	"$(INTDIR)\jsatom.obj" \
+	"$(INTDIR)\jsbool.obj" \
+	"$(INTDIR)\jscntxt.obj" \
+	"$(INTDIR)\jsdate.obj" \
+	"$(INTDIR)\jsdbgapi.obj" \
+	"$(INTDIR)\jsdhash.obj" \
+	"$(INTDIR)\jsdtoa.obj" \
+	"$(INTDIR)\jsemit.obj" \
+	"$(INTDIR)\jsexn.obj" \
+	"$(INTDIR)\jsfun.obj" \
+	"$(INTDIR)\jsgc.obj" \
+	"$(INTDIR)\jshash.obj" \
+	"$(INTDIR)\jsinterp.obj" \
+	"$(INTDIR)\jslock.obj" \
+	"$(INTDIR)\jslog2.obj" \
+	"$(INTDIR)\jslong.obj" \
+	"$(INTDIR)\jsmath.obj" \
+	"$(INTDIR)\jsnum.obj" \
+	"$(INTDIR)\jsobj.obj" \
+	"$(INTDIR)\jsopcode.obj" \
+	"$(INTDIR)\jsparse.obj" \
+	"$(INTDIR)\jsprf.obj" \
+	"$(INTDIR)\jsregexp.obj" \
+	"$(INTDIR)\jsscan.obj" \
+	"$(INTDIR)\jsscope.obj" \
+	"$(INTDIR)\jsscript.obj" \
+	"$(INTDIR)\jsstr.obj" \
+	"$(INTDIR)\jsutil.obj" \
+	"$(INTDIR)\jsxdrapi.obj" \
+	"$(INTDIR)\prmjtime.obj" \
+	"$(INTDIR)\taint.obj" \
+	"$(OUTDIR)\fdlibm.lib"
+
+"$(OUTDIR)\js32.dll" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 1
+# PROP BASE Output_Dir "js___Wi2"
+# PROP BASE Intermediate_Dir "js___Wi2"
+# PROP BASE Target_Dir ""
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 1
+# PROP Output_Dir "Debug"
+# PROP Intermediate_Dir "Debug"
+# PROP Target_Dir ""
+OUTDIR=.\Debug
+INTDIR=.\Debug
+
+ALL : "fdlibm - Win32 Debug" "$(OUTDIR)\js32.dll"
+
+CLEAN : 
+	-@erase "$(INTDIR)\jsapi.obj"
+	-@erase "$(INTDIR)\jsarena.obj"
+	-@erase "$(INTDIR)\jsarray.obj"
+	-@erase "$(INTDIR)\jsatom.obj"
+	-@erase "$(INTDIR)\jsbool.obj"
+	-@erase "$(INTDIR)\jscntxt.obj"
+	-@erase "$(INTDIR)\jsdate.obj"
+	-@erase "$(INTDIR)\jsdbgapi.obj"
+	-@erase "$(INTDIR)\jsdhash.obj"
+	-@erase "$(INTDIR)\jsdtoa.obj"
+	-@erase "$(INTDIR)\jsemit.obj"
+	-@erase "$(INTDIR)\jsexn.obj"
+	-@erase "$(INTDIR)\jsfun.obj"
+	-@erase "$(INTDIR)\jsgc.obj"
+	-@erase "$(INTDIR)\jshash.obj"
+	-@erase "$(INTDIR)\jsinterp.obj"
+	-@erase "$(INTDIR)\jslock.obj"
+	-@erase "$(INTDIR)\jslog2.obj"
+	-@erase "$(INTDIR)\jslong.obj"
+	-@erase "$(INTDIR)\jsmath.obj"
+	-@erase "$(INTDIR)\jsnum.obj"
+	-@erase "$(INTDIR)\jsobj.obj"
+	-@erase "$(INTDIR)\jsopcode.obj"
+	-@erase "$(INTDIR)\jsparse.obj"
+	-@erase "$(INTDIR)\jsprf.obj"
+	-@erase "$(INTDIR)\jsregexp.obj"
+	-@erase "$(INTDIR)\jsscan.obj"
+	-@erase "$(INTDIR)\jsscope.obj"
+	-@erase "$(INTDIR)\jsscript.obj"
+	-@erase "$(INTDIR)\jsstr.obj"
+	-@erase "$(INTDIR)\jsutil.obj"
+	-@erase "$(INTDIR)\jsxdrapi.obj"
+	-@erase "$(INTDIR)\prmjtime.obj"
+	-@erase "$(INTDIR)\taint.obj"
+	-@erase "$(INTDIR)\vc40.idb"
+	-@erase "$(INTDIR)\vc40.pdb"
+	-@erase "$(OUTDIR)\js32.dll"
+	-@erase "$(OUTDIR)\js32.exp"
+	-@erase "$(OUTDIR)\js32.ilk"
+	-@erase "$(OUTDIR)\js32.lib"
+	-@erase "$(OUTDIR)\js32.pdb"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /MTd /W3 /Gm /GX /Zi /Od /D "WIN32" /D "_DEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
+# ADD CPP /nologo /MDd /W3 /Gm /GX /Zi /Od /D "_DEBUG" /D "DEBUG" /D _X86_=1 /D "_WINDOWS" /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /YX /c
+#CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "_DEBUG" /D "DEBUG" /D _X86_=1 /D "_WINDOWS"\
+#CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "XSS=1" /D "_DEBUG" /D "DEBUG" /D _X86_=1 /D "_WINDOWS"\
+CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "XSS=1" /D "XSS_DEBUG=1" /D "_DEBUG" /D "DEBUG" /D _X86_=1 /D "_WINDOWS"\
+ /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /Fp"$(INTDIR)/js.pch" /YX\
+ /Fo"$(INTDIR)/" /Fd"$(INTDIR)/" /c 
+CPP_OBJS=.\Debug/
+CPP_OBJS2=.\xss
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+MTL=mktyplib.exe
+# ADD BASE MTL /nologo /D "_DEBUG" /win32
+# ADD MTL /nologo /D "_DEBUG" /win32
+MTL_PROJ=/nologo /D "_DEBUG" /win32 
+RSC=rc.exe
+# ADD BASE RSC /l 0x409 /d "_DEBUG"
+# ADD RSC /l 0x409 /d "_DEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/js.bsc" 
+BSC32_SBRS= \
+	
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /debug /machine:I386
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /debug /machine:I386 /out:"Debug/js32.dll"
+# SUBTRACT LINK32 /nodefaultlib
+LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
+ advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
+ odbccp32.lib /nologo /subsystem:windows /dll /incremental:yes\
+ /pdb:"$(OUTDIR)/js32.pdb" /debug /machine:I386 /out:"$(OUTDIR)/js32.dll"\
+ /implib:"$(OUTDIR)/js32.lib" 
+LINK32_OBJS= \
+	"$(INTDIR)\jsapi.obj" \
+	"$(INTDIR)\jsarena.obj" \
+	"$(INTDIR)\jsarray.obj" \
+	"$(INTDIR)\jsatom.obj" \
+	"$(INTDIR)\jsbool.obj" \
+	"$(INTDIR)\jscntxt.obj" \
+	"$(INTDIR)\jsdate.obj" \
+	"$(INTDIR)\jsdbgapi.obj" \
+	"$(INTDIR)\jsdhash.obj" \
+	"$(INTDIR)\jsdtoa.obj" \
+	"$(INTDIR)\jsemit.obj" \
+	"$(INTDIR)\jsexn.obj" \
+	"$(INTDIR)\jsfun.obj" \
+	"$(INTDIR)\jsgc.obj" \
+	"$(INTDIR)\jshash.obj" \
+	"$(INTDIR)\jsinterp.obj" \
+	"$(INTDIR)\jslock.obj" \
+	"$(INTDIR)\jslog2.obj" \
+	"$(INTDIR)\jslong.obj" \
+	"$(INTDIR)\jsmath.obj" \
+	"$(INTDIR)\jsnum.obj" \
+	"$(INTDIR)\jsobj.obj" \
+	"$(INTDIR)\jsopcode.obj" \
+	"$(INTDIR)\jsparse.obj" \
+	"$(INTDIR)\jsprf.obj" \
+	"$(INTDIR)\jsregexp.obj" \
+	"$(INTDIR)\jsscan.obj" \
+	"$(INTDIR)\jsscope.obj" \
+	"$(INTDIR)\jsscript.obj" \
+	"$(INTDIR)\jsstr.obj" \
+	"$(INTDIR)\jsutil.obj" \
+	"$(INTDIR)\jsxdrapi.obj" \
+	"$(INTDIR)\prmjtime.obj" \
+	"$(INTDIR)\taint.obj" \
+	"$(OUTDIR)\fdlibm.lib"
+
+"$(OUTDIR)\js32.dll" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "embedtest - Win32 Release"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 0
+# PROP BASE Output_Dir "embedtest\Release"
+# PROP BASE Intermediate_Dir "embedtest\Release"
+# PROP BASE Target_Dir "embedtest"
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 0
+# PROP Output_Dir "Release"
+# PROP Intermediate_Dir "Release"
+# PROP Target_Dir "embedtest"
+OUTDIR=.\Release
+INTDIR=.\Release
+
+ALL : "js - Win32 Release" "$(OUTDIR)\embedtest.exe"
+
+CLEAN : 
+	-@erase "$(INTDIR)\embedtest.obj"
+	-@erase "$(OUTDIR)\embedtest.exe"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /W3 /GX /O2 /D "WIN32" /D "NDEBUG" /D "_CONSOLE" /YX /c
+# ADD CPP /nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "_CONSOLE" /D "WIN32" /D "XP_WIN" /D "JSFILE" /YX /c
+CPP_PROJ=/nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "_CONSOLE" /D "WIN32" /D\
+ "XP_WIN" /D "JSFILE" /Fp"$(INTDIR)/embedtest.pch" /YX /Fo"$(INTDIR)/" /c 
+CPP_OBJS=.\Release/
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+RSC=rc.exe
+# ADD BASE RSC /l 0x409 /d "NDEBUG"
+# ADD RSC /l 0x409 /d "NDEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/embedtest.bsc" 
+BSC32_SBRS= \
+	
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /machine:I386
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /machine:I386
+LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
+ advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
+ odbccp32.lib /nologo /subsystem:console /incremental:no\
+ /pdb:"$(OUTDIR)/embedtest.pdb" /machine:I386 /out:"$(OUTDIR)/embedtest.exe" 
+LINK32_OBJS= \
+	"$(INTDIR)\embedtest.obj" \
+	"$(OUTDIR)\js32.lib"
+
+"$(OUTDIR)\embedtest.exe" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "embedtest - Win32 Debug"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 1
+# PROP BASE Output_Dir "embedtest\embedtest_"
+# PROP BASE Intermediate_Dir "embedtest\embedtest_"
+# PROP BASE Target_Dir "embedtest"
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 1
+# PROP Output_Dir "Debug"
+# PROP Intermediate_Dir "Debug"
+# PROP Target_Dir "embedtest"
+OUTDIR=.\Debug
+INTDIR=.\Debug
+
+ALL : "js - Win32 Debug" "$(OUTDIR)\embedtest.exe"
+
+CLEAN : 
+	-@erase "$(INTDIR)\embedtest.obj"
+	-@erase "$(INTDIR)\vc40.idb"
+	-@erase "$(INTDIR)\vc40.pdb"
+	-@erase "$(OUTDIR)\embedtest.exe"
+	-@erase "$(OUTDIR)\embedtest.ilk"
+	-@erase "$(OUTDIR)\embedtest.pdb"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /W3 /Gm /GX /Zi /Od /D "WIN32" /D "_DEBUG" /D "_CONSOLE" /YX /c
+# ADD CPP /nologo /MDd /W3 /Gm /GX /Zi /Od /D "_CONSOLE" /D "_DEBUG" /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "DEBUG" /YX /c
+#CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "_CONSOLE" /D "_DEBUG" /D "WIN32"\
+#CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "XSS=1" /D "_CONSOLE" /D "_DEBUG" /D "WIN32"\
+CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "XSS=1" /D "XSS_DEBUG=1" /D "_CONSOLE" /D "_DEBUG" /D "WIN32"\
+ /D "XP_WIN" /D "JSFILE" /D "DEBUG" /Fp"$(INTDIR)/embedtest.pch" /YX\
+ /Fo"$(INTDIR)/" /Fd"$(INTDIR)/" /c 
+CPP_OBJS=.\Debug/
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+RSC=rc.exe
+# ADD BASE RSC /l 0x409 /d "_DEBUG"
+# ADD RSC /l 0x409 /d "_DEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/embedtest.bsc" 
+BSC32_SBRS= \
+	
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /debug /machine:I386
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /debug /machine:I386
+LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
+ advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
+ odbccp32.lib /nologo /subsystem:console /incremental:yes\
+ /pdb:"$(OUTDIR)/embedtest.pdb" /debug /machine:I386 /out:"$(OUTDIR)/embedtest.exe" 
+LINK32_OBJS= \
+	"$(INTDIR)\embedtest.obj" \
+	"$(OUTDIR)\js32.lib"
+
+"$(OUTDIR)\embedtest.exe" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Release"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 0
+# PROP BASE Output_Dir "fdlibm\Release"
+# PROP BASE Intermediate_Dir "fdlibm\Release"
+# PROP BASE Target_Dir "fdlibm"
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 0
+# PROP Output_Dir "Release"
+# PROP Intermediate_Dir "Release"
+# PROP Target_Dir "fdlibm"
+OUTDIR=.\Release
+INTDIR=.\Release
+
+ALL : "$(OUTDIR)\fdlibm.lib"
+
+CLEAN : 
+	-@erase "$(INTDIR)\e_atan2.obj"
+	-@erase "$(INTDIR)\e_pow.obj"
+	-@erase "$(INTDIR)\e_sqrt.obj"
+	-@erase "$(INTDIR)\k_standard.obj"
+	-@erase "$(INTDIR)\s_atan.obj"
+	-@erase "$(INTDIR)\s_copysign.obj"
+	-@erase "$(INTDIR)\s_fabs.obj"
+	-@erase "$(INTDIR)\s_finite.obj"
+	-@erase "$(INTDIR)\s_isnan.obj"
+	-@erase "$(INTDIR)\s_matherr.obj"
+	-@erase "$(INTDIR)\s_rint.obj"
+	-@erase "$(INTDIR)\s_scalbn.obj"
+	-@erase "$(INTDIR)\w_atan2.obj"
+	-@erase "$(INTDIR)\w_pow.obj"
+	-@erase "$(INTDIR)\w_sqrt.obj"
+	-@erase "$(OUTDIR)\fdlibm.lib"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /W3 /GX /O2 /D "WIN32" /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
+# ADD CPP /nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D "_IEEE_LIBM" /YX /c
+CPP_PROJ=/nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D\
+ "_IEEE_LIBM" /D "XP_WIN" /I .\ /Fp"$(INTDIR)/fdlibm.pch" /YX /Fo"$(INTDIR)/" /c 
+CPP_OBJS=.\Release/
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/fdlibm.bsc" 
+BSC32_SBRS= \
+	
+LIB32=link.exe -lib
+# ADD BASE LIB32 /nologo
+# ADD LIB32 /nologo
+LIB32_FLAGS=/nologo /out:"$(OUTDIR)/fdlibm.lib" 
+LIB32_OBJS= \
+	"$(INTDIR)\e_atan2.obj" \
+	"$(INTDIR)\e_pow.obj" \
+	"$(INTDIR)\e_sqrt.obj" \
+	"$(INTDIR)\k_standard.obj" \
+	"$(INTDIR)\s_atan.obj" \
+	"$(INTDIR)\s_copysign.obj" \
+	"$(INTDIR)\s_fabs.obj" \
+	"$(INTDIR)\s_finite.obj" \
+	"$(INTDIR)\s_isnan.obj" \
+	"$(INTDIR)\s_matherr.obj" \
+	"$(INTDIR)\s_rint.obj" \
+	"$(INTDIR)\s_scalbn.obj" \
+	"$(INTDIR)\w_atan2.obj" \
+	"$(INTDIR)\w_pow.obj" \
+	"$(INTDIR)\w_sqrt.obj"
+
+"$(OUTDIR)\fdlibm.lib" : "$(OUTDIR)" $(DEF_FILE) $(LIB32_OBJS)
+    $(LIB32) @<<
+  $(LIB32_FLAGS) $(DEF_FLAGS) $(LIB32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 1
+# PROP BASE Output_Dir "fdlibm\Debug"
+# PROP BASE Intermediate_Dir "fdlibm\Debug"
+# PROP BASE Target_Dir "fdlibm"
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 1
+# PROP Output_Dir "Debug"
+# PROP Intermediate_Dir "Debug"
+# PROP Target_Dir "fdlibm"
+OUTDIR=.\Debug
+INTDIR=.\Debug
+
+ALL : "$(OUTDIR)\fdlibm.lib"
+
+CLEAN : 
+	-@erase "$(INTDIR)\e_atan2.obj"
+	-@erase "$(INTDIR)\e_pow.obj"
+	-@erase "$(INTDIR)\e_sqrt.obj"
+	-@erase "$(INTDIR)\k_standard.obj"
+	-@erase "$(INTDIR)\s_atan.obj"
+	-@erase "$(INTDIR)\s_copysign.obj"
+	-@erase "$(INTDIR)\s_fabs.obj"
+	-@erase "$(INTDIR)\s_finite.obj"
+	-@erase "$(INTDIR)\s_isnan.obj"
+	-@erase "$(INTDIR)\s_matherr.obj"
+	-@erase "$(INTDIR)\s_rint.obj"
+	-@erase "$(INTDIR)\s_scalbn.obj"
+	-@erase "$(INTDIR)\w_atan2.obj"
+	-@erase "$(INTDIR)\w_pow.obj"
+	-@erase "$(INTDIR)\w_sqrt.obj"
+	-@erase "$(OUTDIR)\fdlibm.lib"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /W3 /GX /Z7 /Od /D "WIN32" /D "_DEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
+# ADD CPP /nologo /MDd /W3 /GX /Z7 /Od /D "_DEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D "_IEEE_LIBM" /YX /c
+#CPP_PROJ=/nologo /MDd /W3 /GX /Z7 /Od /D "_DEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D\
+#CPP_PROJ=/nologo /MDd /W3 /GX /Z7 /Od /D "XSS=1" /D "_DEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D\
+CPP_PROJ=/nologo /MDd /W3 /GX /Z7 /Od /D "XSS=1" /D "XSS_DEBUG=1" /D "_DEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D\
+ "_IEEE_LIBM" /D "XP_WIN" -I .\ /Fp"$(INTDIR)/fdlibm.pch" /YX /Fo"$(INTDIR)/" /c 
+CPP_OBJS=.\Debug/
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/fdlibm.bsc" 
+BSC32_SBRS= \
+	
+LIB32=link.exe -lib
+# ADD BASE LIB32 /nologo
+# ADD LIB32 /nologo
+LIB32_FLAGS=/nologo /out:"$(OUTDIR)/fdlibm.lib" 
+LIB32_OBJS= \
+	"$(INTDIR)\e_atan2.obj" \
+	"$(INTDIR)\e_pow.obj" \
+	"$(INTDIR)\e_sqrt.obj" \
+	"$(INTDIR)\k_standard.obj" \
+	"$(INTDIR)\s_atan.obj" \
+	"$(INTDIR)\s_copysign.obj" \
+	"$(INTDIR)\s_fabs.obj" \
+	"$(INTDIR)\s_finite.obj" \
+	"$(INTDIR)\s_isnan.obj" \
+	"$(INTDIR)\s_matherr.obj" \
+	"$(INTDIR)\s_rint.obj" \
+	"$(INTDIR)\s_scalbn.obj" \
+	"$(INTDIR)\w_atan2.obj" \
+	"$(INTDIR)\w_pow.obj" \
+	"$(INTDIR)\w_sqrt.obj"
+
+"$(OUTDIR)\fdlibm.lib" : "$(OUTDIR)" $(DEF_FILE) $(LIB32_OBJS)
+    $(LIB32) @<<
+  $(LIB32_FLAGS) $(DEF_FLAGS) $(LIB32_OBJS)
+<<
+
+!ENDIF 
+
+################################################################################
+# Begin Target
+
+# Name "js - Win32 Release"
+# Name "js - Win32 Debug"
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+!ENDIF 
+
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsapi.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSAPI=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdate.h"\
+	".\jsemit.h"\
+	".\jsexn.h"\
+	".\jsfile.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsmath.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xss\taint.h"\
+	".\xss\xssdbg.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSAPI=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsapi.obj" : $(SOURCE) $(DEP_CPP_JSAPI) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSAPI=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdate.h"\
+	".\jsemit.h"\
+	".\jsexn.h"\
+	".\jsfile.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsmath.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xss\taint.h"\
+	".\xss\xssdbg.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSAPI=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsapi.obj" : $(SOURCE) $(DEP_CPP_JSAPI) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsarena.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSARE=\
+	".\jsarena.h"\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsstddef.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSARE=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsarena.obj" : $(SOURCE) $(DEP_CPP_JSARE) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSARE=\
+	".\jsarena.h"\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsstddef.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSARE=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsarena.obj" : $(SOURCE) $(DEP_CPP_JSARE) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsarray.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSARR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xss\taint.h"\
+	".\xss\xssdbg.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSARR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsarray.obj" : $(SOURCE) $(DEP_CPP_JSARR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSARR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xss\taint.h"\
+	".\xss\xssdbg.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSARR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsarray.obj" : $(SOURCE) $(DEP_CPP_JSARR) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsatom.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSATO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSATO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsatom.obj" : $(SOURCE) $(DEP_CPP_JSATO) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSATO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSATO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsatom.obj" : $(SOURCE) $(DEP_CPP_JSATO) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsbool.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSBOO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSBOO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsbool.obj" : $(SOURCE) $(DEP_CPP_JSBOO) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSBOO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSBOO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsbool.obj" : $(SOURCE) $(DEP_CPP_JSBOO) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jscntxt.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSCNT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsexn.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSCNT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jscntxt.obj" : $(SOURCE) $(DEP_CPP_JSCNT) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSCNT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsexn.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSCNT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jscntxt.obj" : $(SOURCE) $(DEP_CPP_JSCNT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsdate.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSDAT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdate.h"\
+	".\jsdtoa.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\prmjtime.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDAT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdate.obj" : $(SOURCE) $(DEP_CPP_JSDAT) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSDAT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdate.h"\
+	".\jsdtoa.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\prmjtime.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDAT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdate.obj" : $(SOURCE) $(DEP_CPP_JSDAT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsdbgapi.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSDBG=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDBG=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdbgapi.obj" : $(SOURCE) $(DEP_CPP_JSDBG) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSDBG=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDBG=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdbgapi.obj" : $(SOURCE) $(DEP_CPP_JSDBG) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsdhash.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSDHA=\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jsdhash.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDHA=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsdhash.obj" : $(SOURCE) $(DEP_CPP_JSDHA) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSDHA=\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jsdhash.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDHA=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsdhash.obj" : $(SOURCE) $(DEP_CPP_JSDHA) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsdtoa.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSDTO=\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsstddef.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDTO=\
+	".\jsautocfg.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdtoa.obj" : $(SOURCE) $(DEP_CPP_JSDTO) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSDTO=\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsstddef.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDTO=\
+	".\jsautocfg.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdtoa.obj" : $(SOURCE) $(DEP_CPP_JSDTO) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsemit.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSEMI=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSEMI=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsemit.obj" : $(SOURCE) $(DEP_CPP_JSEMI) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSEMI=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSEMI=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsemit.obj" : $(SOURCE) $(DEP_CPP_JSEMI) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsexn.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSEXN=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsexn.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSEXN=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsexn.obj" : $(SOURCE) $(DEP_CPP_JSEXN) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSEXN=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsexn.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSEXN=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsexn.obj" : $(SOURCE) $(DEP_CPP_JSEXN) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsfun.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSFUN=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSFUN=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsfun.obj" : $(SOURCE) $(DEP_CPP_JSFUN) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSFUN=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSFUN=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsfun.obj" : $(SOURCE) $(DEP_CPP_JSFUN) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsgc.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSGC_=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xss\taint.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSGC_=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsgc.obj" : $(SOURCE) $(DEP_CPP_JSGC_) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSGC_=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xss\taint.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSGC_=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsgc.obj" : $(SOURCE) $(DEP_CPP_JSGC_) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jshash.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSHAS=\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jshash.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSHAS=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jshash.obj" : $(SOURCE) $(DEP_CPP_JSHAS) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSHAS=\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jshash.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSHAS=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jshash.obj" : $(SOURCE) $(DEP_CPP_JSHAS) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsinterp.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSINT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xss\taint.h"\
+	".\xss\xssdbg.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSINT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsinterp.obj" : $(SOURCE) $(DEP_CPP_JSINT) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSINT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xss\taint.h"\
+	".\xss\xssdbg.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSINT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsinterp.obj" : $(SOURCE) $(DEP_CPP_JSINT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jslock.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSLOC=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLOC=\
+	".\jsautocfg.h"\
+	".\pratom.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	".\prthread.h"\
+	
+
+"$(INTDIR)\jslock.obj" : $(SOURCE) $(DEP_CPP_JSLOC) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSLOC=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLOC=\
+	".\jsautocfg.h"\
+	".\pratom.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	".\prthread.h"\
+	
+
+"$(INTDIR)\jslock.obj" : $(SOURCE) $(DEP_CPP_JSLOC) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jslog2.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSLOG=\
+	".\jsbit.h"\
+	".\jscpucfg.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLOG=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jslog2.obj" : $(SOURCE) $(DEP_CPP_JSLOG) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSLOG=\
+	".\jsbit.h"\
+	".\jscpucfg.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLOG=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jslog2.obj" : $(SOURCE) $(DEP_CPP_JSLOG) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jslong.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSLON=\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLON=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jslong.obj" : $(SOURCE) $(DEP_CPP_JSLON) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSLON=\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLON=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jslong.obj" : $(SOURCE) $(DEP_CPP_JSLON) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsmath.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSMAT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslibmath.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsmath.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\prmjtime.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSMAT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsmath.obj" : $(SOURCE) $(DEP_CPP_JSMAT) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSMAT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslibmath.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsmath.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\prmjtime.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSMAT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsmath.obj" : $(SOURCE) $(DEP_CPP_JSMAT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsnum.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSNUM=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSNUM=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsnum.obj" : $(SOURCE) $(DEP_CPP_JSNUM) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSNUM=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSNUM=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsnum.obj" : $(SOURCE) $(DEP_CPP_JSNUM) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsobj.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSOBJ=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\xss\taint.h"\
+	".\xss\xssdbg.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSOBJ=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsobj.obj" : $(SOURCE) $(DEP_CPP_JSOBJ) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSOBJ=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\xss\taint.h"\
+	".\xss\xssdbg.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSOBJ=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsobj.obj" : $(SOURCE) $(DEP_CPP_JSOBJ) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsopcode.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSOPC=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsdtoa.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSOPC=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsopcode.obj" : $(SOURCE) $(DEP_CPP_JSOPC) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSOPC=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsdtoa.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSOPC=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsopcode.obj" : $(SOURCE) $(DEP_CPP_JSOPC) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsparse.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSPAR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSPAR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsparse.obj" : $(SOURCE) $(DEP_CPP_JSPAR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSPAR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSPAR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsparse.obj" : $(SOURCE) $(DEP_CPP_JSPAR) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsprf.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSPRF=\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSPRF=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsprf.obj" : $(SOURCE) $(DEP_CPP_JSPRF) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSPRF=\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSPRF=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsprf.obj" : $(SOURCE) $(DEP_CPP_JSPRF) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsregexp.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSREG=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSREG=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsregexp.obj" : $(SOURCE) $(DEP_CPP_JSREG) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSREG=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSREG=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsregexp.obj" : $(SOURCE) $(DEP_CPP_JSREG) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsscan.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSSCA=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jsexn.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCA=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscan.obj" : $(SOURCE) $(DEP_CPP_JSSCA) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSSCA=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jsexn.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCA=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscan.obj" : $(SOURCE) $(DEP_CPP_JSSCA) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsscope.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSSCO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscope.obj" : $(SOURCE) $(DEP_CPP_JSSCO) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSSCO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscope.obj" : $(SOURCE) $(DEP_CPP_JSSCO) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsscript.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSSCR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscript.obj" : $(SOURCE) $(DEP_CPP_JSSCR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSSCR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscript.obj" : $(SOURCE) $(DEP_CPP_JSSCR) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsstr.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSSTR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xss\taint.h"\
+	".\xss\xssdbg.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSTR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsstr.obj" : $(SOURCE) $(DEP_CPP_JSSTR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSSTR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xss\taint.h"\
+	".\xss\xssdbg.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSTR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsstr.obj" : $(SOURCE) $(DEP_CPP_JSSTR) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsutil.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSUTI=\
+	".\jscpucfg.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSUTI=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsutil.obj" : $(SOURCE) $(DEP_CPP_JSUTI) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSUTI=\
+	".\jscpucfg.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSUTI=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsutil.obj" : $(SOURCE) $(DEP_CPP_JSUTI) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsxdrapi.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSXDR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSXDR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsxdrapi.obj" : $(SOURCE) $(DEP_CPP_JSXDR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSXDR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSXDR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsxdrapi.obj" : $(SOURCE) $(DEP_CPP_JSXDR) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\prmjtime.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_PRMJT=\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\prmjtime.h"\
+	{$(INCLUDE)}"\sys\TIMEB.H"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_PRMJT=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\prmjtime.obj" : $(SOURCE) $(DEP_CPP_PRMJT) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_PRMJT=\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\prmjtime.h"\
+	{$(INCLUDE)}"\sys\TIMEB.H"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_PRMJT=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\prmjtime.obj" : $(SOURCE) $(DEP_CPP_PRMJT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\xss\taint.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_XSSTAINT=\
+	".\xss\taint.h"\
+	".\jspubtd.h"\
+	".\jsapi.h"\
+	".\jsgc.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_XSSTAINT=\
+	".\jsautocfg.h"\
+	
+"$(INTDIR)\taint.obj" : $(SOURCE) $(DEP_CPP_XSSTAINT) "$(INTDIR)"
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_XSSTAINT=\
+	".\xss\taint.h"\
+	".\jspubtd.h"\
+	".\jsapi.h"\
+	".\jsgc.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_XSSTAINT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+"$(INTDIR)\taint.obj" : $(SOURCE) $(DEP_CPP_XSSTAINT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Project Dependency
+
+# Project_Dep_Name "fdlibm"
+
+!IF  "$(CFG)" == "js - Win32 Debug"
+
+"fdlibm - Win32 Debug" : 
+   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="fdlibm - Win32 Debug" 
+
+!ELSEIF  "$(CFG)" == "js - Win32 Release"
+
+"fdlibm - Win32 Release" : 
+   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="fdlibm - Win32 Release" 
+
+!ENDIF 
+
+# End Project Dependency
+# End Target
+################################################################################
+# Begin Target
+
+# Name "embedtest - Win32 Release"
+# Name "embedtest - Win32 Debug"
+
+!IF  "$(CFG)" == "embedtest - Win32 Release"
+
+!ELSEIF  "$(CFG)" == "embedtest - Win32 Debug"
+
+!ENDIF 
+
+################################################################################
+# Begin Source File
+
+SOURCE=.\embedtest.c
+DEP_CPP_JS_C42=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsshell.msg"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xss\taint.h"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JS_C42=\
+	".\jsautocfg.h"\
+	".\jsdb.h"\
+	".\jsdebug.h"\
+	".\jsdjava.h"\
+	".\jsjava.h"\
+	".\jsperl.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\embedtest.obj" : $(SOURCE) $(DEP_CPP_JS_C42) "$(INTDIR)"
+
+
+# End Source File
+################################################################################
+# Begin Project Dependency
+
+# Project_Dep_Name "js"
+
+!IF  "$(CFG)" == "embedtest - Win32 Release"
+
+"js - Win32 Release" : 
+   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="js - Win32 Release" 
+
+!ELSEIF  "$(CFG)" == "embedtest - Win32 Debug"
+
+"js - Win32 Debug" : 
+   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="js - Win32 Debug" 
+
+!ENDIF 
+
+# End Project Dependency
+# End Target
+################################################################################
+# Begin Target
+
+# Name "fdlibm - Win32 Release"
+# Name "fdlibm - Win32 Debug"
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+!ENDIF 
+
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\w_atan2.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_W_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_atan2.obj" : $(SOURCE) $(DEP_CPP_W_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_W_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_atan2.obj" : $(SOURCE) $(DEP_CPP_W_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_copysign.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_COP=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_copysign.obj" : $(SOURCE) $(DEP_CPP_S_COP) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_COP=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_copysign.obj" : $(SOURCE) $(DEP_CPP_S_COP) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\w_pow.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_W_POW=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_pow.obj" : $(SOURCE) $(DEP_CPP_W_POW) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_W_POW=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_pow.obj" : $(SOURCE) $(DEP_CPP_W_POW) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\e_pow.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_E_POW=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_pow.obj" : $(SOURCE) $(DEP_CPP_E_POW) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_E_POW=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_pow.obj" : $(SOURCE) $(DEP_CPP_E_POW) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\k_standard.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_K_STA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\k_standard.obj" : $(SOURCE) $(DEP_CPP_K_STA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_K_STA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\k_standard.obj" : $(SOURCE) $(DEP_CPP_K_STA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\e_atan2.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_E_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_atan2.obj" : $(SOURCE) $(DEP_CPP_E_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_E_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_atan2.obj" : $(SOURCE) $(DEP_CPP_E_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_isnan.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_ISN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_isnan.obj" : $(SOURCE) $(DEP_CPP_S_ISN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_ISN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_isnan.obj" : $(SOURCE) $(DEP_CPP_S_ISN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_fabs.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_FAB=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_fabs.obj" : $(SOURCE) $(DEP_CPP_S_FAB) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_FAB=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_fabs.obj" : $(SOURCE) $(DEP_CPP_S_FAB) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\w_sqrt.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_W_SQR=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_sqrt.obj" : $(SOURCE) $(DEP_CPP_W_SQR) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_W_SQR=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_sqrt.obj" : $(SOURCE) $(DEP_CPP_W_SQR) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_scalbn.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_SCA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_scalbn.obj" : $(SOURCE) $(DEP_CPP_S_SCA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_SCA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_scalbn.obj" : $(SOURCE) $(DEP_CPP_S_SCA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\e_sqrt.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_E_SQR=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_sqrt.obj" : $(SOURCE) $(DEP_CPP_E_SQR) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_E_SQR=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_sqrt.obj" : $(SOURCE) $(DEP_CPP_E_SQR) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_rint.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_RIN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_rint.obj" : $(SOURCE) $(DEP_CPP_S_RIN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_RIN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_rint.obj" : $(SOURCE) $(DEP_CPP_S_RIN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_atan.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_atan.obj" : $(SOURCE) $(DEP_CPP_S_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_atan.obj" : $(SOURCE) $(DEP_CPP_S_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_finite.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_FIN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_finite.obj" : $(SOURCE) $(DEP_CPP_S_FIN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_FIN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_finite.obj" : $(SOURCE) $(DEP_CPP_S_FIN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_matherr.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_MAT=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_matherr.obj" : $(SOURCE) $(DEP_CPP_S_MAT) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_MAT=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_matherr.obj" : $(SOURCE) $(DEP_CPP_S_MAT) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+# End Target
+# End Project
+################################################################################
Index: mozilla-src/mozilla/js/src/embedtest.c
diff -u /dev/null mozilla-src/mozilla/js/src/embedtest.c:1.1
--- /dev/null	Sun Mar 19 00:41:49 2006
+++ mozilla-src/mozilla/js/src/embedtest.c	Tue Mar 29 15:36:39 2005
@@ -0,0 +1,48 @@
+/* EXIT_FAILURE and EXIT_SUCCESS */
+#include <stdlib.h>  
+/* strlen */
+#include <string.h>
+
+/* get SpiderMonkey API declarations */
+#include "jsapi.h"
+
+int
+main(int argc, char** argv)
+{
+  /* pointer to our runtime object */
+  JSRuntime *runtime=NULL;
+  /* pointer to our context */
+  JSContext *context=NULL;
+  /* pointer to our global JavaScript object */
+  JSObject  *global=NULL;
+
+  /* script to run (should return 100) */
+  char *script="var x=10;x*x;";
+  /* JavaScript value to store the result of the script */
+  jsval rval;
+
+  JSString *str;
+  JSBool ok;
+
+  /* create new runtime, new context, global object */
+  if (    (!(runtime = JS_NewRuntime (1024L*1024L)))
+       || (!(context = JS_NewContext (runtime, 8192)))
+       || (!(global  = JS_NewObject  (context, NULL, NULL, NULL)))
+     ) return EXIT_FAILURE;
+  /* set global object of context and initialize standard ECMAScript
+     objects (Math, Date, ...) within this global object scope */
+  if (!JS_InitStandardClasses(context, global)) return EXIT_FAILURE;
+
+  /* now we are ready to run our script */
+  ok = JS_EvaluateScript(context, global,script, strlen(script),
+			 "script", 1, &rval);
+
+  str = JS_ValueToString(context, rval);
+    printf("script result: %s\n", JS_GetStringBytes(str));
+
+  /* clean up */
+  JS_DestroyContext(context);
+  JS_DestroyRuntime(runtime);
+  JS_ShutDown();
+  return EXIT_SUCCESS;
+}
\ No newline at end of file
Index: mozilla-src/mozilla/js/src/js.c
diff -u mozilla-src/mozilla/js/src/js.c:1.1 mozilla-src/mozilla/js/src/js.c:1.4
--- mozilla-src/mozilla/js/src/js.c:1.1	Sat Nov 13 12:39:00 2004
+++ mozilla-src/mozilla/js/src/js.c	Wed Jan 18 15:49:34 2006
@@ -2274,6 +2274,11 @@
     JNIEnv *java_env;
 #endif
 
+#ifdef XSS /* XSS */
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+	setbuf(stderr, NULL);
+#endif /* XSS_DEBUG */
+#endif /* XSS */
     gStackBase = (jsuword)&stackDummy;
 
 #ifdef XP_OS2
Index: mozilla-src/mozilla/js/src/js.mak
diff -u mozilla-src/mozilla/js/src/js.mak:1.1 mozilla-src/mozilla/js/src/js.mak:1.7
--- mozilla-src/mozilla/js/src/js.mak:1.1	Sat Nov 13 12:38:59 2004
+++ mozilla-src/mozilla/js/src/js.mak	Wed Jan 18 15:47:05 2006
@@ -1,4025 +1,4188 @@
-# Microsoft Developer Studio Generated NMAKE File, Format Version 4.20
-# ** DO NOT EDIT **
-
-# TARGTYPE "Win32 (x86) Console Application" 0x0103
-# TARGTYPE "Win32 (x86) Dynamic-Link Library" 0x0102
-# TARGTYPE "Win32 (x86) Static Library" 0x0104
-
-!IF "$(CFG)" == ""
-CFG=jsshell - Win32 Debug
-!MESSAGE No configuration specified.  Defaulting to jsshell - Win32 Debug.
-!ENDIF 
-
-!IF "$(CFG)" != "js - Win32 Release" && "$(CFG)" != "js - Win32 Debug" &&\
- "$(CFG)" != "jsshell - Win32 Release" && "$(CFG)" != "jsshell - Win32 Debug" &&\
- "$(CFG)" != "fdlibm - Win32 Release" && "$(CFG)" != "fdlibm - Win32 Debug"
-!MESSAGE Invalid configuration "$(CFG)" specified.
-!MESSAGE You can specify a configuration when running NMAKE on this makefile
-!MESSAGE by defining the macro CFG on the command line.  For example:
-!MESSAGE 
-!MESSAGE NMAKE /f "js.mak" CFG="jsshell - Win32 Debug"
-!MESSAGE 
-!MESSAGE Possible choices for configuration are:
-!MESSAGE 
-!MESSAGE "js - Win32 Release" (based on "Win32 (x86) Dynamic-Link Library")
-!MESSAGE "js - Win32 Debug" (based on "Win32 (x86) Dynamic-Link Library")
-!MESSAGE "jsshell - Win32 Release" (based on "Win32 (x86) Console Application")
-!MESSAGE "jsshell - Win32 Debug" (based on "Win32 (x86) Console Application")
-!MESSAGE "fdlibm - Win32 Release" (based on "Win32 (x86) Static Library")
-!MESSAGE "fdlibm - Win32 Debug" (based on "Win32 (x86) Static Library")
-!MESSAGE 
-!ERROR An invalid configuration is specified.
-!ENDIF 
-
-!IF "$(OS)" == "Windows_NT"
-NULL=
-!ELSE 
-NULL=nul
-!ENDIF 
-################################################################################
-# Begin Project
-# PROP Target_Last_Scanned "jsshell - Win32 Debug"
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-# PROP BASE Use_MFC 0
-# PROP BASE Use_Debug_Libraries 0
-# PROP BASE Output_Dir "js___Wi1"
-# PROP BASE Intermediate_Dir "js___Wi1"
-# PROP BASE Target_Dir ""
-# PROP Use_MFC 0
-# PROP Use_Debug_Libraries 0
-# PROP Output_Dir "Release"
-# PROP Intermediate_Dir "Release"
-# PROP Target_Dir ""
-OUTDIR=.\Release
-INTDIR=.\Release
-
-ALL : "fdlibm - Win32 Release" "$(OUTDIR)\js32.dll"
-
-CLEAN : 
-	-@erase "$(INTDIR)\jsapi.obj"
-	-@erase "$(INTDIR)\jsarena.obj"
-	-@erase "$(INTDIR)\jsarray.obj"
-	-@erase "$(INTDIR)\jsatom.obj"
-	-@erase "$(INTDIR)\jsbool.obj"
-	-@erase "$(INTDIR)\jscntxt.obj"
-	-@erase "$(INTDIR)\jsdate.obj"
-	-@erase "$(INTDIR)\jsdbgapi.obj"
-	-@erase "$(INTDIR)\jsdhash.obj"
-	-@erase "$(INTDIR)\jsdtoa.obj"
-	-@erase "$(INTDIR)\jsemit.obj"
-	-@erase "$(INTDIR)\jsexn.obj"
-	-@erase "$(INTDIR)\jsfun.obj"
-	-@erase "$(INTDIR)\jsgc.obj"
-	-@erase "$(INTDIR)\jshash.obj"
-	-@erase "$(INTDIR)\jsinterp.obj"
-	-@erase "$(INTDIR)\jslock.obj"
-	-@erase "$(INTDIR)\jslog2.obj"
-	-@erase "$(INTDIR)\jslong.obj"
-	-@erase "$(INTDIR)\jsmath.obj"
-	-@erase "$(INTDIR)\jsnum.obj"
-	-@erase "$(INTDIR)\jsobj.obj"
-	-@erase "$(INTDIR)\jsopcode.obj"
-	-@erase "$(INTDIR)\jsparse.obj"
-	-@erase "$(INTDIR)\jsprf.obj"
-	-@erase "$(INTDIR)\jsregexp.obj"
-	-@erase "$(INTDIR)\jsscan.obj"
-	-@erase "$(INTDIR)\jsscope.obj"
-	-@erase "$(INTDIR)\jsscript.obj"
-	-@erase "$(INTDIR)\jsstr.obj"
-	-@erase "$(INTDIR)\jsutil.obj"
-	-@erase "$(INTDIR)\jsxdrapi.obj"
-	-@erase "$(INTDIR)\prmjtime.obj"
-	-@erase "$(OUTDIR)\js32.dll"
-	-@erase "$(OUTDIR)\js32.exp"
-	-@erase "$(OUTDIR)\js32.lib"
-
-"$(OUTDIR)" :
-    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
-
-CPP=cl.exe
-# ADD BASE CPP /nologo /MT /W3 /GX /O2 /D "WIN32" /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
-# ADD CPP /nologo /MD /W3 /GX /O2 /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /YX /c
-CPP_PROJ=/nologo /MD /W3 /GX /O2 /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /D "WIN32" /D\
- "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /Fp"$(INTDIR)/js.pch" /YX\
- /Fo"$(INTDIR)/" /c 
-CPP_OBJS=.\Release/
-CPP_SBRS=.\.
-
-.c{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.c{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-MTL=mktyplib.exe
-# ADD BASE MTL /nologo /D "NDEBUG" /win32
-# ADD MTL /nologo /D "NDEBUG" /win32
-MTL_PROJ=/nologo /D "NDEBUG" /win32 
-RSC=rc.exe
-# ADD BASE RSC /l 0x409 /d "NDEBUG"
-# ADD RSC /l 0x409 /d "NDEBUG"
-BSC32=bscmake.exe
-# ADD BASE BSC32 /nologo
-# ADD BSC32 /nologo
-BSC32_FLAGS=/nologo /o"$(OUTDIR)/js.bsc" 
-BSC32_SBRS= \
-	
-LINK32=link.exe
-# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /machine:I386
-# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /machine:I386 /out:"Release/js32.dll"
-# SUBTRACT LINK32 /nodefaultlib
-LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
- advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
- odbccp32.lib /nologo /subsystem:windows /dll /incremental:no\
- /pdb:"$(OUTDIR)/js32.pdb" /machine:I386 /out:"$(OUTDIR)/js32.dll"\
- /implib:"$(OUTDIR)/js32.lib" /opt:ref /opt:noicf
-LINK32_OBJS= \
-	"$(INTDIR)\jsapi.obj" \
-	"$(INTDIR)\jsarena.obj" \
-	"$(INTDIR)\jsarray.obj" \
-	"$(INTDIR)\jsatom.obj" \
-	"$(INTDIR)\jsbool.obj" \
-	"$(INTDIR)\jscntxt.obj" \
-	"$(INTDIR)\jsdate.obj" \
-	"$(INTDIR)\jsdbgapi.obj" \
-	"$(INTDIR)\jsdhash.obj" \
-	"$(INTDIR)\jsdtoa.obj" \
-	"$(INTDIR)\jsemit.obj" \
-	"$(INTDIR)\jsexn.obj" \
-	"$(INTDIR)\jsfun.obj" \
-	"$(INTDIR)\jsgc.obj" \
-	"$(INTDIR)\jshash.obj" \
-	"$(INTDIR)\jsinterp.obj" \
-	"$(INTDIR)\jslock.obj" \
-	"$(INTDIR)\jslog2.obj" \
-	"$(INTDIR)\jslong.obj" \
-	"$(INTDIR)\jsmath.obj" \
-	"$(INTDIR)\jsnum.obj" \
-	"$(INTDIR)\jsobj.obj" \
-	"$(INTDIR)\jsopcode.obj" \
-	"$(INTDIR)\jsparse.obj" \
-	"$(INTDIR)\jsprf.obj" \
-	"$(INTDIR)\jsregexp.obj" \
-	"$(INTDIR)\jsscan.obj" \
-	"$(INTDIR)\jsscope.obj" \
-	"$(INTDIR)\jsscript.obj" \
-	"$(INTDIR)\jsstr.obj" \
-	"$(INTDIR)\jsutil.obj" \
-	"$(INTDIR)\jsxdrapi.obj" \
-	"$(INTDIR)\prmjtime.obj" \
-	"$(OUTDIR)\fdlibm.lib"
-
-"$(OUTDIR)\js32.dll" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
-    $(LINK32) @<<
-  $(LINK32_FLAGS) $(LINK32_OBJS)
-<<
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-# PROP BASE Use_MFC 0
-# PROP BASE Use_Debug_Libraries 1
-# PROP BASE Output_Dir "js___Wi2"
-# PROP BASE Intermediate_Dir "js___Wi2"
-# PROP BASE Target_Dir ""
-# PROP Use_MFC 0
-# PROP Use_Debug_Libraries 1
-# PROP Output_Dir "Debug"
-# PROP Intermediate_Dir "Debug"
-# PROP Target_Dir ""
-OUTDIR=.\Debug
-INTDIR=.\Debug
-
-ALL : "fdlibm - Win32 Debug" "$(OUTDIR)\js32.dll"
-
-CLEAN : 
-	-@erase "$(INTDIR)\jsapi.obj"
-	-@erase "$(INTDIR)\jsarena.obj"
-	-@erase "$(INTDIR)\jsarray.obj"
-	-@erase "$(INTDIR)\jsatom.obj"
-	-@erase "$(INTDIR)\jsbool.obj"
-	-@erase "$(INTDIR)\jscntxt.obj"
-	-@erase "$(INTDIR)\jsdate.obj"
-	-@erase "$(INTDIR)\jsdbgapi.obj"
-	-@erase "$(INTDIR)\jsdhash.obj"
-	-@erase "$(INTDIR)\jsdtoa.obj"
-	-@erase "$(INTDIR)\jsemit.obj"
-	-@erase "$(INTDIR)\jsexn.obj"
-	-@erase "$(INTDIR)\jsfun.obj"
-	-@erase "$(INTDIR)\jsgc.obj"
-	-@erase "$(INTDIR)\jshash.obj"
-	-@erase "$(INTDIR)\jsinterp.obj"
-	-@erase "$(INTDIR)\jslock.obj"
-	-@erase "$(INTDIR)\jslog2.obj"
-	-@erase "$(INTDIR)\jslong.obj"
-	-@erase "$(INTDIR)\jsmath.obj"
-	-@erase "$(INTDIR)\jsnum.obj"
-	-@erase "$(INTDIR)\jsobj.obj"
-	-@erase "$(INTDIR)\jsopcode.obj"
-	-@erase "$(INTDIR)\jsparse.obj"
-	-@erase "$(INTDIR)\jsprf.obj"
-	-@erase "$(INTDIR)\jsregexp.obj"
-	-@erase "$(INTDIR)\jsscan.obj"
-	-@erase "$(INTDIR)\jsscope.obj"
-	-@erase "$(INTDIR)\jsscript.obj"
-	-@erase "$(INTDIR)\jsstr.obj"
-	-@erase "$(INTDIR)\jsutil.obj"
-	-@erase "$(INTDIR)\jsxdrapi.obj"
-	-@erase "$(INTDIR)\prmjtime.obj"
-	-@erase "$(INTDIR)\vc40.idb"
-	-@erase "$(INTDIR)\vc40.pdb"
-	-@erase "$(OUTDIR)\js32.dll"
-	-@erase "$(OUTDIR)\js32.exp"
-	-@erase "$(OUTDIR)\js32.ilk"
-	-@erase "$(OUTDIR)\js32.lib"
-	-@erase "$(OUTDIR)\js32.pdb"
-
-"$(OUTDIR)" :
-    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
-
-CPP=cl.exe
-# ADD BASE CPP /nologo /MTd /W3 /Gm /GX /Zi /Od /D "WIN32" /D "_DEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
-# ADD CPP /nologo /MDd /W3 /Gm /GX /Zi /Od /D "_DEBUG" /D "DEBUG" /D _X86_=1 /D "_WINDOWS" /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /YX /c
-CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "_DEBUG" /D "DEBUG" /D _X86_=1 /D "_WINDOWS"\
- /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /Fp"$(INTDIR)/js.pch" /YX\
- /Fo"$(INTDIR)/" /Fd"$(INTDIR)/" /c 
-CPP_OBJS=.\Debug/
-CPP_SBRS=.\.
-
-.c{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.c{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-MTL=mktyplib.exe
-# ADD BASE MTL /nologo /D "_DEBUG" /win32
-# ADD MTL /nologo /D "_DEBUG" /win32
-MTL_PROJ=/nologo /D "_DEBUG" /win32 
-RSC=rc.exe
-# ADD BASE RSC /l 0x409 /d "_DEBUG"
-# ADD RSC /l 0x409 /d "_DEBUG"
-BSC32=bscmake.exe
-# ADD BASE BSC32 /nologo
-# ADD BSC32 /nologo
-BSC32_FLAGS=/nologo /o"$(OUTDIR)/js.bsc" 
-BSC32_SBRS= \
-	
-LINK32=link.exe
-# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /debug /machine:I386
-# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /debug /machine:I386 /out:"Debug/js32.dll"
-# SUBTRACT LINK32 /nodefaultlib
-LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
- advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
- odbccp32.lib /nologo /subsystem:windows /dll /incremental:yes\
- /pdb:"$(OUTDIR)/js32.pdb" /debug /machine:I386 /out:"$(OUTDIR)/js32.dll"\
- /implib:"$(OUTDIR)/js32.lib" 
-LINK32_OBJS= \
-	"$(INTDIR)\jsapi.obj" \
-	"$(INTDIR)\jsarena.obj" \
-	"$(INTDIR)\jsarray.obj" \
-	"$(INTDIR)\jsatom.obj" \
-	"$(INTDIR)\jsbool.obj" \
-	"$(INTDIR)\jscntxt.obj" \
-	"$(INTDIR)\jsdate.obj" \
-	"$(INTDIR)\jsdbgapi.obj" \
-	"$(INTDIR)\jsdhash.obj" \
-	"$(INTDIR)\jsdtoa.obj" \
-	"$(INTDIR)\jsemit.obj" \
-	"$(INTDIR)\jsexn.obj" \
-	"$(INTDIR)\jsfun.obj" \
-	"$(INTDIR)\jsgc.obj" \
-	"$(INTDIR)\jshash.obj" \
-	"$(INTDIR)\jsinterp.obj" \
-	"$(INTDIR)\jslock.obj" \
-	"$(INTDIR)\jslog2.obj" \
-	"$(INTDIR)\jslong.obj" \
-	"$(INTDIR)\jsmath.obj" \
-	"$(INTDIR)\jsnum.obj" \
-	"$(INTDIR)\jsobj.obj" \
-	"$(INTDIR)\jsopcode.obj" \
-	"$(INTDIR)\jsparse.obj" \
-	"$(INTDIR)\jsprf.obj" \
-	"$(INTDIR)\jsregexp.obj" \
-	"$(INTDIR)\jsscan.obj" \
-	"$(INTDIR)\jsscope.obj" \
-	"$(INTDIR)\jsscript.obj" \
-	"$(INTDIR)\jsstr.obj" \
-	"$(INTDIR)\jsutil.obj" \
-	"$(INTDIR)\jsxdrapi.obj" \
-	"$(INTDIR)\prmjtime.obj" \
-	"$(OUTDIR)\fdlibm.lib"
-
-"$(OUTDIR)\js32.dll" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
-    $(LINK32) @<<
-  $(LINK32_FLAGS) $(LINK32_OBJS)
-<<
-
-!ELSEIF  "$(CFG)" == "jsshell - Win32 Release"
-
-# PROP BASE Use_MFC 0
-# PROP BASE Use_Debug_Libraries 0
-# PROP BASE Output_Dir "jsshell\Release"
-# PROP BASE Intermediate_Dir "jsshell\Release"
-# PROP BASE Target_Dir "jsshell"
-# PROP Use_MFC 0
-# PROP Use_Debug_Libraries 0
-# PROP Output_Dir "Release"
-# PROP Intermediate_Dir "Release"
-# PROP Target_Dir "jsshell"
-OUTDIR=.\Release
-INTDIR=.\Release
-
-ALL : "js - Win32 Release" "$(OUTDIR)\jsshell.exe"
-
-CLEAN : 
-	-@erase "$(INTDIR)\js.obj"
-	-@erase "$(OUTDIR)\jsshell.exe"
-
-"$(OUTDIR)" :
-    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
-
-CPP=cl.exe
-# ADD BASE CPP /nologo /W3 /GX /O2 /D "WIN32" /D "NDEBUG" /D "_CONSOLE" /YX /c
-# ADD CPP /nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "_CONSOLE" /D "WIN32" /D "XP_WIN" /D "JSFILE" /YX /c
-CPP_PROJ=/nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "_CONSOLE" /D "WIN32" /D\
- "XP_WIN" /D "JSFILE" /Fp"$(INTDIR)/jsshell.pch" /YX /Fo"$(INTDIR)/" /c 
-CPP_OBJS=.\Release/
-CPP_SBRS=.\.
-
-.c{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.c{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-RSC=rc.exe
-# ADD BASE RSC /l 0x409 /d "NDEBUG"
-# ADD RSC /l 0x409 /d "NDEBUG"
-BSC32=bscmake.exe
-# ADD BASE BSC32 /nologo
-# ADD BSC32 /nologo
-BSC32_FLAGS=/nologo /o"$(OUTDIR)/jsshell.bsc" 
-BSC32_SBRS= \
-	
-LINK32=link.exe
-# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /machine:I386
-# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /machine:I386
-LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
- advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
- odbccp32.lib /nologo /subsystem:console /incremental:no\
- /pdb:"$(OUTDIR)/jsshell.pdb" /machine:I386 /out:"$(OUTDIR)/jsshell.exe" 
-LINK32_OBJS= \
-	"$(INTDIR)\js.obj" \
-	"$(OUTDIR)\js32.lib"
-
-"$(OUTDIR)\jsshell.exe" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
-    $(LINK32) @<<
-  $(LINK32_FLAGS) $(LINK32_OBJS)
-<<
-
-!ELSEIF  "$(CFG)" == "jsshell - Win32 Debug"
-
-# PROP BASE Use_MFC 0
-# PROP BASE Use_Debug_Libraries 1
-# PROP BASE Output_Dir "jsshell\jsshell_"
-# PROP BASE Intermediate_Dir "jsshell\jsshell_"
-# PROP BASE Target_Dir "jsshell"
-# PROP Use_MFC 0
-# PROP Use_Debug_Libraries 1
-# PROP Output_Dir "Debug"
-# PROP Intermediate_Dir "Debug"
-# PROP Target_Dir "jsshell"
-OUTDIR=.\Debug
-INTDIR=.\Debug
-
-ALL : "js - Win32 Debug" "$(OUTDIR)\jsshell.exe"
-
-CLEAN : 
-	-@erase "$(INTDIR)\js.obj"
-	-@erase "$(INTDIR)\vc40.idb"
-	-@erase "$(INTDIR)\vc40.pdb"
-	-@erase "$(OUTDIR)\jsshell.exe"
-	-@erase "$(OUTDIR)\jsshell.ilk"
-	-@erase "$(OUTDIR)\jsshell.pdb"
-
-"$(OUTDIR)" :
-    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
-
-CPP=cl.exe
-# ADD BASE CPP /nologo /W3 /Gm /GX /Zi /Od /D "WIN32" /D "_DEBUG" /D "_CONSOLE" /YX /c
-# ADD CPP /nologo /MDd /W3 /Gm /GX /Zi /Od /D "_CONSOLE" /D "_DEBUG" /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "DEBUG" /YX /c
-CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "_CONSOLE" /D "_DEBUG" /D "WIN32"\
- /D "XP_WIN" /D "JSFILE" /D "DEBUG" /Fp"$(INTDIR)/jsshell.pch" /YX\
- /Fo"$(INTDIR)/" /Fd"$(INTDIR)/" /c 
-CPP_OBJS=.\Debug/
-CPP_SBRS=.\.
-
-.c{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.c{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-RSC=rc.exe
-# ADD BASE RSC /l 0x409 /d "_DEBUG"
-# ADD RSC /l 0x409 /d "_DEBUG"
-BSC32=bscmake.exe
-# ADD BASE BSC32 /nologo
-# ADD BSC32 /nologo
-BSC32_FLAGS=/nologo /o"$(OUTDIR)/jsshell.bsc" 
-BSC32_SBRS= \
-	
-LINK32=link.exe
-# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /debug /machine:I386
-# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /debug /machine:I386
-LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
- advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
- odbccp32.lib /nologo /subsystem:console /incremental:yes\
- /pdb:"$(OUTDIR)/jsshell.pdb" /debug /machine:I386 /out:"$(OUTDIR)/jsshell.exe" 
-LINK32_OBJS= \
-	"$(INTDIR)\js.obj" \
-	"$(OUTDIR)\js32.lib"
-
-"$(OUTDIR)\jsshell.exe" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
-    $(LINK32) @<<
-  $(LINK32_FLAGS) $(LINK32_OBJS)
-<<
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Release"
-
-# PROP BASE Use_MFC 0
-# PROP BASE Use_Debug_Libraries 0
-# PROP BASE Output_Dir "fdlibm\Release"
-# PROP BASE Intermediate_Dir "fdlibm\Release"
-# PROP BASE Target_Dir "fdlibm"
-# PROP Use_MFC 0
-# PROP Use_Debug_Libraries 0
-# PROP Output_Dir "Release"
-# PROP Intermediate_Dir "Release"
-# PROP Target_Dir "fdlibm"
-OUTDIR=.\Release
-INTDIR=.\Release
-
-ALL : "$(OUTDIR)\fdlibm.lib"
-
-CLEAN : 
-	-@erase "$(INTDIR)\e_atan2.obj"
-	-@erase "$(INTDIR)\e_pow.obj"
-	-@erase "$(INTDIR)\e_sqrt.obj"
-	-@erase "$(INTDIR)\k_standard.obj"
-	-@erase "$(INTDIR)\s_atan.obj"
-	-@erase "$(INTDIR)\s_copysign.obj"
-	-@erase "$(INTDIR)\s_fabs.obj"
-	-@erase "$(INTDIR)\s_finite.obj"
-	-@erase "$(INTDIR)\s_isnan.obj"
-	-@erase "$(INTDIR)\s_matherr.obj"
-	-@erase "$(INTDIR)\s_rint.obj"
-	-@erase "$(INTDIR)\s_scalbn.obj"
-	-@erase "$(INTDIR)\w_atan2.obj"
-	-@erase "$(INTDIR)\w_pow.obj"
-	-@erase "$(INTDIR)\w_sqrt.obj"
-	-@erase "$(OUTDIR)\fdlibm.lib"
-
-"$(OUTDIR)" :
-    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
-
-CPP=cl.exe
-# ADD BASE CPP /nologo /W3 /GX /O2 /D "WIN32" /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
-# ADD CPP /nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D "_IEEE_LIBM" /YX /c
-CPP_PROJ=/nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D\
- "_IEEE_LIBM" /D "XP_WIN" /I .\ /Fp"$(INTDIR)/fdlibm.pch" /YX /Fo"$(INTDIR)/" /c 
-CPP_OBJS=.\Release/
-CPP_SBRS=.\.
-
-.c{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.c{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-BSC32=bscmake.exe
-# ADD BASE BSC32 /nologo
-# ADD BSC32 /nologo
-BSC32_FLAGS=/nologo /o"$(OUTDIR)/fdlibm.bsc" 
-BSC32_SBRS= \
-	
-LIB32=link.exe -lib
-# ADD BASE LIB32 /nologo
-# ADD LIB32 /nologo
-LIB32_FLAGS=/nologo /out:"$(OUTDIR)/fdlibm.lib" 
-LIB32_OBJS= \
-	"$(INTDIR)\e_atan2.obj" \
-	"$(INTDIR)\e_pow.obj" \
-	"$(INTDIR)\e_sqrt.obj" \
-	"$(INTDIR)\k_standard.obj" \
-	"$(INTDIR)\s_atan.obj" \
-	"$(INTDIR)\s_copysign.obj" \
-	"$(INTDIR)\s_fabs.obj" \
-	"$(INTDIR)\s_finite.obj" \
-	"$(INTDIR)\s_isnan.obj" \
-	"$(INTDIR)\s_matherr.obj" \
-	"$(INTDIR)\s_rint.obj" \
-	"$(INTDIR)\s_scalbn.obj" \
-	"$(INTDIR)\w_atan2.obj" \
-	"$(INTDIR)\w_pow.obj" \
-	"$(INTDIR)\w_sqrt.obj"
-
-"$(OUTDIR)\fdlibm.lib" : "$(OUTDIR)" $(DEF_FILE) $(LIB32_OBJS)
-    $(LIB32) @<<
-  $(LIB32_FLAGS) $(DEF_FLAGS) $(LIB32_OBJS)
-<<
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-# PROP BASE Use_MFC 0
-# PROP BASE Use_Debug_Libraries 1
-# PROP BASE Output_Dir "fdlibm\Debug"
-# PROP BASE Intermediate_Dir "fdlibm\Debug"
-# PROP BASE Target_Dir "fdlibm"
-# PROP Use_MFC 0
-# PROP Use_Debug_Libraries 1
-# PROP Output_Dir "Debug"
-# PROP Intermediate_Dir "Debug"
-# PROP Target_Dir "fdlibm"
-OUTDIR=.\Debug
-INTDIR=.\Debug
-
-ALL : "$(OUTDIR)\fdlibm.lib"
-
-CLEAN : 
-	-@erase "$(INTDIR)\e_atan2.obj"
-	-@erase "$(INTDIR)\e_pow.obj"
-	-@erase "$(INTDIR)\e_sqrt.obj"
-	-@erase "$(INTDIR)\k_standard.obj"
-	-@erase "$(INTDIR)\s_atan.obj"
-	-@erase "$(INTDIR)\s_copysign.obj"
-	-@erase "$(INTDIR)\s_fabs.obj"
-	-@erase "$(INTDIR)\s_finite.obj"
-	-@erase "$(INTDIR)\s_isnan.obj"
-	-@erase "$(INTDIR)\s_matherr.obj"
-	-@erase "$(INTDIR)\s_rint.obj"
-	-@erase "$(INTDIR)\s_scalbn.obj"
-	-@erase "$(INTDIR)\w_atan2.obj"
-	-@erase "$(INTDIR)\w_pow.obj"
-	-@erase "$(INTDIR)\w_sqrt.obj"
-	-@erase "$(OUTDIR)\fdlibm.lib"
-
-"$(OUTDIR)" :
-    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
-
-CPP=cl.exe
-# ADD BASE CPP /nologo /W3 /GX /Z7 /Od /D "WIN32" /D "_DEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
-# ADD CPP /nologo /MDd /W3 /GX /Z7 /Od /D "_DEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D "_IEEE_LIBM" /YX /c
-CPP_PROJ=/nologo /MDd /W3 /GX /Z7 /Od /D "_DEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D\
- "_IEEE_LIBM" /D "XP_WIN" -I .\ /Fp"$(INTDIR)/fdlibm.pch" /YX /Fo"$(INTDIR)/" /c 
-CPP_OBJS=.\Debug/
-CPP_SBRS=.\.
-
-.c{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_OBJS)}.obj:
-   $(CPP) $(CPP_PROJ) $<  
-
-.c{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cpp{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-.cxx{$(CPP_SBRS)}.sbr:
-   $(CPP) $(CPP_PROJ) $<  
-
-BSC32=bscmake.exe
-# ADD BASE BSC32 /nologo
-# ADD BSC32 /nologo
-BSC32_FLAGS=/nologo /o"$(OUTDIR)/fdlibm.bsc" 
-BSC32_SBRS= \
-	
-LIB32=link.exe -lib
-# ADD BASE LIB32 /nologo
-# ADD LIB32 /nologo
-LIB32_FLAGS=/nologo /out:"$(OUTDIR)/fdlibm.lib" 
-LIB32_OBJS= \
-	"$(INTDIR)\e_atan2.obj" \
-	"$(INTDIR)\e_pow.obj" \
-	"$(INTDIR)\e_sqrt.obj" \
-	"$(INTDIR)\k_standard.obj" \
-	"$(INTDIR)\s_atan.obj" \
-	"$(INTDIR)\s_copysign.obj" \
-	"$(INTDIR)\s_fabs.obj" \
-	"$(INTDIR)\s_finite.obj" \
-	"$(INTDIR)\s_isnan.obj" \
-	"$(INTDIR)\s_matherr.obj" \
-	"$(INTDIR)\s_rint.obj" \
-	"$(INTDIR)\s_scalbn.obj" \
-	"$(INTDIR)\w_atan2.obj" \
-	"$(INTDIR)\w_pow.obj" \
-	"$(INTDIR)\w_sqrt.obj"
-
-"$(OUTDIR)\fdlibm.lib" : "$(OUTDIR)" $(DEF_FILE) $(LIB32_OBJS)
-    $(LIB32) @<<
-  $(LIB32_FLAGS) $(DEF_FLAGS) $(LIB32_OBJS)
-<<
-
-!ENDIF 
-
-################################################################################
-# Begin Target
-
-# Name "js - Win32 Release"
-# Name "js - Win32 Debug"
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-!ENDIF 
-
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsapi.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSAPI=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsbool.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdate.h"\
-	".\jsemit.h"\
-	".\jsexn.h"\
-	".\jsfile.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsmath.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsparse.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSAPI=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsapi.obj" : $(SOURCE) $(DEP_CPP_JSAPI) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSAPI=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsbool.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdate.h"\
-	".\jsemit.h"\
-	".\jsexn.h"\
-	".\jsfile.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsmath.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsparse.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSAPI=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsapi.obj" : $(SOURCE) $(DEP_CPP_JSAPI) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsarena.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSARE=\
-	".\jsarena.h"\
-	".\jsbit.h"\
-	".\jscompat.h"\
-	".\jscpucfg.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsstddef.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSARE=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jsarena.obj" : $(SOURCE) $(DEP_CPP_JSARE) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSARE=\
-	".\jsarena.h"\
-	".\jsbit.h"\
-	".\jscompat.h"\
-	".\jscpucfg.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsstddef.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSARE=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jsarena.obj" : $(SOURCE) $(DEP_CPP_JSARE) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsarray.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSARR=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSARR=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsarray.obj" : $(SOURCE) $(DEP_CPP_JSARR) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSARR=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSARR=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsarray.obj" : $(SOURCE) $(DEP_CPP_JSARR) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsatom.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSATO=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSATO=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsatom.obj" : $(SOURCE) $(DEP_CPP_JSATO) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSATO=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSATO=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsatom.obj" : $(SOURCE) $(DEP_CPP_JSATO) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsbool.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSBOO=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsbool.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSBOO=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsbool.obj" : $(SOURCE) $(DEP_CPP_JSBOO) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSBOO=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsbool.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSBOO=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsbool.obj" : $(SOURCE) $(DEP_CPP_JSBOO) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jscntxt.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSCNT=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsexn.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSCNT=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jscntxt.obj" : $(SOURCE) $(DEP_CPP_JSCNT) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSCNT=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsexn.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSCNT=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jscntxt.obj" : $(SOURCE) $(DEP_CPP_JSCNT) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsdate.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSDAT=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdate.h"\
-	".\jsdtoa.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\prmjtime.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSDAT=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsdate.obj" : $(SOURCE) $(DEP_CPP_JSDAT) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSDAT=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdate.h"\
-	".\jsdtoa.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\prmjtime.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSDAT=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsdate.obj" : $(SOURCE) $(DEP_CPP_JSDAT) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsdbgapi.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSDBG=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSDBG=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsdbgapi.obj" : $(SOURCE) $(DEP_CPP_JSDBG) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSDBG=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSDBG=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsdbgapi.obj" : $(SOURCE) $(DEP_CPP_JSDBG) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsdhash.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSDHA=\
-	".\jsbit.h"\
-	".\jscompat.h"\
-	".\jscpucfg.h"\
-	".\jsdhash.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSDHA=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jsdhash.obj" : $(SOURCE) $(DEP_CPP_JSDHA) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSDHA=\
-	".\jsbit.h"\
-	".\jscompat.h"\
-	".\jscpucfg.h"\
-	".\jsdhash.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSDHA=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jsdhash.obj" : $(SOURCE) $(DEP_CPP_JSDHA) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsdtoa.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSDTO=\
-	".\jscompat.h"\
-	".\jscpucfg.h"\
-	".\jsdtoa.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsstddef.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSDTO=\
-	".\jsautocfg.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsdtoa.obj" : $(SOURCE) $(DEP_CPP_JSDTO) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSDTO=\
-	".\jscompat.h"\
-	".\jscpucfg.h"\
-	".\jsdtoa.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsstddef.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSDTO=\
-	".\jsautocfg.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsdtoa.obj" : $(SOURCE) $(DEP_CPP_JSDTO) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsemit.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSEMI=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsemit.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsparse.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSEMI=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsemit.obj" : $(SOURCE) $(DEP_CPP_JSEMI) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSEMI=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsemit.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsparse.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSEMI=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsemit.obj" : $(SOURCE) $(DEP_CPP_JSEMI) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsexn.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSEXN=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsexn.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSEXN=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsexn.obj" : $(SOURCE) $(DEP_CPP_JSEXN) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSEXN=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsexn.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSEXN=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsexn.obj" : $(SOURCE) $(DEP_CPP_JSEXN) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsfun.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSFUN=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsparse.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\jsxdrapi.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSFUN=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsfun.obj" : $(SOURCE) $(DEP_CPP_JSFUN) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSFUN=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsparse.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\jsxdrapi.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSFUN=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsfun.obj" : $(SOURCE) $(DEP_CPP_JSFUN) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsgc.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSGC_=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSGC_=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsgc.obj" : $(SOURCE) $(DEP_CPP_JSGC_) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSGC_=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSGC_=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsgc.obj" : $(SOURCE) $(DEP_CPP_JSGC_) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jshash.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSHAS=\
-	".\jsbit.h"\
-	".\jscompat.h"\
-	".\jscpucfg.h"\
-	".\jshash.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSHAS=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jshash.obj" : $(SOURCE) $(DEP_CPP_JSHAS) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSHAS=\
-	".\jsbit.h"\
-	".\jscompat.h"\
-	".\jscpucfg.h"\
-	".\jshash.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSHAS=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jshash.obj" : $(SOURCE) $(DEP_CPP_JSHAS) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsinterp.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSINT=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsbool.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSINT=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsinterp.obj" : $(SOURCE) $(DEP_CPP_JSINT) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSINT=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsbool.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSINT=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsinterp.obj" : $(SOURCE) $(DEP_CPP_JSINT) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jslock.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSLOC=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSLOC=\
-	".\jsautocfg.h"\
-	".\pratom.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	".\prthread.h"\
-	
-
-"$(INTDIR)\jslock.obj" : $(SOURCE) $(DEP_CPP_JSLOC) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSLOC=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSLOC=\
-	".\jsautocfg.h"\
-	".\pratom.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	".\prthread.h"\
-	
-
-"$(INTDIR)\jslock.obj" : $(SOURCE) $(DEP_CPP_JSLOC) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jslog2.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSLOG=\
-	".\jsbit.h"\
-	".\jscpucfg.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jstypes.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSLOG=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jslog2.obj" : $(SOURCE) $(DEP_CPP_JSLOG) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSLOG=\
-	".\jsbit.h"\
-	".\jscpucfg.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jstypes.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSLOG=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jslog2.obj" : $(SOURCE) $(DEP_CPP_JSLOG) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jslong.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSLON=\
-	".\jscpucfg.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jstypes.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSLON=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jslong.obj" : $(SOURCE) $(DEP_CPP_JSLON) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSLON=\
-	".\jscpucfg.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jstypes.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSLON=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jslong.obj" : $(SOURCE) $(DEP_CPP_JSLON) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsmath.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSMAT=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslibmath.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsmath.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\prmjtime.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSMAT=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsmath.obj" : $(SOURCE) $(DEP_CPP_JSMAT) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSMAT=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslibmath.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsmath.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\prmjtime.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSMAT=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsmath.obj" : $(SOURCE) $(DEP_CPP_JSMAT) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsnum.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSNUM=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdtoa.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSNUM=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsnum.obj" : $(SOURCE) $(DEP_CPP_JSNUM) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSNUM=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdtoa.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSNUM=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsnum.obj" : $(SOURCE) $(DEP_CPP_JSNUM) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsobj.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSOBJ=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsbool.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\jsxdrapi.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSOBJ=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsobj.obj" : $(SOURCE) $(DEP_CPP_JSOBJ) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSOBJ=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsbool.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\jsxdrapi.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSOBJ=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsobj.obj" : $(SOURCE) $(DEP_CPP_JSOBJ) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsopcode.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSOPC=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsdtoa.h"\
-	".\jsemit.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSOPC=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsopcode.obj" : $(SOURCE) $(DEP_CPP_JSOPC) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSOPC=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsdtoa.h"\
-	".\jsemit.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSOPC=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsopcode.obj" : $(SOURCE) $(DEP_CPP_JSOPC) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsparse.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSPAR=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsemit.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsparse.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSPAR=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsparse.obj" : $(SOURCE) $(DEP_CPP_JSPAR) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSPAR=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsemit.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsparse.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSPAR=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsparse.obj" : $(SOURCE) $(DEP_CPP_JSPAR) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsprf.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSPRF=\
-	".\jscpucfg.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSPRF=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jsprf.obj" : $(SOURCE) $(DEP_CPP_JSPRF) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSPRF=\
-	".\jscpucfg.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSPRF=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jsprf.obj" : $(SOURCE) $(DEP_CPP_JSPRF) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsregexp.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSREG=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\jsxdrapi.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSREG=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsregexp.obj" : $(SOURCE) $(DEP_CPP_JSREG) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSREG=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\jsxdrapi.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSREG=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsregexp.obj" : $(SOURCE) $(DEP_CPP_JSREG) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsscan.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSSCA=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdtoa.h"\
-	".\jsexn.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSSCA=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsscan.obj" : $(SOURCE) $(DEP_CPP_JSSCA) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSSCA=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdtoa.h"\
-	".\jsexn.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSSCA=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsscan.obj" : $(SOURCE) $(DEP_CPP_JSSCA) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsscope.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSSCO=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSSCO=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsscope.obj" : $(SOURCE) $(DEP_CPP_JSSCO) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSSCO=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSSCO=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsscope.obj" : $(SOURCE) $(DEP_CPP_JSSCO) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsscript.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSSCR=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsemit.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\jsxdrapi.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSSCR=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsscript.obj" : $(SOURCE) $(DEP_CPP_JSSCR) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSSCR=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsemit.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\jsxdrapi.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSSCR=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsscript.obj" : $(SOURCE) $(DEP_CPP_JSSCR) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsstr.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSSTR=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsbool.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSSTR=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsstr.obj" : $(SOURCE) $(DEP_CPP_JSSTR) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSSTR=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsarray.h"\
-	".\jsatom.h"\
-	".\jsbool.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsnum.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSSTR=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsstr.obj" : $(SOURCE) $(DEP_CPP_JSSTR) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsutil.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSUTI=\
-	".\jscpucfg.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSUTI=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jsutil.obj" : $(SOURCE) $(DEP_CPP_JSUTI) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSUTI=\
-	".\jscpucfg.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSUTI=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\jsutil.obj" : $(SOURCE) $(DEP_CPP_JSUTI) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\jsxdrapi.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_JSXDR=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\jsxdrapi.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSXDR=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsxdrapi.obj" : $(SOURCE) $(DEP_CPP_JSXDR) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_JSXDR=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscope.h"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	".\jsxdrapi.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JSXDR=\
-	".\jsautocfg.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\jsxdrapi.obj" : $(SOURCE) $(DEP_CPP_JSXDR) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\prmjtime.c
-
-!IF  "$(CFG)" == "js - Win32 Release"
-
-DEP_CPP_PRMJT=\
-	".\jscompat.h"\
-	".\jscpucfg.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jstypes.h"\
-	".\prmjtime.h"\
-	{$(INCLUDE)}"\sys\TIMEB.H"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_PRMJT=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\prmjtime.obj" : $(SOURCE) $(DEP_CPP_PRMJT) "$(INTDIR)"
-
-
-!ELSEIF  "$(CFG)" == "js - Win32 Debug"
-
-DEP_CPP_PRMJT=\
-	".\jscompat.h"\
-	".\jscpucfg.h"\
-	".\jslong.h"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsprf.h"\
-	".\jstypes.h"\
-	".\prmjtime.h"\
-	{$(INCLUDE)}"\sys\TIMEB.H"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_PRMJT=\
-	".\jsautocfg.h"\
-	
-
-"$(INTDIR)\prmjtime.obj" : $(SOURCE) $(DEP_CPP_PRMJT) "$(INTDIR)"
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Project Dependency
-
-# Project_Dep_Name "fdlibm"
-
-!IF  "$(CFG)" == "js - Win32 Debug"
-
-"fdlibm - Win32 Debug" : 
-   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="fdlibm - Win32 Debug" 
-
-!ELSEIF  "$(CFG)" == "js - Win32 Release"
-
-"fdlibm - Win32 Release" : 
-   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="fdlibm - Win32 Release" 
-
-!ENDIF 
-
-# End Project Dependency
-# End Target
-################################################################################
-# Begin Target
-
-# Name "jsshell - Win32 Release"
-# Name "jsshell - Win32 Debug"
-
-!IF  "$(CFG)" == "jsshell - Win32 Release"
-
-!ELSEIF  "$(CFG)" == "jsshell - Win32 Debug"
-
-!ENDIF 
-
-################################################################################
-# Begin Source File
-
-SOURCE=.\js.c
-DEP_CPP_JS_C42=\
-	".\js.msg"\
-	".\jsapi.h"\
-	".\jsarena.h"\
-	".\jsatom.h"\
-	".\jsclist.h"\
-	".\jscntxt.h"\
-	".\jscompat.h"\
-	".\jsconfig.h"\
-	".\jscpucfg.h"\
-	".\jsdbgapi.h"\
-	".\jsemit.h"\
-	".\jsfun.h"\
-	".\jsgc.h"\
-	".\jshash.h"\
-	".\jsinterp.h"\
-	".\jslock.h"\
-	".\jslong.h"\
-	".\jsobj.h"\
-	".\jsopcode.h"\
-	".\jsopcode.tbl"\
-	".\jsosdep.h"\
-	".\jsotypes.h"\
-	".\jsparse.h"\
-	".\jsprf.h"\
-	".\jsprvtd.h"\
-	".\jspubtd.h"\
-	".\jsregexp.h"\
-	".\jsscan.h"\
-	".\jsscope.h"\
-	".\jsscript.h"\
-	".\jsshell.msg"\
-	".\jsstddef.h"\
-	".\jsstr.h"\
-	".\jstypes.h"\
-	".\jsutil.h"\
-	{$(INCLUDE)}"\sys\types.h"\
-	
-NODEP_CPP_JS_C42=\
-	".\jsautocfg.h"\
-	".\jsdb.h"\
-	".\jsdebug.h"\
-	".\jsdjava.h"\
-	".\jsjava.h"\
-	".\jsperl.h"\
-	".\prcvar.h"\
-	".\prlock.h"\
-	
-
-"$(INTDIR)\js.obj" : $(SOURCE) $(DEP_CPP_JS_C42) "$(INTDIR)"
-
-
-# End Source File
-################################################################################
-# Begin Project Dependency
-
-# Project_Dep_Name "js"
-
-!IF  "$(CFG)" == "jsshell - Win32 Release"
-
-"js - Win32 Release" : 
-   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="js - Win32 Release" 
-
-!ELSEIF  "$(CFG)" == "jsshell - Win32 Debug"
-
-"js - Win32 Debug" : 
-   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="js - Win32 Debug" 
-
-!ENDIF 
-
-# End Project Dependency
-# End Target
-################################################################################
-# Begin Target
-
-# Name "fdlibm - Win32 Release"
-# Name "fdlibm - Win32 Debug"
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-!ENDIF 
-
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\w_atan2.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_W_ATA=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\w_atan2.obj" : $(SOURCE) $(DEP_CPP_W_ATA) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_W_ATA=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\w_atan2.obj" : $(SOURCE) $(DEP_CPP_W_ATA) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\s_copysign.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_S_COP=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_copysign.obj" : $(SOURCE) $(DEP_CPP_S_COP) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_S_COP=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_copysign.obj" : $(SOURCE) $(DEP_CPP_S_COP) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\w_pow.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_W_POW=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\w_pow.obj" : $(SOURCE) $(DEP_CPP_W_POW) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_W_POW=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\w_pow.obj" : $(SOURCE) $(DEP_CPP_W_POW) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\e_pow.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_E_POW=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\e_pow.obj" : $(SOURCE) $(DEP_CPP_E_POW) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_E_POW=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\e_pow.obj" : $(SOURCE) $(DEP_CPP_E_POW) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\k_standard.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_K_STA=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\k_standard.obj" : $(SOURCE) $(DEP_CPP_K_STA) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_K_STA=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\k_standard.obj" : $(SOURCE) $(DEP_CPP_K_STA) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\e_atan2.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_E_ATA=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\e_atan2.obj" : $(SOURCE) $(DEP_CPP_E_ATA) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_E_ATA=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\e_atan2.obj" : $(SOURCE) $(DEP_CPP_E_ATA) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\s_isnan.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_S_ISN=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_isnan.obj" : $(SOURCE) $(DEP_CPP_S_ISN) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_S_ISN=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_isnan.obj" : $(SOURCE) $(DEP_CPP_S_ISN) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\s_fabs.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_S_FAB=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_fabs.obj" : $(SOURCE) $(DEP_CPP_S_FAB) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_S_FAB=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_fabs.obj" : $(SOURCE) $(DEP_CPP_S_FAB) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\w_sqrt.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_W_SQR=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\w_sqrt.obj" : $(SOURCE) $(DEP_CPP_W_SQR) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_W_SQR=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\w_sqrt.obj" : $(SOURCE) $(DEP_CPP_W_SQR) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\s_scalbn.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_S_SCA=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_scalbn.obj" : $(SOURCE) $(DEP_CPP_S_SCA) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_S_SCA=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_scalbn.obj" : $(SOURCE) $(DEP_CPP_S_SCA) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\e_sqrt.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_E_SQR=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\e_sqrt.obj" : $(SOURCE) $(DEP_CPP_E_SQR) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_E_SQR=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\e_sqrt.obj" : $(SOURCE) $(DEP_CPP_E_SQR) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\s_rint.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_S_RIN=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_rint.obj" : $(SOURCE) $(DEP_CPP_S_RIN) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_S_RIN=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_rint.obj" : $(SOURCE) $(DEP_CPP_S_RIN) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\s_atan.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_S_ATA=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_atan.obj" : $(SOURCE) $(DEP_CPP_S_ATA) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_S_ATA=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_atan.obj" : $(SOURCE) $(DEP_CPP_S_ATA) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\s_finite.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_S_FIN=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_finite.obj" : $(SOURCE) $(DEP_CPP_S_FIN) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_S_FIN=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_finite.obj" : $(SOURCE) $(DEP_CPP_S_FIN) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-################################################################################
-# Begin Source File
-
-SOURCE=.\fdlibm\s_matherr.c
-
-!IF  "$(CFG)" == "fdlibm - Win32 Release"
-
-DEP_CPP_S_MAT=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_matherr.obj" : $(SOURCE) $(DEP_CPP_S_MAT) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
-
-DEP_CPP_S_MAT=\
-	".\fdlibm\fdlibm.h"\
-	
-
-"$(INTDIR)\s_matherr.obj" : $(SOURCE) $(DEP_CPP_S_MAT) "$(INTDIR)"
-   $(CPP) $(CPP_PROJ) $(SOURCE)
-
-
-!ENDIF 
-
-# End Source File
-# End Target
-# End Project
-################################################################################
+# Microsoft Developer Studio Generated NMAKE File, Format Version 4.20
+# ** DO NOT EDIT **
+
+# TARGTYPE "Win32 (x86) Console Application" 0x0103
+# TARGTYPE "Win32 (x86) Dynamic-Link Library" 0x0102
+# TARGTYPE "Win32 (x86) Static Library" 0x0104
+
+!IF "$(CFG)" == ""
+CFG=jsshell - Win32 Debug
+!MESSAGE No configuration specified.  Defaulting to jsshell - Win32 Debug.
+!ENDIF 
+
+!IF "$(CFG)" != "js - Win32 Release" && "$(CFG)" != "js - Win32 Debug" &&\
+ "$(CFG)" != "jsshell - Win32 Release" && "$(CFG)" != "jsshell - Win32 Debug" &&\
+ "$(CFG)" != "fdlibm - Win32 Release" && "$(CFG)" != "fdlibm - Win32 Debug"
+!MESSAGE Invalid configuration "$(CFG)" specified.
+!MESSAGE You can specify a configuration when running NMAKE on this makefile
+!MESSAGE by defining the macro CFG on the command line.  For example:
+!MESSAGE 
+!MESSAGE NMAKE /f "js.mak" CFG="jsshell - Win32 Debug"
+!MESSAGE 
+!MESSAGE Possible choices for configuration are:
+!MESSAGE 
+!MESSAGE "js - Win32 Release" (based on "Win32 (x86) Dynamic-Link Library")
+!MESSAGE "js - Win32 Debug" (based on "Win32 (x86) Dynamic-Link Library")
+!MESSAGE "jsshell - Win32 Release" (based on "Win32 (x86) Console Application")
+!MESSAGE "jsshell - Win32 Debug" (based on "Win32 (x86) Console Application")
+!MESSAGE "fdlibm - Win32 Release" (based on "Win32 (x86) Static Library")
+!MESSAGE "fdlibm - Win32 Debug" (based on "Win32 (x86) Static Library")
+!MESSAGE 
+!ERROR An invalid configuration is specified.
+!ENDIF 
+
+!IF "$(OS)" == "Windows_NT"
+NULL=
+!ELSE 
+NULL=nul
+!ENDIF 
+################################################################################
+# Begin Project
+# PROP Target_Last_Scanned "jsshell - Win32 Debug"
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 0
+# PROP BASE Output_Dir "js___Wi1"
+# PROP BASE Intermediate_Dir "js___Wi1"
+# PROP BASE Target_Dir ""
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 0
+# PROP Output_Dir "Release"
+# PROP Intermediate_Dir "Release"
+# PROP Target_Dir ""
+OUTDIR=.\Release
+INTDIR=.\Release
+
+ALL : "fdlibm - Win32 Release" "$(OUTDIR)\js32.dll"
+
+CLEAN : 
+	-@erase "$(INTDIR)\jsapi.obj"
+	-@erase "$(INTDIR)\jsarena.obj"
+	-@erase "$(INTDIR)\jsarray.obj"
+	-@erase "$(INTDIR)\jsatom.obj"
+	-@erase "$(INTDIR)\jsbool.obj"
+	-@erase "$(INTDIR)\jscntxt.obj"
+	-@erase "$(INTDIR)\jsdate.obj"
+	-@erase "$(INTDIR)\jsdbgapi.obj"
+	-@erase "$(INTDIR)\jsdhash.obj"
+	-@erase "$(INTDIR)\jsdtoa.obj"
+	-@erase "$(INTDIR)\jsemit.obj"
+	-@erase "$(INTDIR)\jsexn.obj"
+	-@erase "$(INTDIR)\jsfun.obj"
+	-@erase "$(INTDIR)\jsgc.obj"
+	-@erase "$(INTDIR)\jshash.obj"
+	-@erase "$(INTDIR)\jsinterp.obj"
+	-@erase "$(INTDIR)\jslock.obj"
+	-@erase "$(INTDIR)\jslog2.obj"
+	-@erase "$(INTDIR)\jslong.obj"
+	-@erase "$(INTDIR)\jsmath.obj"
+	-@erase "$(INTDIR)\jsnum.obj"
+	-@erase "$(INTDIR)\jsobj.obj"
+	-@erase "$(INTDIR)\jsopcode.obj"
+	-@erase "$(INTDIR)\jsparse.obj"
+	-@erase "$(INTDIR)\jsprf.obj"
+	-@erase "$(INTDIR)\jsregexp.obj"
+	-@erase "$(INTDIR)\jsscan.obj"
+	-@erase "$(INTDIR)\jsscope.obj"
+	-@erase "$(INTDIR)\jsscript.obj"
+	-@erase "$(INTDIR)\jsstr.obj"
+	-@erase "$(INTDIR)\jsutil.obj"
+	-@erase "$(INTDIR)\jsxdrapi.obj"
+	-@erase "$(INTDIR)\prmjtime.obj"
+	-@erase "$(INTDIR)\xsstaint.obj"
+	-@erase "$(OUTDIR)\js32.dll"
+	-@erase "$(OUTDIR)\js32.exp"
+	-@erase "$(OUTDIR)\js32.lib"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /MT /W3 /GX /O2 /D "WIN32" /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
+# ADD CPP /nologo /MD /W3 /GX /O2 /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /YX /c
+CPP_PROJ=/nologo /MD /W3 /GX /O2 /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /D "WIN32" /D\
+ "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /Fp"$(INTDIR)/js.pch" /YX\
+ /Fo"$(INTDIR)/" /c 
+CPP_OBJS=.\Release/
+CPP_OBJS2=.\xss
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+MTL=mktyplib.exe
+# ADD BASE MTL /nologo /D "NDEBUG" /win32
+# ADD MTL /nologo /D "NDEBUG" /win32
+MTL_PROJ=/nologo /D "NDEBUG" /win32 
+RSC=rc.exe
+# ADD BASE RSC /l 0x409 /d "NDEBUG"
+# ADD RSC /l 0x409 /d "NDEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/js.bsc" 
+BSC32_SBRS= \
+	
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /machine:I386
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /machine:I386 /out:"Release/js32.dll"
+# SUBTRACT LINK32 /nodefaultlib
+LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
+ advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
+ odbccp32.lib /nologo /subsystem:windows /dll /incremental:no\
+ /pdb:"$(OUTDIR)/js32.pdb" /machine:I386 /out:"$(OUTDIR)/js32.dll"\
+ /implib:"$(OUTDIR)/js32.lib" /opt:ref /opt:noicf
+LINK32_OBJS= \
+	"$(INTDIR)\jsapi.obj" \
+	"$(INTDIR)\jsarena.obj" \
+	"$(INTDIR)\jsarray.obj" \
+	"$(INTDIR)\jsatom.obj" \
+	"$(INTDIR)\jsbool.obj" \
+	"$(INTDIR)\jscntxt.obj" \
+	"$(INTDIR)\jsdate.obj" \
+	"$(INTDIR)\jsdbgapi.obj" \
+	"$(INTDIR)\jsdhash.obj" \
+	"$(INTDIR)\jsdtoa.obj" \
+	"$(INTDIR)\jsemit.obj" \
+	"$(INTDIR)\jsexn.obj" \
+	"$(INTDIR)\jsfun.obj" \
+	"$(INTDIR)\jsgc.obj" \
+	"$(INTDIR)\jshash.obj" \
+	"$(INTDIR)\jsinterp.obj" \
+	"$(INTDIR)\jslock.obj" \
+	"$(INTDIR)\jslog2.obj" \
+	"$(INTDIR)\jslong.obj" \
+	"$(INTDIR)\jsmath.obj" \
+	"$(INTDIR)\jsnum.obj" \
+	"$(INTDIR)\jsobj.obj" \
+	"$(INTDIR)\jsopcode.obj" \
+	"$(INTDIR)\jsparse.obj" \
+	"$(INTDIR)\jsprf.obj" \
+	"$(INTDIR)\jsregexp.obj" \
+	"$(INTDIR)\jsscan.obj" \
+	"$(INTDIR)\jsscope.obj" \
+	"$(INTDIR)\jsscript.obj" \
+	"$(INTDIR)\jsstr.obj" \
+	"$(INTDIR)\jsutil.obj" \
+	"$(INTDIR)\jsxdrapi.obj" \
+	"$(INTDIR)\prmjtime.obj" \
+	"$(INTDIR)\xsstaint.obj" \
+	"$(OUTDIR)\fdlibm.lib"
+
+"$(OUTDIR)\js32.dll" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 1
+# PROP BASE Output_Dir "js___Wi2"
+# PROP BASE Intermediate_Dir "js___Wi2"
+# PROP BASE Target_Dir ""
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 1
+# PROP Output_Dir "Debug"
+# PROP Intermediate_Dir "Debug"
+# PROP Target_Dir ""
+OUTDIR=.\Debug
+INTDIR=.\Debug
+
+ALL : "fdlibm - Win32 Debug" "$(OUTDIR)\js32.dll"
+
+CLEAN : 
+	-@erase "$(INTDIR)\jsapi.obj"
+	-@erase "$(INTDIR)\jsarena.obj"
+	-@erase "$(INTDIR)\jsarray.obj"
+	-@erase "$(INTDIR)\jsatom.obj"
+	-@erase "$(INTDIR)\jsbool.obj"
+	-@erase "$(INTDIR)\jscntxt.obj"
+	-@erase "$(INTDIR)\jsdate.obj"
+	-@erase "$(INTDIR)\jsdbgapi.obj"
+	-@erase "$(INTDIR)\jsdhash.obj"
+	-@erase "$(INTDIR)\jsdtoa.obj"
+	-@erase "$(INTDIR)\jsemit.obj"
+	-@erase "$(INTDIR)\jsexn.obj"
+	-@erase "$(INTDIR)\jsfun.obj"
+	-@erase "$(INTDIR)\jsgc.obj"
+	-@erase "$(INTDIR)\jshash.obj"
+	-@erase "$(INTDIR)\jsinterp.obj"
+	-@erase "$(INTDIR)\jslock.obj"
+	-@erase "$(INTDIR)\jslog2.obj"
+	-@erase "$(INTDIR)\jslong.obj"
+	-@erase "$(INTDIR)\jsmath.obj"
+	-@erase "$(INTDIR)\jsnum.obj"
+	-@erase "$(INTDIR)\jsobj.obj"
+	-@erase "$(INTDIR)\jsopcode.obj"
+	-@erase "$(INTDIR)\jsparse.obj"
+	-@erase "$(INTDIR)\jsprf.obj"
+	-@erase "$(INTDIR)\jsregexp.obj"
+	-@erase "$(INTDIR)\jsscan.obj"
+	-@erase "$(INTDIR)\jsscope.obj"
+	-@erase "$(INTDIR)\jsscript.obj"
+	-@erase "$(INTDIR)\jsstr.obj"
+	-@erase "$(INTDIR)\jsutil.obj"
+	-@erase "$(INTDIR)\jsxdrapi.obj"
+	-@erase "$(INTDIR)\prmjtime.obj"
+	-@erase "$(INTDIR)\xsstaint.obj"
+	-@erase "$(INTDIR)\vc40.idb"
+	-@erase "$(INTDIR)\vc40.pdb"
+	-@erase "$(OUTDIR)\js32.dll"
+	-@erase "$(OUTDIR)\js32.exp"
+	-@erase "$(OUTDIR)\js32.ilk"
+	-@erase "$(OUTDIR)\js32.lib"
+	-@erase "$(OUTDIR)\js32.pdb"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /MTd /W3 /Gm /GX /Zi /Od /D "WIN32" /D "_DEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
+# ADD CPP /nologo /MDd /W3 /Gm /GX /Zi /Od /D "_DEBUG" /D "DEBUG" /D _X86_=1 /D "_WINDOWS" /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /YX /c
+#CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "_DEBUG" /D "DEBUG" /D _X86_=1 /D "_WINDOWS"\
+#CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "XSS=1" /D "XSS_SHELL=1" /D "_DEBUG" /D "DEBUG" /D _X86_=1 /D "_WINDOWS"\
+CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "XSS=1" /D "XSS_SHELL=1" /D "XSS_DEBUG=1" /D "_DEBUG" /D "DEBUG" /D _X86_=1 /D "_WINDOWS"\
+ /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "EXPORT_JS_API" /Fp"$(INTDIR)/js.pch" /YX\
+ /Fo"$(INTDIR)/" /Fd"$(INTDIR)/" /c 
+CPP_OBJS=.\Debug/
+CPP_OBJS2=.\xss
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+{$(CPP_OBJS2)}.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+MTL=mktyplib.exe
+# ADD BASE MTL /nologo /D "_DEBUG" /win32
+# ADD MTL /nologo /D "_DEBUG" /win32
+MTL_PROJ=/nologo /D "_DEBUG" /win32 
+RSC=rc.exe
+# ADD BASE RSC /l 0x409 /d "_DEBUG"
+# ADD RSC /l 0x409 /d "_DEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/js.bsc" 
+BSC32_SBRS= \
+	
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /debug /machine:I386
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /dll /debug /machine:I386 /out:"Debug/js32.dll"
+# SUBTRACT LINK32 /nodefaultlib
+LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
+ advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
+ odbccp32.lib /nologo /subsystem:windows /dll /incremental:yes\
+ /pdb:"$(OUTDIR)/js32.pdb" /debug /machine:I386 /out:"$(OUTDIR)/js32.dll"\
+ /implib:"$(OUTDIR)/js32.lib" 
+LINK32_OBJS= \
+	"$(INTDIR)\jsapi.obj" \
+	"$(INTDIR)\jsarena.obj" \
+	"$(INTDIR)\jsarray.obj" \
+	"$(INTDIR)\jsatom.obj" \
+	"$(INTDIR)\jsbool.obj" \
+	"$(INTDIR)\jscntxt.obj" \
+	"$(INTDIR)\jsdate.obj" \
+	"$(INTDIR)\jsdbgapi.obj" \
+	"$(INTDIR)\jsdhash.obj" \
+	"$(INTDIR)\jsdtoa.obj" \
+	"$(INTDIR)\jsemit.obj" \
+	"$(INTDIR)\jsexn.obj" \
+	"$(INTDIR)\jsfun.obj" \
+	"$(INTDIR)\jsgc.obj" \
+	"$(INTDIR)\jshash.obj" \
+	"$(INTDIR)\jsinterp.obj" \
+	"$(INTDIR)\jslock.obj" \
+	"$(INTDIR)\jslog2.obj" \
+	"$(INTDIR)\jslong.obj" \
+	"$(INTDIR)\jsmath.obj" \
+	"$(INTDIR)\jsnum.obj" \
+	"$(INTDIR)\jsobj.obj" \
+	"$(INTDIR)\jsopcode.obj" \
+	"$(INTDIR)\jsparse.obj" \
+	"$(INTDIR)\jsprf.obj" \
+	"$(INTDIR)\jsregexp.obj" \
+	"$(INTDIR)\jsscan.obj" \
+	"$(INTDIR)\jsscope.obj" \
+	"$(INTDIR)\jsscript.obj" \
+	"$(INTDIR)\jsstr.obj" \
+	"$(INTDIR)\jsutil.obj" \
+	"$(INTDIR)\jsxdrapi.obj" \
+	"$(INTDIR)\prmjtime.obj" \
+	"$(INTDIR)\xsstaint.obj" \
+	"$(OUTDIR)\fdlibm.lib"
+
+"$(OUTDIR)\js32.dll" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "jsshell - Win32 Release"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 0
+# PROP BASE Output_Dir "jsshell\Release"
+# PROP BASE Intermediate_Dir "jsshell\Release"
+# PROP BASE Target_Dir "jsshell"
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 0
+# PROP Output_Dir "Release"
+# PROP Intermediate_Dir "Release"
+# PROP Target_Dir "jsshell"
+OUTDIR=.\Release
+INTDIR=.\Release
+
+ALL : "js - Win32 Release" "$(OUTDIR)\jsshell.exe"
+
+CLEAN : 
+	-@erase "$(INTDIR)\js.obj"
+	-@erase "$(OUTDIR)\jsshell.exe"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /W3 /GX /O2 /D "WIN32" /D "NDEBUG" /D "_CONSOLE" /YX /c
+# ADD CPP /nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "_CONSOLE" /D "WIN32" /D "XP_WIN" /D "JSFILE" /YX /c
+CPP_PROJ=/nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "_CONSOLE" /D "WIN32" /D\
+ "XP_WIN" /D "JSFILE" /Fp"$(INTDIR)/jsshell.pch" /YX /Fo"$(INTDIR)/" /c 
+CPP_OBJS=.\Release/
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+RSC=rc.exe
+# ADD BASE RSC /l 0x409 /d "NDEBUG"
+# ADD RSC /l 0x409 /d "NDEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/jsshell.bsc" 
+BSC32_SBRS= \
+	
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /machine:I386
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /machine:I386
+LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
+ advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
+ odbccp32.lib /nologo /subsystem:console /incremental:no\
+ /pdb:"$(OUTDIR)/jsshell.pdb" /machine:I386 /out:"$(OUTDIR)/jsshell.exe" 
+LINK32_OBJS= \
+	"$(INTDIR)\js.obj" \
+	"$(OUTDIR)\js32.lib"
+
+"$(OUTDIR)\jsshell.exe" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "jsshell - Win32 Debug"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 1
+# PROP BASE Output_Dir "jsshell\jsshell_"
+# PROP BASE Intermediate_Dir "jsshell\jsshell_"
+# PROP BASE Target_Dir "jsshell"
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 1
+# PROP Output_Dir "Debug"
+# PROP Intermediate_Dir "Debug"
+# PROP Target_Dir "jsshell"
+OUTDIR=.\Debug
+INTDIR=.\Debug
+
+ALL : "js - Win32 Debug" "$(OUTDIR)\jsshell.exe"
+
+CLEAN : 
+	-@erase "$(INTDIR)\js.obj"
+	-@erase "$(INTDIR)\vc40.idb"
+	-@erase "$(INTDIR)\vc40.pdb"
+	-@erase "$(OUTDIR)\jsshell.exe"
+	-@erase "$(OUTDIR)\jsshell.ilk"
+	-@erase "$(OUTDIR)\jsshell.pdb"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /W3 /Gm /GX /Zi /Od /D "WIN32" /D "_DEBUG" /D "_CONSOLE" /YX /c
+# ADD CPP /nologo /MDd /W3 /Gm /GX /Zi /Od /D "_CONSOLE" /D "_DEBUG" /D "WIN32" /D "XP_WIN" /D "JSFILE" /D "DEBUG" /YX /c
+#CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "_CONSOLE" /D "_DEBUG" /D "WIN32"\
+#CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "XSS=1" /D "XSS_SHELL=1" /D "_CONSOLE" /D "_DEBUG" /D "WIN32"\
+CPP_PROJ=/nologo /MDd /W3 /Gm /GX /Zi /Od /D "XSS=1" /D "XSS_SHELL=1" /D "XSS_DEBUG=1" /D "_CONSOLE" /D "_DEBUG" /D "WIN32"\
+ /D "XP_WIN" /D "JSFILE" /D "DEBUG" /Fp"$(INTDIR)/jsshell.pch" /YX\
+ /Fo"$(INTDIR)/" /Fd"$(INTDIR)/" /c 
+CPP_OBJS=.\Debug/
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+RSC=rc.exe
+# ADD BASE RSC /l 0x409 /d "_DEBUG"
+# ADD RSC /l 0x409 /d "_DEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/jsshell.bsc" 
+BSC32_SBRS= \
+	
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /debug /machine:I386
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /debug /machine:I386
+LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib\
+ advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib\
+ odbccp32.lib /nologo /subsystem:console /incremental:yes\
+ /pdb:"$(OUTDIR)/jsshell.pdb" /debug /machine:I386 /out:"$(OUTDIR)/jsshell.exe" 
+LINK32_OBJS= \
+	"$(INTDIR)\js.obj" \
+	"$(OUTDIR)\js32.lib"
+
+"$(OUTDIR)\jsshell.exe" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Release"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 0
+# PROP BASE Output_Dir "fdlibm\Release"
+# PROP BASE Intermediate_Dir "fdlibm\Release"
+# PROP BASE Target_Dir "fdlibm"
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 0
+# PROP Output_Dir "Release"
+# PROP Intermediate_Dir "Release"
+# PROP Target_Dir "fdlibm"
+OUTDIR=.\Release
+INTDIR=.\Release
+
+ALL : "$(OUTDIR)\fdlibm.lib"
+
+CLEAN : 
+	-@erase "$(INTDIR)\e_atan2.obj"
+	-@erase "$(INTDIR)\e_pow.obj"
+	-@erase "$(INTDIR)\e_sqrt.obj"
+	-@erase "$(INTDIR)\k_standard.obj"
+	-@erase "$(INTDIR)\s_atan.obj"
+	-@erase "$(INTDIR)\s_copysign.obj"
+	-@erase "$(INTDIR)\s_fabs.obj"
+	-@erase "$(INTDIR)\s_finite.obj"
+	-@erase "$(INTDIR)\s_isnan.obj"
+	-@erase "$(INTDIR)\s_matherr.obj"
+	-@erase "$(INTDIR)\s_rint.obj"
+	-@erase "$(INTDIR)\s_scalbn.obj"
+	-@erase "$(INTDIR)\w_atan2.obj"
+	-@erase "$(INTDIR)\w_pow.obj"
+	-@erase "$(INTDIR)\w_sqrt.obj"
+	-@erase "$(OUTDIR)\fdlibm.lib"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /W3 /GX /O2 /D "WIN32" /D "NDEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
+# ADD CPP /nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D "_IEEE_LIBM" /YX /c
+CPP_PROJ=/nologo /MD /W3 /GX /O2 /D "NDEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D\
+ "_IEEE_LIBM" /D "XP_WIN" /I .\ /Fp"$(INTDIR)/fdlibm.pch" /YX /Fo"$(INTDIR)/" /c 
+CPP_OBJS=.\Release/
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/fdlibm.bsc" 
+BSC32_SBRS= \
+	
+LIB32=link.exe -lib
+# ADD BASE LIB32 /nologo
+# ADD LIB32 /nologo
+LIB32_FLAGS=/nologo /out:"$(OUTDIR)/fdlibm.lib" 
+LIB32_OBJS= \
+	"$(INTDIR)\e_atan2.obj" \
+	"$(INTDIR)\e_pow.obj" \
+	"$(INTDIR)\e_sqrt.obj" \
+	"$(INTDIR)\k_standard.obj" \
+	"$(INTDIR)\s_atan.obj" \
+	"$(INTDIR)\s_copysign.obj" \
+	"$(INTDIR)\s_fabs.obj" \
+	"$(INTDIR)\s_finite.obj" \
+	"$(INTDIR)\s_isnan.obj" \
+	"$(INTDIR)\s_matherr.obj" \
+	"$(INTDIR)\s_rint.obj" \
+	"$(INTDIR)\s_scalbn.obj" \
+	"$(INTDIR)\w_atan2.obj" \
+	"$(INTDIR)\w_pow.obj" \
+	"$(INTDIR)\w_sqrt.obj"
+
+"$(OUTDIR)\fdlibm.lib" : "$(OUTDIR)" $(DEF_FILE) $(LIB32_OBJS)
+    $(LIB32) @<<
+  $(LIB32_FLAGS) $(DEF_FLAGS) $(LIB32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 1
+# PROP BASE Output_Dir "fdlibm\Debug"
+# PROP BASE Intermediate_Dir "fdlibm\Debug"
+# PROP BASE Target_Dir "fdlibm"
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 1
+# PROP Output_Dir "Debug"
+# PROP Intermediate_Dir "Debug"
+# PROP Target_Dir "fdlibm"
+OUTDIR=.\Debug
+INTDIR=.\Debug
+
+ALL : "$(OUTDIR)\fdlibm.lib"
+
+CLEAN : 
+	-@erase "$(INTDIR)\e_atan2.obj"
+	-@erase "$(INTDIR)\e_pow.obj"
+	-@erase "$(INTDIR)\e_sqrt.obj"
+	-@erase "$(INTDIR)\k_standard.obj"
+	-@erase "$(INTDIR)\s_atan.obj"
+	-@erase "$(INTDIR)\s_copysign.obj"
+	-@erase "$(INTDIR)\s_fabs.obj"
+	-@erase "$(INTDIR)\s_finite.obj"
+	-@erase "$(INTDIR)\s_isnan.obj"
+	-@erase "$(INTDIR)\s_matherr.obj"
+	-@erase "$(INTDIR)\s_rint.obj"
+	-@erase "$(INTDIR)\s_scalbn.obj"
+	-@erase "$(INTDIR)\w_atan2.obj"
+	-@erase "$(INTDIR)\w_pow.obj"
+	-@erase "$(INTDIR)\w_sqrt.obj"
+	-@erase "$(OUTDIR)\fdlibm.lib"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+# ADD BASE CPP /nologo /W3 /GX /Z7 /Od /D "WIN32" /D "_DEBUG" /D _X86_=1 /D "_WINDOWS" /YX /c
+# ADD CPP /nologo /MDd /W3 /GX /Z7 /Od /D "_DEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D "_IEEE_LIBM" /YX /c
+#CPP_PROJ=/nologo /MDd /W3 /GX /Z7 /Od /D "_DEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D\
+#CPP_PROJ=/nologo /MDd /W3 /GX /Z7 /Od /D "XSS=1" /D "XSS_SHELL=1" /D "_DEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D\
+CPP_PROJ=/nologo /MDd /W3 /GX /Z7 /Od /D "XSS=1" /D "XSS_SHELL=1" /D "XSS_DEBUG=1" /D "_DEBUG" /D "WIN32" /D _X86_=1 /D "_WINDOWS" /D\
+ "_IEEE_LIBM" /D "XP_WIN" -I .\ /Fp"$(INTDIR)/fdlibm.pch" /YX /Fo"$(INTDIR)/" /c 
+CPP_OBJS=.\Debug/
+CPP_SBRS=.\.
+
+.c{$(CPP_OBJS)}.obj: 
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_OBJS)}.obj:
+   $(CPP) $(CPP_PROJ) $<  
+
+.c{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cpp{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+.cxx{$(CPP_SBRS)}.sbr:
+   $(CPP) $(CPP_PROJ) $<  
+
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+BSC32_FLAGS=/nologo /o"$(OUTDIR)/fdlibm.bsc" 
+BSC32_SBRS= \
+	
+LIB32=link.exe -lib
+# ADD BASE LIB32 /nologo
+# ADD LIB32 /nologo
+LIB32_FLAGS=/nologo /out:"$(OUTDIR)/fdlibm.lib" 
+LIB32_OBJS= \
+	"$(INTDIR)\e_atan2.obj" \
+	"$(INTDIR)\e_pow.obj" \
+	"$(INTDIR)\e_sqrt.obj" \
+	"$(INTDIR)\k_standard.obj" \
+	"$(INTDIR)\s_atan.obj" \
+	"$(INTDIR)\s_copysign.obj" \
+	"$(INTDIR)\s_fabs.obj" \
+	"$(INTDIR)\s_finite.obj" \
+	"$(INTDIR)\s_isnan.obj" \
+	"$(INTDIR)\s_matherr.obj" \
+	"$(INTDIR)\s_rint.obj" \
+	"$(INTDIR)\s_scalbn.obj" \
+	"$(INTDIR)\w_atan2.obj" \
+	"$(INTDIR)\w_pow.obj" \
+	"$(INTDIR)\w_sqrt.obj"
+
+"$(OUTDIR)\fdlibm.lib" : "$(OUTDIR)" $(DEF_FILE) $(LIB32_OBJS)
+    $(LIB32) @<<
+  $(LIB32_FLAGS) $(DEF_FLAGS) $(LIB32_OBJS)
+<<
+
+!ENDIF 
+
+################################################################################
+# Begin Target
+
+# Name "js - Win32 Release"
+# Name "js - Win32 Debug"
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+!ENDIF 
+
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsapi.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSAPI=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdate.h"\
+	".\jsemit.h"\
+	".\jsexn.h"\
+	".\jsfile.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsmath.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSAPI=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsapi.obj" : $(SOURCE) $(DEP_CPP_JSAPI) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSAPI=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdate.h"\
+	".\jsemit.h"\
+	".\jsexn.h"\
+	".\jsfile.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsmath.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSAPI=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsapi.obj" : $(SOURCE) $(DEP_CPP_JSAPI) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsarena.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSARE=\
+	".\jsarena.h"\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsstddef.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSARE=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsarena.obj" : $(SOURCE) $(DEP_CPP_JSARE) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSARE=\
+	".\jsarena.h"\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsstddef.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSARE=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsarena.obj" : $(SOURCE) $(DEP_CPP_JSARE) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsarray.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSARR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSARR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsarray.obj" : $(SOURCE) $(DEP_CPP_JSARR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSARR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSARR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsarray.obj" : $(SOURCE) $(DEP_CPP_JSARR) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsatom.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSATO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSATO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsatom.obj" : $(SOURCE) $(DEP_CPP_JSATO) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSATO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSATO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsatom.obj" : $(SOURCE) $(DEP_CPP_JSATO) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsbool.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSBOO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSBOO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsbool.obj" : $(SOURCE) $(DEP_CPP_JSBOO) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSBOO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSBOO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsbool.obj" : $(SOURCE) $(DEP_CPP_JSBOO) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jscntxt.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSCNT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsexn.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSCNT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jscntxt.obj" : $(SOURCE) $(DEP_CPP_JSCNT) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSCNT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsexn.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSCNT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jscntxt.obj" : $(SOURCE) $(DEP_CPP_JSCNT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsdate.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSDAT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdate.h"\
+	".\jsdtoa.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\prmjtime.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDAT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdate.obj" : $(SOURCE) $(DEP_CPP_JSDAT) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSDAT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdate.h"\
+	".\jsdtoa.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\prmjtime.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDAT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdate.obj" : $(SOURCE) $(DEP_CPP_JSDAT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsdbgapi.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSDBG=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDBG=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdbgapi.obj" : $(SOURCE) $(DEP_CPP_JSDBG) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSDBG=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDBG=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdbgapi.obj" : $(SOURCE) $(DEP_CPP_JSDBG) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsdhash.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSDHA=\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jsdhash.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDHA=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsdhash.obj" : $(SOURCE) $(DEP_CPP_JSDHA) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSDHA=\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jsdhash.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDHA=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsdhash.obj" : $(SOURCE) $(DEP_CPP_JSDHA) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsdtoa.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSDTO=\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsstddef.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDTO=\
+	".\jsautocfg.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdtoa.obj" : $(SOURCE) $(DEP_CPP_JSDTO) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSDTO=\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsstddef.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSDTO=\
+	".\jsautocfg.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsdtoa.obj" : $(SOURCE) $(DEP_CPP_JSDTO) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsemit.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSEMI=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSEMI=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsemit.obj" : $(SOURCE) $(DEP_CPP_JSEMI) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSEMI=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSEMI=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsemit.obj" : $(SOURCE) $(DEP_CPP_JSEMI) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsexn.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSEXN=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsexn.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSEXN=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsexn.obj" : $(SOURCE) $(DEP_CPP_JSEXN) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSEXN=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsexn.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSEXN=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsexn.obj" : $(SOURCE) $(DEP_CPP_JSEXN) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsfun.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSFUN=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSFUN=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsfun.obj" : $(SOURCE) $(DEP_CPP_JSFUN) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSFUN=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSFUN=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsfun.obj" : $(SOURCE) $(DEP_CPP_JSFUN) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsgc.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSGC_=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xsstaint.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSGC_=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsgc.obj" : $(SOURCE) $(DEP_CPP_JSGC_) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSGC_=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xsstaint.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSGC_=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsgc.obj" : $(SOURCE) $(DEP_CPP_JSGC_) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jshash.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSHAS=\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jshash.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSHAS=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jshash.obj" : $(SOURCE) $(DEP_CPP_JSHAS) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSHAS=\
+	".\jsbit.h"\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jshash.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSHAS=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jshash.obj" : $(SOURCE) $(DEP_CPP_JSHAS) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\xsstaint.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_XSSTAINT=\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\jspubtd.h"\
+	".\jsapi.h"\
+	".\jsgc.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_XSSTAINT=\
+	".\jsautocfg.h"\
+	
+"$(INTDIR)\xsstaint.obj" : $(SOURCE) $(DEP_CPP_XSSTAINT) "$(INTDIR)"
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_XSSTAINT=\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\jspubtd.h"\
+	".\jsapi.h"\
+	".\jsgc.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_XSSTAINT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+"$(INTDIR)\xsstaint.obj" : $(SOURCE) $(DEP_CPP_XSSTAINT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsinterp.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSINT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSINT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsinterp.obj" : $(SOURCE) $(DEP_CPP_JSINT) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSINT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSINT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsinterp.obj" : $(SOURCE) $(DEP_CPP_JSINT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jslock.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSLOC=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLOC=\
+	".\jsautocfg.h"\
+	".\pratom.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	".\prthread.h"\
+	
+
+"$(INTDIR)\jslock.obj" : $(SOURCE) $(DEP_CPP_JSLOC) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSLOC=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLOC=\
+	".\jsautocfg.h"\
+	".\pratom.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	".\prthread.h"\
+	
+
+"$(INTDIR)\jslock.obj" : $(SOURCE) $(DEP_CPP_JSLOC) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jslog2.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSLOG=\
+	".\jsbit.h"\
+	".\jscpucfg.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLOG=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jslog2.obj" : $(SOURCE) $(DEP_CPP_JSLOG) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSLOG=\
+	".\jsbit.h"\
+	".\jscpucfg.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLOG=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jslog2.obj" : $(SOURCE) $(DEP_CPP_JSLOG) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jslong.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSLON=\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLON=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jslong.obj" : $(SOURCE) $(DEP_CPP_JSLON) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSLON=\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jstypes.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSLON=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jslong.obj" : $(SOURCE) $(DEP_CPP_JSLON) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsmath.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSMAT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslibmath.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsmath.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\prmjtime.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSMAT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsmath.obj" : $(SOURCE) $(DEP_CPP_JSMAT) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSMAT=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslibmath.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsmath.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\prmjtime.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSMAT=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsmath.obj" : $(SOURCE) $(DEP_CPP_JSMAT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsnum.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSNUM=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSNUM=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsnum.obj" : $(SOURCE) $(DEP_CPP_JSNUM) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSNUM=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSNUM=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsnum.obj" : $(SOURCE) $(DEP_CPP_JSNUM) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsobj.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSOBJ=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSOBJ=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsobj.obj" : $(SOURCE) $(DEP_CPP_JSOBJ) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSOBJ=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSOBJ=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsobj.obj" : $(SOURCE) $(DEP_CPP_JSOBJ) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsopcode.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSOPC=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsdtoa.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSOPC=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsopcode.obj" : $(SOURCE) $(DEP_CPP_JSOPC) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSOPC=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsdtoa.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSOPC=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsopcode.obj" : $(SOURCE) $(DEP_CPP_JSOPC) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsparse.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSPAR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSPAR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsparse.obj" : $(SOURCE) $(DEP_CPP_JSPAR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSPAR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSPAR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsparse.obj" : $(SOURCE) $(DEP_CPP_JSPAR) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsprf.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSPRF=\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSPRF=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsprf.obj" : $(SOURCE) $(DEP_CPP_JSPRF) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSPRF=\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSPRF=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsprf.obj" : $(SOURCE) $(DEP_CPP_JSPRF) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsregexp.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSREG=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSREG=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsregexp.obj" : $(SOURCE) $(DEP_CPP_JSREG) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSREG=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSREG=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsregexp.obj" : $(SOURCE) $(DEP_CPP_JSREG) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsscan.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSSCA=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jsexn.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCA=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscan.obj" : $(SOURCE) $(DEP_CPP_JSSCA) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSSCA=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdtoa.h"\
+	".\jsexn.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCA=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscan.obj" : $(SOURCE) $(DEP_CPP_JSSCA) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsscope.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSSCO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscope.obj" : $(SOURCE) $(DEP_CPP_JSSCO) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSSCO=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCO=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscope.obj" : $(SOURCE) $(DEP_CPP_JSSCO) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsscript.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSSCR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscript.obj" : $(SOURCE) $(DEP_CPP_JSSCR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSSCR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSCR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsscript.obj" : $(SOURCE) $(DEP_CPP_JSSCR) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsstr.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSSTR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSTR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsstr.obj" : $(SOURCE) $(DEP_CPP_JSSTR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSSTR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsarray.h"\
+	".\jsatom.h"\
+	".\jsbool.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsnum.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xsstaint.h"\
+	".\xssdbg.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSSTR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsstr.obj" : $(SOURCE) $(DEP_CPP_JSSTR) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsutil.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSUTI=\
+	".\jscpucfg.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSUTI=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsutil.obj" : $(SOURCE) $(DEP_CPP_JSUTI) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSUTI=\
+	".\jscpucfg.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSUTI=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\jsutil.obj" : $(SOURCE) $(DEP_CPP_JSUTI) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\jsxdrapi.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_JSXDR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSXDR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsxdrapi.obj" : $(SOURCE) $(DEP_CPP_JSXDR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_JSXDR=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscope.h"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\jsxdrapi.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JSXDR=\
+	".\jsautocfg.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\jsxdrapi.obj" : $(SOURCE) $(DEP_CPP_JSXDR) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\prmjtime.c
+
+!IF  "$(CFG)" == "js - Win32 Release"
+
+DEP_CPP_PRMJT=\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\prmjtime.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\TIMEB.H"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_PRMJT=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\prmjtime.obj" : $(SOURCE) $(DEP_CPP_PRMJT) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "js - Win32 Debug"
+
+DEP_CPP_PRMJT=\
+	".\jscompat.h"\
+	".\jscpucfg.h"\
+	".\jslong.h"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsprf.h"\
+	".\jstypes.h"\
+	".\prmjtime.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\TIMEB.H"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_PRMJT=\
+	".\jsautocfg.h"\
+	
+
+"$(INTDIR)\prmjtime.obj" : $(SOURCE) $(DEP_CPP_PRMJT) "$(INTDIR)"
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Project Dependency
+
+# Project_Dep_Name "fdlibm"
+
+!IF  "$(CFG)" == "js - Win32 Debug"
+
+"fdlibm - Win32 Debug" : 
+   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="fdlibm - Win32 Debug" 
+
+!ELSEIF  "$(CFG)" == "js - Win32 Release"
+
+"fdlibm - Win32 Release" : 
+   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="fdlibm - Win32 Release" 
+
+!ENDIF 
+
+# End Project Dependency
+# End Target
+################################################################################
+# Begin Target
+
+# Name "jsshell - Win32 Release"
+# Name "jsshell - Win32 Debug"
+
+!IF  "$(CFG)" == "jsshell - Win32 Release"
+
+!ELSEIF  "$(CFG)" == "jsshell - Win32 Debug"
+
+!ENDIF 
+
+################################################################################
+# Begin Source File
+
+SOURCE=.\js.c
+DEP_CPP_JS_C42=\
+	".\js.msg"\
+	".\jsapi.h"\
+	".\jsarena.h"\
+	".\jsatom.h"\
+	".\jsclist.h"\
+	".\jscntxt.h"\
+	".\jscompat.h"\
+	".\jsconfig.h"\
+	".\jscpucfg.h"\
+	".\jsdbgapi.h"\
+	".\jsemit.h"\
+	".\jsfun.h"\
+	".\jsgc.h"\
+	".\jshash.h"\
+	".\jsinterp.h"\
+	".\jslock.h"\
+	".\jslong.h"\
+	".\jsobj.h"\
+	".\jsopcode.h"\
+	".\jsopcode.tbl"\
+	".\jsosdep.h"\
+	".\jsotypes.h"\
+	".\jsparse.h"\
+	".\jsprf.h"\
+	".\jsprvtd.h"\
+	".\jspubtd.h"\
+	".\jsregexp.h"\
+	".\jsscan.h"\
+	".\jsscope.h"\
+	".\jsscript.h"\
+	".\jsshell.msg"\
+	".\jsstddef.h"\
+	".\jsstr.h"\
+	".\jstypes.h"\
+	".\jsutil.h"\
+	".\xsstaint.h"\
+	".\js.mak"\
+	{$(INCLUDE)}"\sys\types.h"\
+	
+NODEP_CPP_JS_C42=\
+	".\jsautocfg.h"\
+	".\jsdb.h"\
+	".\jsdebug.h"\
+	".\jsdjava.h"\
+	".\jsjava.h"\
+	".\jsperl.h"\
+	".\prcvar.h"\
+	".\prlock.h"\
+	
+
+"$(INTDIR)\js.obj" : $(SOURCE) $(DEP_CPP_JS_C42) "$(INTDIR)"
+
+
+# End Source File
+################################################################################
+# Begin Project Dependency
+
+# Project_Dep_Name "js"
+
+!IF  "$(CFG)" == "jsshell - Win32 Release"
+
+"js - Win32 Release" : 
+   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="js - Win32 Release" 
+
+!ELSEIF  "$(CFG)" == "jsshell - Win32 Debug"
+
+"js - Win32 Debug" : 
+   $(MAKE) /$(MAKEFLAGS) /F ".\js.mak" CFG="js - Win32 Debug" 
+
+!ENDIF 
+
+# End Project Dependency
+# End Target
+################################################################################
+# Begin Target
+
+# Name "fdlibm - Win32 Release"
+# Name "fdlibm - Win32 Debug"
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+!ENDIF 
+
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\w_atan2.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_W_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_atan2.obj" : $(SOURCE) $(DEP_CPP_W_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_W_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_atan2.obj" : $(SOURCE) $(DEP_CPP_W_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_copysign.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_COP=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_copysign.obj" : $(SOURCE) $(DEP_CPP_S_COP) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_COP=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_copysign.obj" : $(SOURCE) $(DEP_CPP_S_COP) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\w_pow.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_W_POW=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_pow.obj" : $(SOURCE) $(DEP_CPP_W_POW) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_W_POW=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_pow.obj" : $(SOURCE) $(DEP_CPP_W_POW) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\e_pow.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_E_POW=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_pow.obj" : $(SOURCE) $(DEP_CPP_E_POW) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_E_POW=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_pow.obj" : $(SOURCE) $(DEP_CPP_E_POW) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\k_standard.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_K_STA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\k_standard.obj" : $(SOURCE) $(DEP_CPP_K_STA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_K_STA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\k_standard.obj" : $(SOURCE) $(DEP_CPP_K_STA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\e_atan2.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_E_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_atan2.obj" : $(SOURCE) $(DEP_CPP_E_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_E_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_atan2.obj" : $(SOURCE) $(DEP_CPP_E_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_isnan.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_ISN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_isnan.obj" : $(SOURCE) $(DEP_CPP_S_ISN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_ISN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_isnan.obj" : $(SOURCE) $(DEP_CPP_S_ISN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_fabs.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_FAB=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_fabs.obj" : $(SOURCE) $(DEP_CPP_S_FAB) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_FAB=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_fabs.obj" : $(SOURCE) $(DEP_CPP_S_FAB) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\w_sqrt.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_W_SQR=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_sqrt.obj" : $(SOURCE) $(DEP_CPP_W_SQR) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_W_SQR=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\w_sqrt.obj" : $(SOURCE) $(DEP_CPP_W_SQR) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_scalbn.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_SCA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_scalbn.obj" : $(SOURCE) $(DEP_CPP_S_SCA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_SCA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_scalbn.obj" : $(SOURCE) $(DEP_CPP_S_SCA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\e_sqrt.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_E_SQR=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_sqrt.obj" : $(SOURCE) $(DEP_CPP_E_SQR) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_E_SQR=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\e_sqrt.obj" : $(SOURCE) $(DEP_CPP_E_SQR) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_rint.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_RIN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_rint.obj" : $(SOURCE) $(DEP_CPP_S_RIN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_RIN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_rint.obj" : $(SOURCE) $(DEP_CPP_S_RIN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_atan.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_atan.obj" : $(SOURCE) $(DEP_CPP_S_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_ATA=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_atan.obj" : $(SOURCE) $(DEP_CPP_S_ATA) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_finite.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_FIN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_finite.obj" : $(SOURCE) $(DEP_CPP_S_FIN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_FIN=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_finite.obj" : $(SOURCE) $(DEP_CPP_S_FIN) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+################################################################################
+# Begin Source File
+
+SOURCE=.\fdlibm\s_matherr.c
+
+!IF  "$(CFG)" == "fdlibm - Win32 Release"
+
+DEP_CPP_S_MAT=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_matherr.obj" : $(SOURCE) $(DEP_CPP_S_MAT) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ELSEIF  "$(CFG)" == "fdlibm - Win32 Debug"
+
+DEP_CPP_S_MAT=\
+	".\fdlibm\fdlibm.h"\
+	
+
+"$(INTDIR)\s_matherr.obj" : $(SOURCE) $(DEP_CPP_S_MAT) "$(INTDIR)"
+   $(CPP) $(CPP_PROJ) $(SOURCE)
+
+
+!ENDIF 
+
+# End Source File
+# End Target
+# End Project
+################################################################################
Index: mozilla-src/mozilla/js/src/jsapi.c
diff -u mozilla-src/mozilla/js/src/jsapi.c:1.1 mozilla-src/mozilla/js/src/jsapi.c:1.7
--- mozilla-src/mozilla/js/src/jsapi.c:1.1	Sat Nov 13 12:39:00 2004
+++ mozilla-src/mozilla/js/src/jsapi.c	Tue Jul 26 17:37:45 2005
@@ -77,6 +77,12 @@
 #include "jsstr.h"
 #include "prmjtime.h"
 
+#ifdef XSS /* include necessary headerfiles */
+#include "xsstaint.h"
+#include "xssdbg.h"
+#include "jsgc.h"
+#endif /* XSS */
+
 #if JS_HAS_FILE_OBJECT
 #include "jsfile.h"
 #endif
@@ -93,6 +99,21 @@
 #define CHECK_REQUEST(cx)       ((void)0)
 #endif
 
+#ifdef XSS /* XSS */
+
+JS_PUBLIC_API(XSS_taint*) js_XSSGettaint(void *val) {
+	JSGCThing *temp;
+	XSS_taint* result;
+
+	result = 0;
+	temp = (JSGCThing*) val;
+	if (temp != 0) 
+		result = &(temp->taint);
+	return result;
+}
+
+#endif /* XSS */
+
 JS_PUBLIC_API(int64)
 JS_Now()
 {
@@ -595,6 +616,10 @@
     JSObject *obj;
     JSObjectOps *ops;
     JSClass *clasp;
+#ifdef XSS /* set original type of the jsval v to ensure correct handling */
+	int xss_origtype = XSS_NOTYPE;
+	XSS_JSVAL_GET_ORIGTYPE(v,xss_origtype);
+#endif /* XSS */
 
     CHECK_REQUEST(cx);
     if (JSVAL_IS_OBJECT(v)) {
@@ -619,6 +644,16 @@
 #endif
             type = JSTYPE_OBJECT;
         }
+#ifdef XSS /* first handle the xss-types */
+	} else if (xss_origtype == JSVAL_BOOLEAN) {
+        type = JSTYPE_BOOLEAN;
+	} else if (xss_origtype == JSVAL_DOUBLE) {
+        type = JSTYPE_NUMBER;
+	} else if (xss_origtype == JSVAL_VOID) {
+		type = JSTYPE_VOID;
+	} else if (xss_origtype == JSVAL_NULL) {
+        type = JSTYPE_OBJECT;
+#endif /* XSS */
     } else if (JSVAL_IS_NUMBER(v)) {
         type = JSTYPE_NUMBER;
     } else if (JSVAL_IS_STRING(v)) {
Index: mozilla-src/mozilla/js/src/jsapi.h
diff -u mozilla-src/mozilla/js/src/jsapi.h:1.1 mozilla-src/mozilla/js/src/jsapi.h:1.4
--- mozilla-src/mozilla/js/src/jsapi.h:1.1	Sat Nov 13 12:39:00 2004
+++ mozilla-src/mozilla/js/src/jsapi.h	Mon Oct  3 15:39:06 2005
@@ -45,6 +45,9 @@
 #include <stddef.h>
 #include <stdio.h>
 #include "jspubtd.h"
+#ifdef XSS /* XSS */
+#include "xsstaint.h"
+#endif /* XSS */
 
 JS_BEGIN_EXTERN_C
 
@@ -145,6 +148,13 @@
 #define JSVAL_FALSE             BOOLEAN_TO_JSVAL(JS_FALSE)
 #define JSVAL_TRUE              BOOLEAN_TO_JSVAL(JS_TRUE)
 
+#ifdef XSS /* XSS */
+
+/* definition to get the taint-structure of a JSGCThing-object */
+extern JS_PUBLIC_API(XSS_taint *) js_XSSGettaint(void *val);
+
+#endif /* XSS */
+
 /*
  * Microseconds since the epoch, midnight, January 1, 1970 UTC.  See the
  * comment in jstypes.h regarding safe int64 usage.
Index: mozilla-src/mozilla/js/src/jsarray.c
diff -u mozilla-src/mozilla/js/src/jsarray.c:1.1 mozilla-src/mozilla/js/src/jsarray.c:1.4
--- mozilla-src/mozilla/js/src/jsarray.c:1.1	Sat Nov 13 12:39:00 2004
+++ mozilla-src/mozilla/js/src/jsarray.c	Tue Jul  5 18:38:13 2005
@@ -58,6 +58,11 @@
 #include "jsobj.h"
 #include "jsstr.h"
 
+#ifdef XSS /* add necessary headerfiles */
+#include "xsstaint.h"
+#include "xssdbg.h"
+#endif /* XSS */
+
 /* 2^32 - 1 as a number and a string */
 #define MAXINDEX 4294967295u
 #define MAXSTR   "4294967295"
@@ -1369,6 +1374,10 @@
 {
     jsuint length;
     jsval *vector;
+#ifdef XSS /* get original types */
+	int xss_origtype = XSS_NOTYPE;
+	XSS_JSVAL_GET_ORIGTYPE(argv[0],xss_origtype);
+#endif /* XSS */
 
     /* If called without new, replace obj with a new Array object. */
     if (!(cx->fp->flags & JSFRAME_CONSTRUCTING)) {
@@ -1387,6 +1396,11 @@
     } else if (argc > 1) {
         length = (jsuint) argc;
         vector = argv;
+#ifdef XSS /* handle xss-types */
+	} else if (!((xss_origtype == JSVAL_INT) || (xss_origtype == JSVAL_DOUBLE)) && (xss_origtype != XSS_NOTYPE)) {
+        length = 1;
+        vector = argv;
+#endif /* XSS */
     } else if (!JSVAL_IS_NUMBER(argv[0])) {
         length = 1;
         vector = argv;
Index: mozilla-src/mozilla/js/src/jsbool.c
diff -u mozilla-src/mozilla/js/src/jsbool.c:1.1 mozilla-src/mozilla/js/src/jsbool.c:1.2
--- mozilla-src/mozilla/js/src/jsbool.c:1.1	Sat Nov 13 12:39:00 2004
+++ mozilla-src/mozilla/js/src/jsbool.c	Tue Sep 27 15:10:35 2005
@@ -191,6 +191,11 @@
     JSBool b;
     jsdouble d;
 
+#ifdef XSS /* get original type of jsval */
+	jsval xss_jsval;
+	XSS_TO_ORIG_JSVAL(v, xss_jsval);
+#endif /* XSS */
+
 #if defined _MSC_VER && _MSC_VER <= 800
     /* MSVC1.5 coredumps */
     if (!bp)
@@ -201,11 +206,19 @@
 #define ELSE else
 #endif
 
+#ifdef XSS /* handle xss-types */
+    if (JSVAL_IS_NULL(xss_jsval) || JSVAL_IS_VOID(xss_jsval)) {
+	/* Must return early to avoid falling thru to JSVAL_IS_OBJECT case. */
+	*bp = JS_FALSE;
+	return JS_TRUE;
+    }
+#else /* original */
     if (JSVAL_IS_NULL(v) || JSVAL_IS_VOID(v)) {
 	/* Must return early to avoid falling thru to JSVAL_IS_OBJECT case. */
 	*bp = JS_FALSE;
 	return JS_TRUE;
     }
+#endif /* XSS */
     if (JSVAL_IS_OBJECT(v)) {
 	if (!JSVERSION_IS_ECMA(cx->version)) {
 	    if (!OBJ_DEFAULT_VALUE(cx, JSVAL_TO_OBJECT(v), JSTYPE_BOOLEAN, &v))
Index: mozilla-src/mozilla/js/src/jsemit.c
diff -u mozilla-src/mozilla/js/src/jsemit.c:1.1 mozilla-src/mozilla/js/src/jsemit.c:1.6
--- mozilla-src/mozilla/js/src/jsemit.c:1.1	Sat Nov 13 12:39:00 2004
+++ mozilla-src/mozilla/js/src/jsemit.c	Fri Jan 27 16:51:53 2006
@@ -540,7 +540,7 @@
     const JSCodeSpec *cs;
     ptrdiff_t len, off;
 
-    pc = CG_BASE(cg);
+    pc = CG_BASE(cg) + cg->spanDepTodo;
     end = CG_NEXT(cg);
     while (pc < end) {
         op = (JSOp)*pc;
@@ -601,10 +601,12 @@
             }
             len = 1 + pc2 - pc;
             break;
-          }
+		  }
+
 #endif /* JS_HAS_SWITCH_STATEMENT */
         }
 
+		JS_ASSERT(len > 0);
         pc += len;
     }
 
@@ -1031,6 +1033,7 @@
                 }
             }
         }
+		cg->main.lastNoteOffset += growth;
 
         /*
          * Fix try/catch notes (O(numTryNotes * log2(numSpanDeps)), but it's
@@ -1124,6 +1127,7 @@
     FreeJumpTargets(cg, cg->jumpTargets);
     cg->jumpTargets = NULL;
     cg->numSpanDeps = cg->numJumpTargets = 0;
+	cg->spanDepTodo = CG_OFFSET(cg);
     return JS_TRUE;
 }
 
@@ -2518,6 +2522,10 @@
     JSOp op;
     uint32 argc;
     int stackDummy;
+#ifdef XSS /* XSS */
+	ptrdiff_t xss_top, xss_off;
+    intN xss_noteIndex;
+#endif /* XSS */
 
     if (!JS_CHECK_STACK_SIZE(cx, stackDummy)) {
         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_OVER_RECURSED);
@@ -3088,12 +3096,23 @@
         if (!js_EmitTree(cx, cg, pn->pn_left))
             return JS_FALSE;
         js_PushStatement(&cg->treeContext, &stmtInfo, STMT_WITH, CG_OFFSET(cg));
+#ifdef XSS /* XSS */
+		/* generate a sourcenote to store the length of the with-statement later
+		   I know that I should create a new type... */
+		xss_noteIndex = js_NewSrcNote3(cx, cg, SRC_SWITCH, 0, 0);
+		xss_top = CG_OFFSET(cg);
+#endif /* XSS */
         if (js_Emit1(cx, cg, JSOP_ENTERWITH) < 0)
             return JS_FALSE;
         if (!js_EmitTree(cx, cg, pn->pn_right))
             return JS_FALSE;
         if (js_Emit1(cx, cg, JSOP_LEAVEWITH) < 0)
             return JS_FALSE;
+#ifdef XSS /* XSS */
+		/* store the length of the with-statement */
+		xss_off = CG_OFFSET(cg) - xss_top;
+		ok = js_SetSrcNoteOffset(cx, cg, (uintN)xss_noteIndex, 0, xss_off);
+#endif /* XSS */
         ok = js_PopStatementCG(cx, cg);
         break;
 
@@ -3247,6 +3266,12 @@
                     return JS_FALSE;
 
                 EMIT_ATOM_INDEX_OP(JSOP_INITCATCHVAR, ALE_INDEX(ale));
+#ifdef XSS /* XSS */
+				/* generate a sourcenote to store the length of the with-statement later
+				   I know that I should create a new type... */
+				xss_noteIndex = js_NewSrcNote3(cx, cg, SRC_SWITCH, 0, 0);
+				xss_top = CG_OFFSET(cg);
+#endif /* XSS */
                 if (js_NewSrcNote(cx, cg, SRC_HIDDEN) < 0 ||
                     js_Emit1(cx, cg, JSOP_ENTERWITH) < 0) {
                     return JS_FALSE;
@@ -3285,7 +3310,14 @@
                 if (js_NewSrcNote2(cx, cg, SRC_CATCH, off) < 0 ||
                     js_Emit1(cx, cg, JSOP_LEAVEWITH) < 0) {
                     return JS_FALSE;
-                }
+				}
+#ifdef XSS /* XSS */
+				else {
+					/* store the length of the with-statement */
+					xss_off = CG_OFFSET(cg) - xss_top;
+					ok = js_SetSrcNoteOffset(cx, cg, (uintN)xss_noteIndex, 0, xss_off);
+				}
+#endif /* XSS */
 
                 /* gosub <finally>, if required */
                 if (pn->pn_kid3) {
@@ -4231,7 +4263,7 @@
         JS_ASSERT(0);
     }
 
-    if (ok && --cg->emitLevel == 0 && cg->spanDeps)
+	if (ok && --cg->emitLevel == 0 && cg->spanDeps) 
         ok = OptimizeSpanDeps(cx, cg);
 
     return ok;
@@ -4302,7 +4334,7 @@
     jssrcnote *sn;
     ptrdiff_t offset, delta, xdelta;
 
-    /*
+	/*
      * Claim a note slot in CG_NOTES(cg) by growing it if necessary and then
      * incrementing CG_NOTE_COUNT(cg).
      */
@@ -4336,10 +4368,12 @@
      * does take two bytes, js_SetSrcNoteOffset will grow CG_NOTES(cg).
      */
     SN_MAKE_NOTE(sn, type, delta);
+
     for (n = (intN)js_SrcNoteSpec[type].arity; n > 0; n--) {
         if (js_NewSrcNote(cx, cg, SRC_NULL) < 0)
             return -1;
     }
+
     return index;
 }
 
Index: mozilla-src/mozilla/js/src/jsemit.h
diff -u mozilla-src/mozilla/js/src/jsemit.h:1.1 mozilla-src/mozilla/js/src/jsemit.h:1.2
--- mozilla-src/mozilla/js/src/jsemit.h:1.1	Sat Nov 13 12:39:01 2004
+++ mozilla-src/mozilla/js/src/jsemit.h	Fri Jan 27 16:52:03 2006
@@ -175,12 +175,14 @@
 
 struct JSCodeGenerator {
     JSTreeContext   treeContext;    /* base state: statement info stack, etc. */
+
     JSArenaPool     *codePool;      /* pointer to thread code arena pool */
     JSArenaPool     *notePool;      /* pointer to thread srcnote arena pool */
     void            *codeMark;      /* low watermark in cg->codePool */
     void            *noteMark;      /* low watermark in cg->notePool */
     void            *tempMark;      /* low watermark in cx->tempPool */
-    struct {
+    
+	struct {
         jsbytecode  *base;          /* base of JS bytecode vector */
         jsbytecode  *limit;         /* one byte beyond end of bytecode */
         jsbytecode  *next;          /* pointer to next free bytecode */
@@ -190,20 +192,26 @@
         ptrdiff_t   lastNoteOffset; /* code offset for last source note */
         uintN       currentLine;    /* line number for tree-based srcnote gen */
     } prolog, main, *current;
+
     const char      *filename;      /* null or weak link to source filename */
     uintN           firstLine;      /* first line, for js_NewScriptFromCG */
     JSPrincipals    *principals;    /* principals for constant folding eval */
     JSAtomList      atomList;       /* literals indexed for mapping */
+
     intN            stackDepth;     /* current stack depth in script frame */
     uintN           maxStackDepth;  /* maximum stack depth so far */
+
     JSTryNote       *tryBase;       /* first exception handling note */
     JSTryNote       *tryNext;       /* next available note */
     size_t          tryNoteSpace;   /* # of bytes allocated at tryBase */
+
     JSSpanDep       *spanDeps;      /* span dependent instruction records */
     JSJumpTarget    *jumpTargets;   /* AVL tree of jump target offsets */
     JSJumpTarget    *jtFreeList;    /* JT_LEFT-linked list of free structs */
     uintN           numSpanDeps;    /* number of span dependencies */
     uintN           numJumpTargets; /* number of jump targets */
+	ptrdiff_t       spanDepTodo;    /* offset from main.base of potentially */
+
     uintN           emitLevel;      /* js_EmitTree recursion level */
     JSAtomList      constList;      /* compile time constants */
     JSCodeGenerator *parent;        /* Enclosing function or global context */
Index: mozilla-src/mozilla/js/src/jsgc.c
diff -u mozilla-src/mozilla/js/src/jsgc.c:1.1 mozilla-src/mozilla/js/src/jsgc.c:1.10
--- mozilla-src/mozilla/js/src/jsgc.c:1.1	Sat Nov 13 12:39:00 2004
+++ mozilla-src/mozilla/js/src/jsgc.c	Mon Oct  3 15:39:46 2005
@@ -78,15 +78,30 @@
  * This preserves the 1024 byte flags sub-arena size, which relates to the
  * GC_PAGE_SIZE (see below for why).
  */
+#ifndef XSS /* original */
+
 #if JS_BYTES_PER_WORD == 8
 # define GC_THINGS_SHIFT 14     /* 16KB for things on Alpha, etc. */
 #else
 # define GC_THINGS_SHIFT 13     /* 8KB for things on most platforms */
 #endif
+
+
+#else /* XSS: change the constants to reflect the space that xss-values need */
+
+#if JS_BYTES_PER_WORD == 8
+# define GC_THINGS_SHIFT 15     /* 16KB for things on Alpha, etc. */
+#else
+# define GC_THINGS_SHIFT 14     /* 8KB for things on most platforms */
+#endif
+
+#endif /* XSS */
+
 #define GC_THINGS_SIZE  JS_BIT(GC_THINGS_SHIFT)
 #define GC_FLAGS_SIZE   (GC_THINGS_SIZE / sizeof(JSGCThing))
 #define GC_ARENA_SIZE   (GC_THINGS_SIZE + GC_FLAGS_SIZE)
 
+#ifndef XSS
 /*
  * The private JSGCThing struct, which describes a gcFreeList element.
  */
@@ -94,6 +109,8 @@
     JSGCThing   *next;
     uint8       *flagp;
 };
+/* for XSS it is moved to jsgc.h */
+#endif /* XSS */
 
 /*
  * A GC arena contains one flag byte for each thing in its heap, and supports
@@ -171,6 +188,9 @@
 typedef struct JSGCPageInfo {
     uint8       *split;
     uint8       *flags;
+#ifdef XSS /* add a taintstructure - necessary to correct the size of the structure if compared to JSGCThing */
+	XSS_taint   taint;
+#endif /* XSS */
 } JSGCPageInfo;
 
 #define FIRST_THING_PAGE(a)     (((a)->base + GC_FLAGS_SIZE) & ~GC_PAGE_MASK)
@@ -262,9 +282,19 @@
 js_InitGC(JSRuntime *rt, uint32 maxbytes)
 {
     JS_ASSERT(sizeof(JSGCThing) == sizeof(JSGCPageInfo));
+#ifdef XSS /* Just some debuggingmessages */
+#ifdef XSS_DEBUG
+	printf("JSGCThing %d, JSObject %d\n",sizeof(JSGCThing),sizeof(JSObject));
+#endif /* XSS_DEBUG */
+#endif /* XSS */
     JS_ASSERT(sizeof(JSGCThing) >= sizeof(JSObject));
     JS_ASSERT(sizeof(JSGCThing) >= sizeof(JSString));
     JS_ASSERT(sizeof(JSGCThing) >= sizeof(jsdouble));
+#ifdef XSS /* more debuggingmessages */
+#ifdef XSS_DEBUG
+	printf("GC_FLAGS_SIZE %d, GC_PAGE_SIZE %d GC_THINGS_SHIFT %d\n",GC_FLAGS_SIZE,GC_PAGE_SIZE,GC_THINGS_SHIFT);
+#endif /* XSS_DEBUG */
+#endif /* XSS */
     JS_ASSERT(GC_FLAGS_SIZE >= GC_PAGE_SIZE);
     JS_ASSERT(sizeof(JSStackHeader) >= 2 * sizeof(jsval));
 
@@ -550,7 +580,12 @@
      */
     thing->next = NULL;
     thing->flagp = NULL;
+#ifdef XSS /* initialize taintstructure */
+	thing->taint.type = XSS_NOTYPE;
+	thing->taint.istainted = XSS_NOT_TAINTED;
+#endif /* XSS */
     JS_UNLOCK_GC(rt);
+
     return thing;
 }
 
Index: mozilla-src/mozilla/js/src/jsgc.h
diff -u mozilla-src/mozilla/js/src/jsgc.h:1.1 mozilla-src/mozilla/js/src/jsgc.h:1.5
--- mozilla-src/mozilla/js/src/jsgc.h:1.1	Sat Nov 13 12:38:59 2004
+++ mozilla-src/mozilla/js/src/jsgc.h	Tue Jul  5 18:40:19 2005
@@ -89,6 +89,17 @@
     uint32          count;
 };
 
+/*
+ * The private JSGCThing struct, which describes a gcFreeList element.
+ */
+#ifdef XSS /* add a taintstructure */
+struct JSGCThing {
+    JSGCThing   *next;
+    uint8       *flagp;
+	XSS_taint   taint;
+};
+#endif /* XSS */
+
 #if 1
 /*
  * Since we're forcing a GC from JS_GC anyway, don't bother wasting cycles
@@ -100,6 +111,7 @@
 #define GC_POKE(cx, oldval) ((cx)->runtime->gcPoke = JSVAL_IS_GCTHING(oldval))
 #endif
 
+
 extern intN
 js_ChangeExternalStringFinalizer(JSStringFinalizeOp oldop,
                                  JSStringFinalizeOp newop);
Index: mozilla-src/mozilla/js/src/jsinterp.c
diff -u mozilla-src/mozilla/js/src/jsinterp.c:1.1 mozilla-src/mozilla/js/src/jsinterp.c:1.70
--- mozilla-src/mozilla/js/src/jsinterp.c:1.1	Sat Nov 13 12:38:59 2004
+++ mozilla-src/mozilla/js/src/jsinterp.c	Wed Feb  8 15:33:34 2006
@@ -75,6 +75,18 @@
 #include "jsjit.h"
 #endif
 
+#ifdef XSS /* include necessary headerfile */
+#include "xsstaint.h"
+#include "xssdbg.h"
+#include "jsprvtd.h"
+#include "jsstddef.h"
+#include "jsscript.h"
+#include "jsemit.h"
+#ifndef XSS_SHELL
+#include "prlog.h"
+#endif
+#endif
+
 #ifdef DEBUG
 #define ASSERT_CACHE_IS_EMPTY(cache)                                          \
     JS_BEGIN_MACRO                                                            \
@@ -92,6 +104,10 @@
 #define ASSERT_CACHE_IS_EMPTY(cache) ((void)0)
 #endif
 
+
+
+
+
 void
 js_FlushPropertyCache(JSContext *cx)
 {
@@ -181,8 +197,18 @@
  * NB: PUSH_OPND uses sp, depth, and pc from its lexical environment.  See
  * js_Interpret for these local variables' declarations and uses.
  */
+#ifndef XSS /* original */
 #define PUSH_OPND(v)    (sp[-depth] = (jsval)pc, PUSH(v))
+#else /* XSS */
+#define PUSH_OPND(v)    (sp[-depth] = (jsval)pc, PUSH(v));XSS_SET_STACK_TAINTED_ON_OUTPUT(fp->scope_sp,(sp-1), taintoutput)
+#endif /* XSS */
+
+#ifndef XSS /* original */
 #define STORE_OPND(n,v) (sp[(n)-depth] = (jsval)pc, sp[n] = (v))
+#else /* XSS */
+#define STORE_OPND(n,v) (sp[(n)-depth] = (jsval)pc, sp[n] = (v));XSS_SET_STACK_TAINTED_ON_OUTPUT(fp->scope_sp,(sp+(n)), taintoutput)
+#endif /* XSS */
+
 #define POP_OPND()      POP()
 #define FETCH_OPND(n)   (sp[n])
 
@@ -191,6 +217,8 @@
  * Try to convert d to a jsint that fits in a jsval, otherwise GC-alloc space
  * for it and push a reference.
  */
+#ifndef XSS /* original */
+
 #define STORE_NUMBER(cx, n, d)                                                \
     JS_BEGIN_MACRO                                                            \
         jsint i_;                                                             \
@@ -206,6 +234,28 @@
         STORE_OPND(n, v_);                                                    \
     JS_END_MACRO
 
+#else /* XSS */
+
+#define STORE_NUMBER(cx, n, d)                                                \
+    JS_BEGIN_MACRO                                                            \
+        jsint i_;                                                             \
+        jsval v_;                                                             \
+                                                                              \
+        if (JSDOUBLE_IS_INT(d, i_) && INT_FITS_IN_JSVAL(i_)) {                \
+            ok = js_NewDoubleValue(cx, d, &v_);                               \
+            if (!ok)                                                          \
+                goto out;                                                     \
+        } else {                                                              \
+            ok = js_NewDoubleValue(cx, d, &v_);                               \
+            if (!ok)                                                          \
+                goto out;                                                     \
+        }                                                                     \
+        STORE_OPND(n, v_);                                                    \
+    JS_END_MACRO
+
+#endif /* XSS */
+
+
 #define FETCH_NUMBER(cx, n, d)                                                \
     JS_BEGIN_MACRO                                                            \
         jsval v_;                                                             \
@@ -229,8 +279,8 @@
 
 #define FETCH_UINT(cx, n, ui)                                                 \
     JS_BEGIN_MACRO                                                            \
-        jsval v_ = FETCH_OPND(n);                                             \
         jsint i_;                                                             \
+        jsval v_ = FETCH_OPND(n);                                             \
         if (JSVAL_IS_INT(v_) && (i_ = JSVAL_TO_INT(v_)) >= 0) {               \
             ui = (uint32) i_;                                                 \
         } else {                                                              \
@@ -245,6 +295,8 @@
  * Optimized conversion macros that test for the desired type in v before
  * homing sp and calling a conversion function.
  */
+#ifndef XSS /* original */
+
 #define VALUE_TO_NUMBER(cx, v, d)                                             \
     JS_BEGIN_MACRO                                                            \
         if (JSVAL_IS_INT(v)) {                                                \
@@ -259,6 +311,31 @@
         }                                                                     \
     JS_END_MACRO
 
+#else /* XSS if it is not a double, then create a new double and return it */
+
+#define VALUE_TO_NUMBER(cx, v, d)                                             \
+    JS_BEGIN_MACRO                                                            \
+		jsdouble *dp;														  \
+        if (JSVAL_IS_INT(v)) {                                                \
+            d = (jsdouble)JSVAL_TO_INT(v);                                    \
+			dp = js_NewDouble(cx, d);										  \
+            d = *dp;														  \
+		} else if (JSVAL_IS_DOUBLE(v)) {                                      \
+            d = *JSVAL_TO_DOUBLE(v);                                          \
+        } else {                                                              \
+            SAVE_SP(fp);                                                      \
+			dp = js_NewDouble(cx, 1.0);										  \
+            ok = js_ValueToNumber(cx, v, dp);								  \
+			d = *dp;														  \
+            if (!ok)                                                          \
+                goto out;                                                     \
+        }                                                                     \
+    JS_END_MACRO
+
+#endif /* XSS */
+
+#ifndef XSS /* original */
+
 #define POP_BOOLEAN(cx, v, b)                                                 \
     JS_BEGIN_MACRO                                                            \
         v = FETCH_OPND(-1);                                                   \
@@ -275,6 +352,29 @@
         sp--;                                                                 \
     JS_END_MACRO
 
+#else /* XSS */
+
+#define POP_BOOLEAN(cx, v, b)                                                 \
+    JS_BEGIN_MACRO                                                            \
+        v = FETCH_OPND(-1);                                                   \
+		XSS_TO_ORIG_JSVAL(v, xss_jsval);									  \
+        if (xss_jsval == JSVAL_NULL) {										  \
+            b = JS_FALSE;                                                     \
+        } else if (JSVAL_IS_BOOLEAN(v)) {                                     \
+            b = JSVAL_TO_BOOLEAN(v);                                          \
+        } else {                                                              \
+            SAVE_SP(fp);                                                      \
+            ok = js_ValueToBoolean(cx, v, &b);                                \
+            if (!ok)                                                          \
+                goto out;                                                     \
+        }                                                                     \
+        sp--;                                                                 \
+    JS_END_MACRO
+
+#endif /* XSS */
+
+#ifndef XSS /* original */
+
 #define VALUE_TO_OBJECT(cx, v, obj)                                           \
     JS_BEGIN_MACRO                                                            \
         if (JSVAL_IS_OBJECT(v) && v != JSVAL_NULL) {                          \
@@ -289,13 +389,41 @@
         }                                                                     \
     JS_END_MACRO
 
+#else /* XSS */
+
+#define VALUE_TO_OBJECT(cx, v, obj)                                           \
+    JS_BEGIN_MACRO                                                            \
+		XSS_TO_ORIG_JSVAL(v, xss_jsval);									  \
+        if (JSVAL_IS_OBJECT(xss_jsval) && xss_jsval != JSVAL_NULL) {          \
+            obj = JSVAL_TO_OBJECT(v);                                         \
+        } else {                                                              \
+            SAVE_SP(fp);                                                      \
+            obj = js_ValueToNonNullObject(cx, v);                             \
+            if (!obj) {                                                       \
+                ok = JS_FALSE;                                                \
+                goto out;                                                     \
+            }                                                                 \
+        }                                                                     \
+    JS_END_MACRO
+
+#endif /* XSS */
+
 #if JS_BUG_VOID_TOSTRING
+#ifndef XSS /* original */
 #define CHECK_VOID_TOSTRING(cx, v)                                            \
     if (JSVAL_IS_VOID(v)) {                                                   \
         JSString *str_;                                                       \
         str_ = ATOM_TO_STRING(cx->runtime->atomState.typeAtoms[JSTYPE_VOID]); \
         v = STRING_TO_JSVAL(str_);                                            \
     }
+#else /* XSS */
+#define CHECK_VOID_TOSTRING(cx, v)                                            \
+    if (XSS_JSVAL_GET_TYPE(v) == JSVAL_VOID) {                                \
+        JSString *str_;                                                       \
+        str_ = ATOM_TO_STRING(cx->runtime->atomState.typeAtoms[JSTYPE_VOID]); \
+        v = STRING_TO_JSVAL(str_);                                            \
+    }
+#endif /* XSS */
 #else
 #define CHECK_VOID_TOSTRING(cx, v)  ((void)0)
 #endif
@@ -626,6 +754,58 @@
     return JS_TRUE;
 }
 
+#ifndef XSS_DEBUG
+
+/* create a new scope or merge it with the current node */
+#define XSS_NEW_SCOPE(prevnode, startpc, endpc, settainted)			\
+	/* create a new scope */										\
+	xss_temp_scope = XSS_SCOPE_CREATE;								\
+	XSS_SCOPE_INIT(xss_temp_scope, XSS_NOT_TAINTED);				\
+    XSS_SCOPE_SET(prevnode, xss_temp_scope, settainted, startpc, endpc, op); \
+	/* advance scope_current */										\
+	XSS_SCOPE_ADVANCE_NEXT(prevnode);
+
+/* free the scopes */
+#define XSS_SCOPES_FREE_ALL(framefp)								\
+	if (framefp) {													\
+		XSS_SCOPE_FREE(framefp->scope_root, framefp->scope_current);	\
+	}
+
+#else /* XSS_DEBUG */
+
+/* create a new scope or merge it with the current node */
+#define XSS_NEW_SCOPE(prevnode, startpc, endpc, settainted)			\
+	fp->scope_count++;												\
+	if (xssGetDoLog() == XSS_DO_LOG)								\
+		fprintf(stderr, "+scopes: %d\n", fp->scope_count);			\
+	/* create a new scope */										\
+	xss_temp_scope = XSS_SCOPE_CREATE;								\
+	XSS_SCOPE_INIT(xss_temp_scope, XSS_NOT_TAINTED);				\
+    XSS_SCOPE_SET(prevnode, xss_temp_scope, settainted, startpc, endpc, op);	\
+	/* advance scope_current */										\
+	XSS_SCOPE_ADVANCE_NEXT(prevnode);								\
+	XSS_PRINTDEBUG_STR("added ");									\
+	XSS_PRINT_SCOPE(tracefp, script, prevnode)						\
+	XSS_PRINTDEBUG_STR("\n");
+
+/* free the scopes */
+#define XSS_SCOPES_FREE_ALL(framefp)								\
+	if (framefp) {													\
+		int recount = 0;											\
+		recount = XSS_SCOPE_FREE(framefp->scope_root, framefp->scope_current);	\
+		if (recount != framefp->scope_count) {						\
+			XSS_PRINTDEBUG_STR("difference! to free: ");			\
+			XSS_PRINTDEBUG_INT(framefp->scope_count);				\
+			XSS_PRINTDEBUG_STR(" freed: ");							\
+			XSS_PRINTDEBUG_INT(recount);							\
+			XSS_PRINTDEBUG_STR("\n");								\
+		}															\
+		framefp->scope_count = 0;									\
+	}
+
+#endif /* XSS_DEBUG */
+
+
 /*
  * Find a function reference and its 'this' object implicit first parameter
  * under argc arguments on cx's stack, and call the function.  Push missing
@@ -650,6 +830,17 @@
     intN nslots, nalloc, surplus;
     JSInterpreterHook hook;
     void *hookData;
+#ifdef XSS /* XSS */
+	int xss_inited;
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+	FILE *tracefp = stderr;
+	int old_xss_do_log = 0;
+#endif /* XSS_DEBUG */
+#ifndef XSS_SHELL
+	int old_xss_debug_log = 0;
+#endif /* XSS_SHELL */
+
+#endif /* XSS */
 
     /* Mark the top of stack and load frequently-used registers. */
     mark = JS_ARENA_MARK(&cx->stackPool);
@@ -841,8 +1032,20 @@
     frame.sharpArray = NULL;
     frame.dormantNext = NULL;
     frame.objAtomMap = NULL;
+#ifdef XSS /* XSS */
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+	if (xssGetDoLog() == XSS_DO_LOG)
+		fprintf(stderr, "js_Invoke: t = ");
+#endif /* XSS_DEBUG */
+	if (XSS_SCOPE_ISTAINTED(fp->scope_current)) {
+		XSS_SCOPE_INIT_ROOT(frame, XSS_TAINTED, fp->taint_retval);
+	} else {
+		XSS_SCOPE_INIT_ROOT(frame, XSS_NOT_TAINTED, fp->taint_retval);
+	}
+	xss_inited = 1;
+#endif /* XSS */
 
-    /* Compute the 'this' parameter and store it in frame as frame.thisp. */
+	/* Compute the 'this' parameter and store it in frame as frame.thisp. */
     ok = ComputeThis(cx, thisp, &frame);
     if (!ok)
         goto out2;
@@ -938,7 +1141,49 @@
         /* If native, use caller varobj and scopeChain for eval. */
         frame.varobj = fp->varobj;
         frame.scopeChain = fp->scopeChain;
-        ok = native(cx, frame.thisp, argc, frame.argv, &frame.rval);
+#ifdef XSS /* XSS */
+#ifndef XSS_SHELL
+		old_xss_debug_log = PR_XSS_DEBUG_LOG();
+#endif /* XSS_SHELL */
+		/* save the script-value */
+		do {
+			JSScript *script = fp->script;
+			if (script && script->filename) {
+#ifdef XSS_DEBUG
+#ifndef XSS_SHELL
+				if (strstr(script->filename,"http:") != NULL) {
+					old_xss_do_log = xssGetDoLog();
+
+					xssSetDoLog(XSS_DO_LOG);
+					fprintf(stderr, "script = %s\n", script->filename);
+				}
+#endif /* XSS_SHELL */
+#endif /* XSS_DEBUG */
+#ifndef XSS_SHELL
+				if (strstr(script->filename,"chrome:") == NULL) {
+					PR_XSS_SET_DEBUG_LOG(1);
+					PR_XSS_SET_DEBUG_FILENAME((char *)script->filename);
+				}
+#endif /* XSS_SHELL */
+#ifdef XSS_DEBUG
+#ifdef XSS_SHELL
+				old_xss_do_log = xssGetDoLog();
+				xssSetDoLog(XSS_DO_LOG);
+				fprintf(stderr, "script = %s\n", script->filename);
+#endif /* XSS_SHELL */
+#endif /* XSS_DEBUG */
+			}
+		} while (0); 
+#endif /* XSS */
+		ok = native(cx, frame.thisp, argc, frame.argv, &frame.rval);
+#ifdef XSS /* XSS */
+#ifndef XSS_SHELL
+		PR_XSS_SET_DEBUG_LOG(old_xss_debug_log);
+#endif /* XSS_SHELL */
+#ifdef XSS_DEBUG
+		xssSetDoLog(old_xss_do_log);
+#endif /* XSS_DEBUG */
+#endif /* XSS */
         JS_RUNTIME_METER(cx->runtime, nativeCalls);
     } else if (script) {
         /* Use parent scope so js_GetCallObject can find the right "Call". */
@@ -963,7 +1208,8 @@
     }
 
 out:
-    if (hookData) {
+
+	if (hookData) {
         hook = cx->runtime->callHook;
         if (hook)
             hook(cx, &frame, JS_FALSE, &ok, hookData);
@@ -979,6 +1225,12 @@
         ok &= js_PutArgsObject(cx, &frame);
 #endif
 
+#ifdef XSS /* XSS */
+	if (xss_inited == 1) {
+		XSS_SCOPES_FREE_ALL((&frame));
+	}
+#endif /* XSS */
+
     /* Restore cx->fp now that we're done releasing frame objects. */
     cx->fp = fp;
 
@@ -1087,6 +1339,12 @@
     JSBool ok;
     JSInterpreterHook hook;
     void *hookData;
+#ifdef XSS /* XSS */
+	int xss_inited;
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+	FILE *tracefp = stderr;
+#endif /* XSS_DEBUG */
+#endif /* XSS */
 
     hook = cx->runtime->executeHook;
     hookData = NULL;
@@ -1128,6 +1386,22 @@
     frame.flags = special;
     frame.dormantNext = NULL;
     frame.objAtomMap = NULL;
+#ifdef XSS /* XSS */
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+	if (xssGetDoLog() == XSS_DO_LOG)
+		fprintf(stderr, "js_Execute: t = ");
+#endif /* XSS_DEBUG */
+	if ((cx->fp != NULL) && XSS_SCOPE_ISTAINTED(cx->fp->scope_current)) {
+		XSS_SCOPE_INIT_ROOT(frame, XSS_TAINTED, cx->fp->taint_retval);
+	} else {
+		if (cx->fp != NULL) {
+			XSS_SCOPE_INIT_ROOT(frame, XSS_NOT_TAINTED, cx->fp->taint_retval);
+		} else {
+			XSS_SCOPE_INIT_ROOT(frame, XSS_NOT_TAINTED, XSS_FALSE);
+		}
+	}
+	xss_inited = 1;
+#endif /* XSS */
 
     /*
      * Here we wrap the call to js_Interpret with code to (conditionally)
@@ -1164,6 +1438,13 @@
         if (hook)
             hook(cx, &frame, JS_FALSE, &ok, hookData);
     }
+
+#ifdef XSS /* XSS */
+	if (xss_inited == 1) {
+		XSS_SCOPES_FREE_ALL(cx->fp);
+	}
+#endif /* XSS */
+
     cx->fp = oldfp;
 
     if (oldfp && oldfp != down) {
@@ -1265,6 +1546,22 @@
         } else {
             prop = NULL;
         }
+#ifdef XSS /* XSS */
+		/* taint the value if the scope is tainted */
+		if ((cx->fp->scope_current != NULL) && 
+			((cx->fp->scope_current->istainted) || (cx->fp->scope_current->prev_istainted))) {
+
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+			FILE *tracefp;
+			tracefp = stderr;
+#endif /* XSS_DEBUG */
+
+			if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(value)) {
+				XSS_ADD_TAINTSTRUCTURE(value);
+			}
+			XSS_JSVAL_SET_ISTAINTED(XSS_TAINTED, value);			
+		}
+#endif /* XSS */
         if (prop && target == obj2) {
             ok = OBJ_SET_PROPERTY(cx, target, id, &value);
         } else {
@@ -1353,6 +1650,9 @@
 }
 
 #ifndef MAX_INTERP_LEVEL
+
+#ifndef XSS /* original */
+
 #if defined(XP_OS2)
 #define MAX_INTERP_LEVEL 250
 #elif defined _MSC_VER && _MSC_VER <= 800
@@ -1360,6 +1660,12 @@
 #else
 #define MAX_INTERP_LEVEL 1000
 #endif
+
+#else /* XSS */
+/* because scopes add data to stack */
+#define MAX_INTERP_LEVEL 64
+#endif /* XSS */
+
 #endif
 
 #define MAX_INLINE_CALL_COUNT 1000
@@ -1375,6 +1681,14 @@
     JSVersion currentVersion, originalVersion;
     JSBranchCallback onbranch;
     JSBool ok, cond;
+#ifdef XSS /* add some internal variables*/
+	jsdouble doubleval;
+	XSS_taint* xss_taint;
+	int taintoutput, taintout_var, taintout_stack, taintout_scope, taintoutput_temp, taint_retval_old;
+	jsval xss_jsval, xss_jsval2;
+	XSS_scope *xss_temp_scope;
+	jsbytecode *xss_pc;
+#endif /* XSS */
     JSTrapHandler interruptHandler;
     jsint depth, len;
     jsval *sp, *newsp;
@@ -1410,6 +1724,71 @@
     JSPropertyOp getter, setter;
 #endif
     int stackDummy;
+#ifdef XSS /* XSS */
+	int xss_inited;
+#endif /* XSS */
+
+#ifdef XSS
+
+	taintoutput = XSS_NOT_TAINTED;
+	/* taint the root scope if the result or the old scope is tainted */
+	if (XSS_JSVAL_IS_TAINTED(*result)) {
+		taintoutput = XSS_TAINTED;
+	}
+	if ((cx->fp != NULL) && XSS_SCOPE_ISTAINTED(cx->fp->scope_current)) {
+		taintoutput = XSS_TAINTED;
+	}
+
+
+#define XSS_TAINT_JSVAL_ON_OUTPUT(myjsval)								\
+	/* check if tainting is necessary */							    \
+	if (taintoutput == XSS_TAINTED) {									\
+		/* add taintstructure if necessary */							\
+		if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(myjsval)) {					\
+			XSS_ADD_TAINTSTRUCTURE(myjsval);							\
+		}																\
+		/* taint value */												\
+		XSS_JSVAL_SET_ISTAINTED(XSS_TAINTED, myjsval);					\
+	}
+
+/* taint if the stackelement is tainted at the given depth (n) */
+#define XSS_TAINTOUTPUT_ON_STACK										\
+			taintout_stack = XSS_SCOPE_STACK_IS_TAINTED(sp, fp->scope_sp)
+
+/* set check scope */
+#define XSS_TAINTOUTPUT_ON_SCOPE										\
+			/* taint if the scope is tainted */							\
+			taintout_scope = XSS_SCOPE_ISTAINTED(fp->scope_current)
+
+/* check myval */
+#define XSS_TAINTOUTPUT_ON_VALUE(myval)									\
+			/* taint if the condition is tainted or the scope */		\
+			if (JSVAL_IS_OBJECT(myval)) {								\
+				if (JSVAL_TO_OBJECT(myval) != cx->globalObject) {		\
+					taintout_var = XSS_JSVAL_IS_TAINTED(myval)			\
+						|| taintout_var;								\
+				/* global Object is never tainted */					\
+				} else {												\
+					XSS_JSVAL_SET_ISTAINTED(XSS_NOT_TAINTED, myval);	\
+				}														\
+			} else {													\
+					taintout_var = XSS_JSVAL_IS_TAINTED(myval)			\
+						|| taintout_var;								\
+			}
+
+/* set the taintouput-var */
+#define XSS_CALC_TAINTOUTPUT											\
+	taintoutput = taintout_stack || taintout_scope || taintout_var;		\
+	if (xssGetDoLog() == XSS_DO_LOG) {									\
+		fprintf(stderr, "stack = %d scope = %d var = %d taintoutput = %d globalObject = %d\n", \
+			taintout_stack, taintout_scope, taintout_var, taintoutput, (uint)  cx->globalObject);	\
+	}																	\
+
+
+#ifdef XSS_DEBUG /* add tracing to stderr */
+	cx->tracefp = stderr;
+#endif /* XSS_DEBUG */
+#endif /* XSS */
 
     *result = JSVAL_VOID;
     rt = cx->runtime;
@@ -1418,6 +1797,45 @@
     fp = cx->fp;
     script = fp->script;
 
+#ifdef XSS /* XSS */
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+	setbuf(stderr,NULL);
+	do {
+		JSScript *script = fp->script;
+		if (script && script->filename) {
+#ifndef XSS_SHELL /* XSS_SHELL */
+			if (strstr(script->filename,"http:") != NULL) {
+				xssSetDoLog(XSS_DO_LOG);
+				fprintf(stderr, "script = %s\n", script->filename);
+			}
+#endif /* XSS_SHELL */
+		}
+	} while (0); 
+#ifdef XSS_SHELL /* XSS_SHELL */
+	xssSetDoLog(XSS_DO_LOG);
+	fprintf(stderr, "script = %s\n", script->filename);
+#endif /* XSS_SHELL */
+	if (xssGetDoLog() == XSS_DO_LOG)
+		fprintf(stderr, "js_Interpret: ");
+#endif /* XSS_DEBUG */
+	xss_inited = 0;
+	if (fp) {
+		/* initialize the xss-scope */
+		if (fp->scope_root == 0) {
+			XSS_SCOPE_INIT_ROOT((*fp),taintoutput, fp->taint_retval);
+			xss_inited = 1;
+		}
+
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+		if (xssGetDoLog() == XSS_DO_LOG) {
+			fprintf(stderr, "init fp %u\n", fp->scope_root);
+			fprintf(stderr, "+scopes: %d\n", fp->scope_count);
+			XSS_PRINT_SCOPE(cx->tracefp, script, fp->scope_current);
+		}
+#endif /* XSS_DEBUG */
+	}
+#endif /* XSS */
+
     /* Count of JS function calls that nest in this C js_Interpret frame. */
     inlineCallCount = 0;
 
@@ -1469,7 +1887,21 @@
     depth = (jsint) script->depth;
     len = -1;
 
-    /* Check for too much js_Interpret nesting, or too deep a C stack. */
+#ifdef XSS
+#ifdef XSS_DEBUG
+	if (xssGetDoLog() == XSS_DO_LOG) {
+		fprintf(stderr, "---------------------------------------------------------------------\n");
+		fprintf(stderr, "start of sourcecode\n");
+
+		js_Disassemble(cx,script,JS_TRUE, stderr);
+
+		fprintf(stderr, "end of sourcecode\n");
+		fprintf(stderr, "---------------------------------------------------------------------\n");
+	}
+#endif /* XSS_DEBUG */
+#endif /* XSS */
+
+	/* Check for too much js_Interpret nesting, or too deep a C stack. */
     if (++cx->interpLevel == MAX_INTERP_LEVEL ||
         !JS_CHECK_STACK_SIZE(cx, stackDummy)) {
         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_OVER_RECURSED);
@@ -1497,7 +1929,54 @@
         len = cs->length;
 
 #ifdef DEBUG
-        tracefp = (FILE *) cx->tracefp;
+		tracefp = (FILE *) cx->tracefp;
+#endif
+#ifdef XSS /* XSS */
+		XSS_RESET_TAINTOUTPUT(taintoutput);
+		XSS_RESET_TAINTOUTPUT(taintout_scope);
+		XSS_RESET_TAINTOUTPUT(taintout_var);
+		XSS_RESET_TAINTOUTPUT(taintout_stack);
+#ifdef XSS_DEBUG
+		if (xssGetDoLog() == XSS_DO_LOG) {
+			XSS_PRINTDEBUG_STR("\n");
+			if (fp->scope_root == NULL) {
+				XSS_PRINTDEBUG_STR("scope_root is null!\n");
+			}
+		}
+#endif /* XSS_DEBUG */
+		while ((fp->scope_root != fp->scope_current) 
+			&& !XSS_SCOPE_PC_IN_CURRENT(pc, fp->scope_current)) {
+#ifdef XSS_DEBUG
+			if (xssGetDoLog() == XSS_DO_LOG) {
+				XSS_PRINTDEBUG_STR("removing ");
+				XSS_PRINT_SCOPE(tracefp, script, fp->scope_current);
+				fprintf(stderr, "before count: %d\n", fp->scope_count);
+				XSS_PRINT_SCOPE(stderr, script, fp->scope_current);
+			}
+#endif /* XSS_DEBUG */
+			fp->scope_current = XSS_SCOPE_REMOVE(fp->scope_current);
+			if (fp->scope_current == NULL) {
+				fp->scope_current = fp->scope_root;
+#ifdef XSS_DEBUG
+				XSS_PRINTDEBUG_STR("fp->scope_current is null!\n");
+#endif /* XSS_DEBUG */
+			}
+#ifdef XSS_DEBUG
+			fp->scope_count--;
+			if (xssGetDoLog() == XSS_DO_LOG) {
+				XSS_PRINTDEBUG_STR("after ");
+				XSS_PRINT_SCOPE(stderr, script, fp->scope_current);
+				fprintf(stderr, "-scopes: %d\n", fp->scope_count);
+			}
+#endif /* XSS_DEBUG */
+		}
+		XSS_SCOPE_STACK_REMOVE(sp, fp->scope_sp);
+#endif /* XSS */
+
+#ifdef XSS_DEBUG
+		if (xssGetDoLog() == XSS_DO_LOG) {
+#endif /* XSS */
+#ifdef DEBUG
         if (tracefp) {
             intN nuses, n;
 
@@ -1511,17 +1990,25 @@
                 for (n = -nuses; n < 0; n++) {
                     str = js_DecompileValueGenerator(cx, n, sp[n], NULL);
                     if (str != NULL) {
-                        fprintf(tracefp, "%s %s",
-                                (n == -nuses) ? "  inputs:" : ",",
-                                JS_GetStringBytes(str));
+                        fprintf(tracefp, "%s [%d] %s(%u @ %x)", 
+                                (n == -nuses) ? "  inputs:" : ",", n, 
+                                JS_GetStringBytes(str), (uint) sp[n], (uint) sp+(n));
+#ifdef XSS
+#ifdef XSS_DEBUG
+						XSS_PRINT_GC_TAINT(sp[n]);
+#endif /* XSS_DEBUG */
+#endif /* XSS */
                     }
                 }
                 fprintf(tracefp, " @ %d\n", sp - fp->spbase);
             }
         }
 #endif
+#ifdef XSS_DEBUG
+		}
+#endif /* XSS */
 
-        if (interruptHandler) {
+		if (interruptHandler) {
             SAVE_SP(fp);
             switch (interruptHandler(cx, script, pc, &rval,
                                      rt->interruptHandlerData)) {
@@ -1545,26 +2032,65 @@
             LOAD_INTERRUPT_HANDLER(rt);
         }
 
+#ifdef XSS /* XSS */
+#ifdef XSS_DEBUG
+		if (xssGetDoLog() == XSS_DO_LOG) {
+			if (XSS_SCOPE_PC_IN_CURRENT(pc, fp->scope_current)) {
+				XSS_PRINT_SCOPE(tracefp, script, fp->scope_current);
+			}
+		}
+#endif /* XSS_DEBUG */
+#endif /* XSS */
+		
         switch (op) {
+		  /*
+		   * Just a no-operation
+		   * e.g. used for do {} while (false);
+		   */
           case JSOP_NOP:
             break;
 
+		  /*
+		   * Groups expressions
+		   * e.g. var x = (2 + y);
+		   */
           case JSOP_GROUP:
             obj = NULL;
             break;
 
+		  /*
+		   * pushes void on the stack
+		   * e.g. before: for (x in {}) {}
+		   */
           case JSOP_PUSH:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(JSVAL_VOID);
             break;
 
+		  /*
+		   * pops the element from the stack
+		   * e.g. after: var a = "2";
+		   */
           case JSOP_POP:
             sp--;
             break;
 
+		  /*
+		   * pops 2 elements from the stack
+		   * e.g. after: for (x in {}) {}
+		   */
           case JSOP_POP2:
             sp -= 2;
             break;
 
+		  /*
+		   * Swaps 2 stackelements. no longer needed.
+		   */
           case JSOP_SWAP:
             /*
              * N.B. JSOP_SWAP doesn't swap the corresponding generating pcs
@@ -1575,11 +2101,51 @@
             sp[-2] = ltmp;
             break;
 
+		  /*
+		   * pops the value from the stack and sets it as script-result
+		   * e.g.: "end";
+		   */
           case JSOP_POPV:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             *result = POP_OPND();
-            break;
-
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(*result);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(*result);
+
+			/* get the real type/value, if this isn't a internal call */
+			if (fp->taint_retval != XSS_TRUE) {
+				XSS_TO_ORIG_JSVAL(*result, *result);
+			}
+#endif /* XSS */
+            break;
+
+		  /*
+		   * Marks the beginning of a with-statement.
+		   * e.g. var dut = { }; with (dut) {};
+		   */
           case JSOP_ENTERWITH:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+			XSS_CALC_TAINTOUTPUT;
+
+			JS_BEGIN_MACRO			  
+			  jssrcnote *sn;
+			  ptrdiff_t len;
+			  /* get the length of the with-statement */
+              sn = js_GetSrcNote(fp->script, pc);
+              len = js_GetSrcNoteOffset(sn, 0);
+			  /* and create a new scope over the whole with-statement */
+			  XSS_NEW_SCOPE(fp->scope_current, pc, pc + len, taintoutput);
+		    JS_END_MACRO;
+#endif /* XSS */
             rval = FETCH_OPND(-1);
             VALUE_TO_OBJECT(cx, rval, obj);
             withobj = js_NewObject(cx, &js_WithClass, obj, fp->scopeChain);
@@ -1589,6 +2155,10 @@
             STORE_OPND(-1, OBJECT_TO_JSVAL(withobj));
             break;
 
+		  /*
+		   * Marks the end of a with-statement
+		   * e.g. var dut = {}; with (dut) {};
+		   */
           case JSOP_LEAVEWITH:
             rval = POP_OPND();
             JS_ASSERT(JSVAL_IS_OBJECT(rval));
@@ -1600,16 +2170,51 @@
             fp->scopeChain = JSVAL_TO_OBJECT(rval);
             break;
 
+		  /*
+		   * Sets returnval in try-catch-finally-statements
+		   * e.g. 	try {} catch (e) { return "1";} finally { return "2";}
+		   */
           case JSOP_SETRVAL:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             fp->rval = POP_OPND();
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(fp->rval);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(fp->rval);
+#endif /* XSS */
             break;
 
+		  
+		  /*
+		   * Sets returnvalue
+		   * e.g. return x;
+		   */
           case JSOP_RETURN:
             CHECK_BRANCH(-1);
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             fp->rval = POP_OPND();
             /* FALL THROUGH */
 
+		  /*
+		   * sets returnvalue in try-catch-finally-statements
+		   * e.g. 	try {} catch (e) { return "1";} finally { return "2";}
+		   */
           case JSOP_RETRVAL:    /* fp->rval already set */
+#ifdef XSS /* XSS */
+			if (op == JSOP_RETRVAL) {
+				/* check if the stack is tainted or the scope */
+				XSS_TAINTOUTPUT_ON_STACK;
+				XSS_TAINTOUTPUT_ON_SCOPE;
+			}
+#endif /* XSS */
             if (inlineCallCount)
           inline_return:
             {
@@ -1639,12 +2244,26 @@
                 vp = fp->argv - 2;
                 *vp = fp->rval;
 
+#ifdef XSS /* XSS */
+				XSS_TAINTOUTPUT_ON_VALUE(*vp);
+				XSS_CALC_TAINTOUTPUT;
+				XSS_TAINT_JSVAL_ON_OUTPUT(*vp);
+				XSS_SCOPES_FREE_ALL(fp);
+#endif /* XSS */
                 /* Restore cx->fp and release the inline frame's space. */
                 cx->fp = fp = fp->down;
+#ifdef XSS /* XSS */
+				if (fp->scope_root == NULL) {
+					XSS_SCOPE_INIT_ROOT((*fp), XSS_NOT_TAINTED, XSS_TRUE);
+				}
+#endif /* XSS */
                 JS_ARENA_RELEASE(&cx->stackPool, ifp->mark);
 
                 /* Restore sp to point just above the return value. */
                 fp->sp = vp + 1;
+#ifdef XSS /* XSS */
+				XSS_SET_STACK_TAINTED_ON_OUTPUT(fp->scope_sp,vp,taintoutput);
+#endif /* XSS */
                 RESTORE_SP(fp);
 
                 /* Restore the calling script's interpreter registers. */
@@ -1673,37 +2292,119 @@
             (void) POP();
             /* FALL THROUGH */
 #endif
+		  /*
+		   * an unconditional jump (generated by the engine)
+		   */
           case JSOP_GOTO:
             len = GET_JUMP_OFFSET(pc);
             CHECK_BRANCH(len);
             break;
 
+		  /*
+		   * jump on a condition
+		   * e.g. if (true) {} else {};
+		   */
           case JSOP_IFEQ:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             POP_BOOLEAN(cx, rval, cond);
-            if (cond == JS_FALSE) {
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+
+			/* new taint scope
+			   calculate then-branch */
+			xss_pc = pc + GET_JUMP_OFFSET(pc);
+			/* add else-branch (if exists) */
+			if (((JSOp) *(xss_pc-3)) == JSOP_GOTO) {
+				/* if it is a while then the new xss_pc is back not forward */
+				if (GET_JUMP_OFFSET(xss_pc-3) > 0) {
+					xss_pc = xss_pc + GET_JUMP_OFFSET(xss_pc-3);
+				}
+			}
+			XSS_NEW_SCOPE(fp->scope_current, pc, xss_pc, taintoutput);
+
+#endif /* XSS */
+			if (cond == JS_FALSE) {
                 len = GET_JUMP_OFFSET(pc);
                 CHECK_BRANCH(len);
             }
             break;
 
+		  /*
+		   * Jump if condition is false
+		   * used in e.g. do {} while {true};
+		   */
           case JSOP_IFNE:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             POP_BOOLEAN(cx, rval, cond);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+
+			/* new taint scope. the scope from the last time is already removed */
+			xss_pc = pc + GET_JUMP_OFFSET(pc);
+			XSS_NEW_SCOPE(fp->scope_current, pc, xss_pc, taintoutput);				
+#endif /* XSS */
             if (cond != JS_FALSE) {
                 len = GET_JUMP_OFFSET(pc);
                 CHECK_BRANCH(len);
             }
             break;
 
+		  /*
+		   * check boolean-or-expressions. it stops evaluating on
+		   * the first "true"-value
+		   * e.g. var a = 0 || b || 0; // stops on b if b == true
+		   */
           case JSOP_OR:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             POP_BOOLEAN(cx, rval, cond);
+#ifdef XSS
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+
+			/* new scope */
+			xss_pc = pc + GET_JUMP_OFFSET(pc);
+			XSS_NEW_SCOPE(fp->scope_current, pc, xss_pc, taintoutput);
+#endif /* XSS */
             if (cond == JS_TRUE) {
                 len = GET_JUMP_OFFSET(pc);
                 PUSH_OPND(rval);
             }
             break;
 
+		  /*
+		   * check boolean-and-expressions. it stops evaluating on
+		   * the first "false"-value
+		   * e.g. var a = 1 && b && 1; // stops on b if b == false
+		   */
           case JSOP_AND:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             POP_BOOLEAN(cx, rval, cond);
+#ifdef XSS
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+			/* new scope */
+			xss_pc = pc + GET_JUMP_OFFSET(pc);
+			XSS_NEW_SCOPE(fp->scope_current, pc, xss_pc, taintoutput);
+#endif /* XSS */
+
             if (cond == JS_FALSE) {
                 len = GET_JUMP_OFFSET(pc);
                 PUSH_OPND(rval);
@@ -1716,45 +2417,139 @@
             (void) POP();
             /* FALL THROUGH */
 #endif
+		  /*
+		   * an unconditional extended jump (generated by the engine)
+		   */
           case JSOP_GOTOX:
             len = GET_JUMPX_OFFSET(pc);
             CHECK_BRANCH(len);
             break;
 
+		  /*
+		   * (extended) jump on a condition 
+		   * e.g. if (true) {} else {};
+		   */
           case JSOP_IFEQX:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             POP_BOOLEAN(cx, rval, cond);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+
+			/* new taint scope
+			   calculate then-branch */
+			xss_pc = pc + GET_JUMPX_OFFSET(pc);
+			/* add else-branch (if exists) */
+			if (((JSOp) *(xss_pc-3)) == JSOP_GOTO) {
+				/* if it is a while then the new xss_pc is back not forward */
+				if (GET_JUMPX_OFFSET(xss_pc-3) > 0) {
+					xss_pc = xss_pc + GET_JUMPX_OFFSET(xss_pc-3);
+				}
+			}
+			XSS_NEW_SCOPE(fp->scope_current, pc, xss_pc, taintoutput);
+#endif /* XSS */
             if (cond == JS_FALSE) {
                 len = GET_JUMPX_OFFSET(pc);
                 CHECK_BRANCH(len);
             }
             break;
 
+		  /*
+		   * (extended) jump if condition is false
+		   * used in e.g. do {} while {true};
+		   */
           case JSOP_IFNEX:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             POP_BOOLEAN(cx, rval, cond);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+
+			/* new taint scope. the scope from the last time is already removed */
+			xss_pc = pc + GET_JUMPX_OFFSET(pc);
+			XSS_NEW_SCOPE(fp->scope_current, pc, xss_pc, taintoutput);
+#endif /* XSS */
             if (cond != JS_FALSE) {
                 len = GET_JUMPX_OFFSET(pc);
                 CHECK_BRANCH(len);
             }
             break;
 
+		  /*
+		   * check boolean-or-expressions. it stops evaluating on
+		   * the first "true"-value
+		   * e.g. var a = 0 || b || 0; // stops on b if b == true
+		   */
           case JSOP_ORX:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             POP_BOOLEAN(cx, rval, cond);
+#ifdef XSS
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+
+			/* new scope */
+			xss_pc = pc + GET_JUMPX_OFFSET(pc);
+			XSS_NEW_SCOPE(fp->scope_current, pc, xss_pc, taintoutput);
+#endif /* XSS */
             if (cond == JS_TRUE) {
                 len = GET_JUMPX_OFFSET(pc);
                 PUSH_OPND(rval);
             }
             break;
 
+		  /*
+		   * check boolean-and-expressions. it stops evaluating on
+		   * the first "false"-value
+		   * e.g. var a = 1 && b && 1; // stops on b if b == false
+		   */
           case JSOP_ANDX:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             POP_BOOLEAN(cx, rval, cond);
+#ifdef XSS
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+
+			/* new scope */
+			xss_pc = pc + GET_JUMPX_OFFSET(pc);
+			XSS_NEW_SCOPE(fp->scope_current, pc, xss_pc, taintoutput);
+#endif /* XSS */
             if (cond == JS_FALSE) {
                 len = GET_JUMPX_OFFSET(pc);
                 PUSH_OPND(rval);
             }
             break;
 
+		  /*
+		   * Converts stackelement into object
+		   * e.g. for (p in Array) {}
+		   */
           case JSOP_TOOBJECT:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             SAVE_SP(fp);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             ok = js_ValueToObject(cx, FETCH_OPND(-1), &obj);
             if (!ok)
                 goto out;
@@ -1785,7 +2580,16 @@
     JS_END_MACRO
 
 #if JS_HAS_IN_OPERATOR
+		  /*
+		   * for the "in" operator (not the "in" in a for-in-loop!)
+		   * e.g. var a = "foo" in x;
+		   */
           case JSOP_IN:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             rval = FETCH_OPND(-1);
             if (JSVAL_IS_PRIMITIVE(rval)) {
                 str = js_DecompileValueGenerator(cx, -1, rval, NULL);
@@ -1803,12 +2607,22 @@
             ok = OBJ_LOOKUP_PROPERTY(cx, obj, id, &obj2, &prop);
             if (!ok)
                 goto out;
+#ifdef XSS /* XSS */
+			OBJ_GET_PROPERTY(cx,obj,id, &xss_jsval);
+			/* check if the output has to be tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(xss_jsval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             STORE_OPND(-1, BOOLEAN_TO_JSVAL(prop != NULL));
             if (prop)
                 OBJ_DROP_PROPERTY(cx, obj2, prop);
             break;
 #endif /* JS_HAS_IN_OPERATOR */
 
+		  /*
+		   * for-in-loop with a property
+		   * e.g. var ob = { 'x' : 0 };for (ob.x in dut){};
+		   */
           case JSOP_FORPROP:
             /*
              * Handle JSOP_FORPROP first, so the cost of the goto do_forinloop
@@ -1820,6 +2634,10 @@
             i = -2;
             goto do_forinloop;
 
+		  /*
+		   * for-in-loop with a name
+		   * e.g. var test = 0; for (test in dut) {}
+		   */
           case JSOP_FORNAME:
             atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
@@ -1841,7 +2659,15 @@
             lval = OBJECT_TO_JSVAL(obj);
             /* FALL THROUGH */
 
+		  /*
+		   * for-in-loop with an function-argument
+		   * e.g. function test (a) { ... for (a in dut) { ... }}
+		   */
           case JSOP_FORARG:
+		  /*
+		   * for-in-loop with an function-variable
+		   * e.g. function test () { var a; ... for (a in dut) { ... }}
+		   */
           case JSOP_FORVAR:
             /*
              * JSOP_FORARG and JSOP_FORVAR don't require any lval computation
@@ -1850,6 +2676,10 @@
              */
             /* FALL THROUGH */
 
+		  /*
+		   * for-in-loop with an element
+		   * e.g. for (ob[0] in dut)
+		   */
           case JSOP_FORELEM:
             /*
              * JSOP_FORELEM simply initializes or updates the iteration state
@@ -1864,6 +2694,12 @@
              * ECMA-compatible for/in evals the object just once, before loop.
              * Bad old bytecodes (since removed) did it on every iteration.
              */
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_TAINTOUTPUT_ON_VALUE(sp[i]);
+#endif /* XSS */
             obj = JSVAL_TO_OBJECT(sp[i]);
 
             /* If the thing to the right of 'in' has no properties, break. */
@@ -1889,7 +2725,11 @@
             rval = *vp;
 
             /* Is this the first iteration ? */
+#ifndef XSS /* original */
             if (JSVAL_IS_VOID(rval)) {
+#else /* XSS */
+            if (XSS_JSVAL_GET_TYPE(rval) == JSVAL_VOID) {
+#endif /* XSS */
                 /* Yes, create a new JSObject to hold the iterator state */
                 propobj = js_NewObject(cx, &prop_iterator_class, NULL, obj);
                 if (!propobj) {
@@ -1998,6 +2838,15 @@
                 rval = STRING_TO_JSVAL(str);
             }
 
+#ifdef XSS /* XSS */
+			XSS_CALC_TAINTOUTPUT;
+			if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(rval)) {
+				XSS_ADD_TAINTSTRUCTURE(rval);
+			}
+			XSS_JSVAL_SET_ISTAINTED(XSS_NOT_TAINTED, rval);
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+#endif /* XSS */
+
             switch (op) {
               case JSOP_FORARG:
                 slot = GET_ARGNO(pc);
@@ -2022,6 +2871,12 @@
 
                 /* Set the variable obj[id] to refer to rval. */
                 fp->flags |= JSFRAME_ASSIGNING;
+#ifdef XSS /* XSS */
+				/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+				if (taintoutput == XSS_TAINTED) {
+					XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+				}
+#endif /* XSS */
                 ok = OBJ_SET_PROPERTY(cx, obj, id, &rval);
                 fp->flags &= ~JSFRAME_ASSIGNING;
                 if (!ok)
@@ -2034,19 +2889,42 @@
 
           end_forinloop:
             sp += i + 1;
+#ifdef XSS /* XSS */
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(rval);
             break;
 
+		  /*
+		   * Duplicates the topmost stackelement.
+		   * Used for properties and assignments, that also use the lval
+		   * e.g. t.test += 1;
+		   */
           case JSOP_DUP:
             JS_ASSERT(sp > fp->spbase);
             rval = sp[-1];
             PUSH_OPND(rval);
             break;
 
+		  /*
+		   * Duplicates the 2 topmost stackelements.
+		   * Used for Array and assignments, that also use the lval
+		   * e.g. t[0] += 1;
+		   */
           case JSOP_DUP2:
             JS_ASSERT(sp - 1 > fp->spbase);
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             lval = FETCH_OPND(-2);
             rval = FETCH_OPND(-1);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(lval);
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(lval);
             PUSH_OPND(rval);
             break;
@@ -2129,10 +3007,24 @@
         }                                                                     \
     JS_END_MACRO
 
+		  /*
+		   * sets a constant
+		   * e.g. const x = 3;
+		   */
           case JSOP_SETCONST:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             obj = fp->varobj;
             atom = GET_ATOM(cx, script, pc);
             rval = FETCH_OPND(-1);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+#endif /* XSS */
             ok = OBJ_DEFINE_PROPERTY(cx, obj, (jsid)atom, rval, NULL, NULL,
                                      JSPROP_ENUMERATE | JSPROP_PERMANENT |
                                      JSPROP_READONLY,
@@ -2142,7 +3034,16 @@
             STORE_OPND(-1, rval);
             break;
 
+		  /*
+		   * Puts the variable on the stack for later JSOP_SETNAME
+		   * e.g. b = ... puts "b" on the stack
+		   */
           case JSOP_BINDNAME:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             atom = GET_ATOM(cx, script, pc);
             SAVE_SP(fp);
             obj = js_FindIdentifierBase(cx, (jsid)atom);
@@ -2150,17 +3051,60 @@
                 ok = JS_FALSE;
                 goto out;
             }
+#ifdef XSS /* XSS */
+			/* only check the object if it isn't the global object */
+			xss_jsval = OBJECT_TO_JSVAL(obj);
+			XSS_TAINTOUTPUT_ON_VALUE(xss_jsval);
+			XSS_CALC_TAINTOUTPUT;
+
+            PUSH_OPND(xss_jsval);
+#else /* not XSS */
             PUSH_OPND(OBJECT_TO_JSVAL(obj));
+#endif /* XSS */
             break;
 
+		  /*
+		   * Assigns a value to a variable
+		   * e.g. a = b; takes "a" and "b" from the stack and
+		   * assigns the value of "b" to "a"
+		   */
           case JSOP_SETNAME:
-            atom = GET_ATOM(cx, script, pc);
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
+			atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
             rval = FETCH_OPND(-1);
             lval = FETCH_OPND(-2);
-            JS_ASSERT(!JSVAL_IS_PRIMITIVE(lval));
+#ifdef XSS_DEBUG
+			/* taint rval, if the var is called "evil". e.g. var evil = ... */
+			str = ATOM_TO_STRING(atom);
+			if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(rval)) {
+				XSS_ADD_TAINTSTRUCTURE(rval);
+			}
+			XSS_TAINT_EVILSTR(str, rval);
+
+			/* taint rval if it is the string "evil". e.g. ... = "evil"; */
+			if (JSVAL_IS_STRING(rval)) {
+				str = js_ValueToString(cx,rval);
+				XSS_TAINT_EVILSTR(str, rval);
+			}
+#endif /* XSS_DEBUG */
+
+			JS_ASSERT(!JSVAL_IS_PRIMITIVE(lval));
             obj  = JSVAL_TO_OBJECT(lval);
             SAVE_SP(fp);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+			/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+			if (taintoutput == XSS_TAINTED) {
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+			}
+#endif /* XSS */
             CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval));
             if (!ok)
                 goto out;
@@ -2168,6 +3112,7 @@
             STORE_OPND(-1, rval);
             break;
 
+#ifndef XSS /* original */
 #define INTEGER_OP(OP, EXTRA_CODE)                                            \
     JS_BEGIN_MACRO                                                            \
         FETCH_INT(cx, -1, j);                                                 \
@@ -2179,18 +3124,49 @@
         sp--;                                                                 \
         STORE_NUMBER(cx, -1, d);                                              \
     JS_END_MACRO
+#else /* XSS */
+#define INTEGER_OP(OP, EXTRA_CODE)                                            \
+    JS_BEGIN_MACRO                                                            \
+		/* check if the stack is tainted or the scope */					  \
+		XSS_TAINTOUTPUT_ON_STACK;											  \
+		XSS_TAINTOUTPUT_ON_SCOPE;											  \
+		XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));							  \
+		XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-2));							  \
+		XSS_CALC_TAINTOUTPUT;												  \
+        FETCH_INT(cx, -1, j);                                                 \
+        FETCH_INT(cx, -2, i);                                                 \
+        if (!ok)                                                              \
+            goto out;                                                         \
+        EXTRA_CODE                                                            \
+        d = i OP j;                                                           \
+        sp--;                                                                 \
+        STORE_NUMBER(cx, -1, d);                                              \
+    JS_END_MACRO
+#endif /* XSS */
 
 #define BITWISE_OP(OP)          INTEGER_OP(OP, (void) 0;)
 #define SIGNED_SHIFT_OP(OP)     INTEGER_OP(OP, j &= 31;)
 
+		  /*
+		   * Bitwise or
+		   * a = a | 2;
+		   */
           case JSOP_BITOR:
             BITWISE_OP(|);
             break;
 
+		  /*
+		   * Bitwise xor
+		   * a = a ^ 2;
+		   */
           case JSOP_BITXOR:
             BITWISE_OP(^);
             break;
 
+		  /*
+		   * Bitwise and
+		   * a = a & 2;
+		   */
           case JSOP_BITAND:
             BITWISE_OP(&);
             break;
@@ -2204,6 +3180,7 @@
 #define COMPARE_DOUBLES(LVAL, OP, RVAL, IFNAN) ((LVAL) OP (RVAL))
 #endif
 
+#ifndef XSS /* original */
 #define RELATIONAL_OP(OP)                                                     \
     JS_BEGIN_MACRO                                                            \
         rval = FETCH_OPND(-1);                                                \
@@ -2235,7 +3212,49 @@
         sp--;                                                                 \
         STORE_OPND(-1, BOOLEAN_TO_JSVAL(cond));                               \
     JS_END_MACRO
+#else /* XSS */
+#define RELATIONAL_OP(OP)                                                     \
+    JS_BEGIN_MACRO                                                            \
+        rval = FETCH_OPND(-1);                                                \
+        lval = FETCH_OPND(-2);                                                \
+		/* check if the stack is tainted or the scope */					  \
+		XSS_TAINTOUTPUT_ON_STACK;											  \
+		XSS_TAINTOUTPUT_ON_SCOPE;											  \
+		XSS_TAINTOUTPUT_ON_VALUE(lval);										  \
+		XSS_TAINTOUTPUT_ON_VALUE(rval);										  \
+		XSS_CALC_TAINTOUTPUT;												  \
+        /* Optimize for two int-tagged operands (typical loop control). */    \
+        if ((lval & rval) & JSVAL_INT) {                                      \
+            ltmp = lval ^ JSVAL_VOID;                                         \
+            rtmp = rval ^ JSVAL_VOID;                                         \
+            if (ltmp && rtmp) {                                               \
+                cond = JSVAL_TO_INT(lval) OP JSVAL_TO_INT(rval);              \
+            } else {                                                          \
+                d  = ltmp ? JSVAL_TO_INT(lval) : *rt->jsNaN;                  \
+                d2 = rtmp ? JSVAL_TO_INT(rval) : *rt->jsNaN;                  \
+                cond = COMPARE_DOUBLES(d, OP, d2, JS_FALSE);                  \
+            }                                                                 \
+        } else {                                                              \
+            VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_NUMBER, &lval);               \
+            VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_NUMBER, &rval);               \
+            if (JSVAL_IS_STRING(lval) && JSVAL_IS_STRING(rval)) {             \
+                str  = JSVAL_TO_STRING(lval);                                 \
+                str2 = JSVAL_TO_STRING(rval);                                 \
+                cond = js_CompareStrings(str, str2) OP 0;                     \
+            } else {                                                          \
+                VALUE_TO_NUMBER(cx, lval, d);                                 \
+                VALUE_TO_NUMBER(cx, rval, d2);                                \
+                cond = COMPARE_DOUBLES(d, OP, d2, JS_FALSE);                  \
+            }                                                                 \
+        }                                                                     \
+        sp--;                                                                 \
+		/* store result in a double (and taint it) */						  \
+	    XSS_BOOLEAN_TO_DOUBLE_JSVAL(cond,doubleval);						  \
+		STORE_OPND(-1, DOUBLE_TO_JSVAL(doubleval));							  \
+    JS_END_MACRO
+#endif /* XSS */
 
+#ifndef XSS /* original */
 #define EQUALITY_OP(OP, IFNAN)                                                \
     JS_BEGIN_MACRO                                                            \
         rval = FETCH_OPND(-1);                                                \
@@ -2283,15 +3302,84 @@
         STORE_OPND(-1, BOOLEAN_TO_JSVAL(cond));                               \
     JS_END_MACRO
 
+#else /* XSS */
+
+#define EQUALITY_OP(OP, IFNAN)                                                \
+    JS_BEGIN_MACRO                                                            \
+		/* check if the stack is tainted or the scope */					  \
+		XSS_TAINTOUTPUT_ON_STACK;											  \
+		XSS_TAINTOUTPUT_ON_SCOPE;											  \
+        rval = FETCH_OPND(-1);                                                \
+        lval = FETCH_OPND(-2);                                                \
+		XSS_TAINTOUTPUT_ON_VALUE(lval);										  \
+		XSS_TAINTOUTPUT_ON_VALUE(rval);										  \
+		XSS_CALC_TAINTOUTPUT;												  \
+        ltmp = JSVAL_TAG(lval);                                               \
+        rtmp = JSVAL_TAG(rval);                                               \
+        if (ltmp == rtmp) {                                                   \
+            if (ltmp == JSVAL_STRING) {                                       \
+                str  = JSVAL_TO_STRING(lval);                                 \
+                str2 = JSVAL_TO_STRING(rval);                                 \
+                cond = js_CompareStrings(str, str2) OP 0;                     \
+            } else if (ltmp == JSVAL_DOUBLE) {                                \
+                d  = *JSVAL_TO_DOUBLE(lval);                                  \
+                d2 = *JSVAL_TO_DOUBLE(rval);                                  \
+                cond = COMPARE_DOUBLES(d, OP, d2, IFNAN);                     \
+            } else {                                                          \
+                /* Handle all undefined (=>NaN) and int combinations. */      \
+                cond = lval OP rval;                                          \
+            }                                                                 \
+        } else {                                                              \
+			jsval xss_temp_lval, xss_temp_rval;								  \
+			XSS_TO_ORIG_JSVAL(lval, xss_temp_lval);							  \
+			XSS_TO_ORIG_JSVAL(rval, xss_temp_rval);							  \
+            if (JSVAL_IS_NULL(xss_temp_lval) || JSVAL_IS_VOID(xss_temp_lval)) {                 \
+                cond = (JSVAL_IS_NULL(xss_temp_rval) || JSVAL_IS_VOID(xss_temp_rval)) OP 1;     \
+            } else if (JSVAL_IS_NULL(xss_temp_rval) || JSVAL_IS_VOID(xss_temp_rval)) {          \
+                cond = 1 OP 0;                                                \
+            } else {                                                          \
+                if (ltmp == JSVAL_OBJECT) {                                   \
+                    VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &lval);         \
+                    ltmp = JSVAL_TAG(lval);                                   \
+                } else if (rtmp == JSVAL_OBJECT) {                            \
+                    VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_VOID, &rval);         \
+                    rtmp = JSVAL_TAG(rval);                                   \
+                }                                                             \
+                if (ltmp == JSVAL_STRING && rtmp == JSVAL_STRING) {           \
+                    str  = JSVAL_TO_STRING(lval);                             \
+                    str2 = JSVAL_TO_STRING(rval);                             \
+                    cond = js_CompareStrings(str, str2) OP 0;                 \
+                } else {                                                      \
+                    VALUE_TO_NUMBER(cx, lval, d);                             \
+                    VALUE_TO_NUMBER(cx, rval, d2);                            \
+                    cond = COMPARE_DOUBLES(d, OP, d2, IFNAN);                 \
+                }                                                             \
+            }                                                                 \
+        }                                                                     \
+        sp--;                                                                 \
+	    XSS_BOOLEAN_TO_DOUBLE_JSVAL(cond,doubleval);						  \
+		STORE_OPND(-1, DOUBLE_TO_JSVAL(doubleval));							  \
+    JS_END_MACRO
+#endif /* XSS */
+
+		  /*
+		   * Compares 2 values
+		   * e.g. var a = x == 2;
+		   */
           case JSOP_EQ:
             EQUALITY_OP(==, JS_FALSE);
             break;
 
+		  /*
+		   * Compares 2 values
+		   * e.g. var a = x != 2;
+		   */
           case JSOP_NE:
             EQUALITY_OP(!=, JS_TRUE);
             break;
 
 #if !JS_BUG_FALLIBLE_EQOPS
+#ifndef XSS /* original */
 #define NEW_EQUALITY_OP(OP, IFNAN)                                            \
     JS_BEGIN_MACRO                                                            \
         rval = FETCH_OPND(-1);                                                \
@@ -2326,34 +3414,137 @@
         sp--;                                                                 \
         STORE_OPND(-1, BOOLEAN_TO_JSVAL(cond));                               \
     JS_END_MACRO
+#else /* XSS: converted the values and then stored it differently */
+#define NEW_EQUALITY_OP(OP, IFNAN)                                            \
+    JS_BEGIN_MACRO                                                            \
+		/* check if the stack is tainted or the scope */					  \
+		XSS_TAINTOUTPUT_ON_STACK;											  \
+		XSS_TAINTOUTPUT_ON_SCOPE;											  \
+        rval = FETCH_OPND(-1);                                                \
+        lval = FETCH_OPND(-2);                                                \
+		XSS_TAINTOUTPUT_ON_VALUE(lval);										  \
+		XSS_TAINTOUTPUT_ON_VALUE(rval);										  \
+		XSS_CALC_TAINTOUTPUT;												  \
+ 		XSS_TO_ORIG_JSVAL(rval, rval);										  \
+		XSS_TO_ORIG_JSVAL(lval, lval);										  \
+        ltmp = JSVAL_TAG(lval);                                               \
+        rtmp = JSVAL_TAG(rval);                                               \
+        if (ltmp == rtmp) {                                                   \
+            if (ltmp == JSVAL_STRING) {                                       \
+                str  = JSVAL_TO_STRING(lval);                                 \
+                str2 = JSVAL_TO_STRING(rval);                                 \
+                cond = js_CompareStrings(str, str2) OP 0;                     \
+            } else if (ltmp == JSVAL_DOUBLE) {                                \
+                d  = *JSVAL_TO_DOUBLE(lval);                                  \
+                d2 = *JSVAL_TO_DOUBLE(rval);                                  \
+                cond = COMPARE_DOUBLES(d, OP, d2, IFNAN);                     \
+            } else {                                                          \
+                cond = lval OP rval;                                          \
+            }                                                                 \
+        } else {                                                              \
+            if (ltmp == JSVAL_DOUBLE && JSVAL_IS_INT(rval)) {                 \
+                d  = *JSVAL_TO_DOUBLE(lval);                                  \
+                d2 = JSVAL_TO_INT(rval);                                      \
+                cond = COMPARE_DOUBLES(d, OP, d2, IFNAN);                     \
+            } else if (JSVAL_IS_INT(lval) && rtmp == JSVAL_DOUBLE) {          \
+                d  = JSVAL_TO_INT(lval);                                      \
+                d2 = *JSVAL_TO_DOUBLE(rval);                                  \
+                cond = COMPARE_DOUBLES(d, OP, d2, IFNAN);                     \
+            } else {                                                          \
+                cond = lval OP rval;                                          \
+            }                                                                 \
+        }                                                                     \
+        sp--;                                                                 \
+	    XSS_BOOLEAN_TO_DOUBLE_JSVAL(cond,doubleval);						  \
+		STORE_OPND(-1, DOUBLE_TO_JSVAL(doubleval));							  \
+    JS_END_MACRO
+#endif /* XSS */
 
+		  /*
+		   * Compares to operands for equality (including type)
+		   * e.g. var a = 1; var b = "1"; print(a === b);
+		   */
           case JSOP_NEW_EQ:
             NEW_EQUALITY_OP(==, JS_FALSE);
             break;
 
+		  /*
+		   * Compares to operands for unequality (including type)
+		   * e.g. var a = 1; var b = "1"; print(a !== b);
+		   */
           case JSOP_NEW_NE:
             NEW_EQUALITY_OP(!=, JS_TRUE);
             break;
 
 #if JS_HAS_SWITCH_STATEMENT
+		  /*
+		   * Checks condition in a case-statement.
+		   * e.g. switch(x) { case (x == 1): }
+		   */
           case JSOP_CASE:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             NEW_EQUALITY_OP(==, JS_FALSE);
             (void) POP();
+#ifdef XSS /* XSS */
+			XSS_CALC_TAINTOUTPUT;
+		    /* reset the stack-pointer if necessary */
+			XSS_SCOPE_STACK_REMOVE(sp, fp->scope_sp);
+			/* create a scope */
+			if (taintoutput == XSS_TAINTED) {
+				xss_temp_scope = XSS_SCOPE_WITH_OP_BACK(fp->scope_current, JSOP_CONDSWITCH);
+				if (xss_temp_scope != NULL) {
+					xss_pc = xss_temp_scope->to;
+					XSS_NEW_SCOPE(fp->scope_current, pc, xss_pc, taintoutput);
+				}
+			}
+#endif /* XSS */
             if (cond) {
                 len = GET_JUMP_OFFSET(pc);
                 CHECK_BRANCH(len);
             } else {
+#ifdef XSS /* XSS */
+				XSS_SET_STACK_TAINTED_ON_OUTPUT(fp->scope_sp,sp, taintoutput);
+#endif /* XSS */
                 PUSH(lval);
             }
             break;
 
+		  /*
+		   * Checks condition in a case-statement (with many cases).
+		   * e.g. switch(x) { case (x == 1): }
+		   */
           case JSOP_CASEX:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             NEW_EQUALITY_OP(==, JS_FALSE);
             (void) POP();
+#ifdef XSS /* XSS */
+			XSS_CALC_TAINTOUTPUT;
+		    /* reset the stack-pointer if necessary */
+			XSS_SCOPE_STACK_REMOVE(sp, fp->scope_sp);
+			/* create a scope */
+			if (taintoutput == XSS_TAINTED) {
+				xss_temp_scope = XSS_SCOPE_WITH_OP_BACK(fp->scope_current, JSOP_CONDSWITCH);
+				if (xss_temp_scope != NULL) {
+					xss_pc = xss_temp_scope->to;
+					XSS_NEW_SCOPE(fp->scope_current, pc, xss_pc, taintoutput);
+				}
+			}
+#endif /* XSS */
             if (cond) {
                 len = GET_JUMPX_OFFSET(pc);
                 CHECK_BRANCH(len);
             } else {
+#ifdef XSS /* XSS */
+				XSS_SET_STACK_TAINTED_ON_OUTPUT(fp->scope_sp,sp, taintoutput);
+#endif /* XSS */
                 PUSH(lval);
             }
             break;
@@ -2361,18 +3552,34 @@
 
 #endif /* !JS_BUG_FALLIBLE_EQOPS */
 
+		  /*
+		   * compares to value for less-than
+		   * e.g. a < 3
+		   */
           case JSOP_LT:
             RELATIONAL_OP(<);
             break;
 
+		  /*
+		   * compares to value for less-equal
+		   * e.g. a <= 3
+		   */
           case JSOP_LE:
             RELATIONAL_OP(<=);
             break;
 
+		  /*
+		   * compares to value for greater-than
+		   * e.g. a > 3
+		   */
           case JSOP_GT:
             RELATIONAL_OP(>);
             break;
 
+		  /*
+		   * compares to value for greater-equal
+		   * e.g. a >= 3
+		   */
           case JSOP_GE:
             RELATIONAL_OP(>=);
             break;
@@ -2380,18 +3587,38 @@
 #undef EQUALITY_OP
 #undef RELATIONAL_OP
 
+		  /*
+		   * Binary leftshift
+		   * e.g. 1 << a;
+		   */
           case JSOP_LSH:
             SIGNED_SHIFT_OP(<<);
-            break;
+			break;
 
+		  /*
+		   * Binary rightshift
+		   * e.g. a >> 3;
+		   */
           case JSOP_RSH:
             SIGNED_SHIFT_OP(>>);
             break;
 
+		  /*
+		   * Unsigned binary-rightshift
+		   * e.g. a >>> 3;
+		   */
           case JSOP_URSH:
           {
             uint32 u;
 
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-2));
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             FETCH_INT(cx, -1, j);
             FETCH_UINT(cx, -2, u);
             j &= 31;
@@ -2405,9 +3632,23 @@
 #undef BITWISE_OP
 #undef SIGNED_SHIFT_OP
 
+		  /*
+		   * Adds to values
+		   * e.g. a + b;
+		   */
           case JSOP_ADD:
+#ifdef XSS
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             rval = FETCH_OPND(-1);
             lval = FETCH_OPND(-2);
+#ifdef XSS 
+			XSS_TAINTOUTPUT_ON_VALUE(lval);
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             VALUE_TO_PRIMITIVE(cx, lval, JSTYPE_VOID, &ltmp);
             VALUE_TO_PRIMITIVE(cx, rval, JSTYPE_VOID, &rtmp);
             if ((cond = JSVAL_IS_STRING(ltmp)) || JSVAL_IS_STRING(rtmp)) {
@@ -2438,8 +3679,27 @@
             }
             break;
 
+#ifndef XSS /* original */
+
+#define BINARY_OP(OP)                                                         \
+    JS_BEGIN_MACRO                                                            \
+        FETCH_NUMBER(cx, -1, d2);                                             \
+        FETCH_NUMBER(cx, -2, d);                                              \
+        d = d OP d2;                                                          \
+        sp--;                                                                 \
+        STORE_NUMBER(cx, -1, d);                                              \
+    JS_END_MACRO
+
+#else /* XSS */
+
 #define BINARY_OP(OP)                                                         \
     JS_BEGIN_MACRO                                                            \
+		/* check if the stack is tainted or the scope */					  \
+		XSS_TAINTOUTPUT_ON_STACK;											  \
+		XSS_TAINTOUTPUT_ON_SCOPE;											  \
+		XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));							  \
+		XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-2));							  \
+		XSS_CALC_TAINTOUTPUT;												  \
         FETCH_NUMBER(cx, -1, d2);                                             \
         FETCH_NUMBER(cx, -2, d);                                              \
         d = d OP d2;                                                          \
@@ -2447,15 +3707,37 @@
         STORE_NUMBER(cx, -1, d);                                              \
     JS_END_MACRO
 
+#endif /* XSS */
+
+		  /*
+		   * subtracts one operand from another
+		   * e.g. 10 - a;
+		   */
           case JSOP_SUB:
             BINARY_OP(-);
             break;
 
+		  /*
+		   * Multiplies two operands
+		   * e.g. 10 * a;
+		   */
           case JSOP_MUL:
             BINARY_OP(*);
             break;
 
+		  /*
+		   * Divides an operand through another
+		   * e.g. a / b;
+		   */
           case JSOP_DIV:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-2));
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             FETCH_NUMBER(cx, -1, d2);
             FETCH_NUMBER(cx, -2, d);
             sp--;
@@ -2479,7 +3761,19 @@
             }
             break;
 
+		  /*
+		   * math. modula-operation
+		   * e.g. 10 % a;
+		   */
           case JSOP_MOD:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-2));
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             FETCH_NUMBER(cx, -1, d2);
             FETCH_NUMBER(cx, -2, d);
             sp--;
@@ -2495,19 +3789,56 @@
             }
             break;
 
+		  /*
+		   * Boolean-not
+		   * e.g. var x = true; print(!x);
+		   */
           case JSOP_NOT:
-            POP_BOOLEAN(cx, rval, cond);
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
+			POP_BOOLEAN(cx, rval, cond);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(BOOLEAN_TO_JSVAL(!cond));
             break;
 
+		  /*
+		   * bitwise not. e.g. a = ~a;
+		   */
           case JSOP_BITNOT:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             FETCH_INT(cx, -1, i);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             d = (jsdouble) ~i;
             STORE_NUMBER(cx, -1, d);
             break;
 
+		  /*
+		   * Negates a number
+		   * e.g. var x = -y;
+		   */
           case JSOP_NEG:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             FETCH_NUMBER(cx, -1, d);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+#endif /* XSS */
 #ifdef HPUX
             /*
              * Negation of a zero doesn't produce a negative
@@ -2518,15 +3849,40 @@
 #else
             d = -d;
 #endif
+#ifdef XSS /* XSS */
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             STORE_NUMBER(cx, -1, d);
             break;
 
+		  /*
+		   * Convert to number for unary +
+		   * e.g. var a = +x;
+		   */
           case JSOP_POS:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             FETCH_NUMBER(cx, -1, d);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             STORE_NUMBER(cx, -1, d);
             break;
 
+		  /*
+		   * creates a new object
+		   * e.g. x = new Object();
+		   */
           case JSOP_NEW:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             /* Get immediate argc and find the constructor function. */
             argc = GET_ARGC(pc);
 
@@ -2534,6 +3890,10 @@
           do_new:
 #endif
             vp = sp - (2 + argc);
+#ifdef XSS /* XSS */
+			/* is the function tainted? */
+			XSS_TAINTOUTPUT_ON_VALUE(*vp);
+#endif /* XSS */
             JS_ASSERT(vp >= fp->spbase);
 
             fun = NULL;
@@ -2582,7 +3942,19 @@
             /* Now we have an object with a constructor method; call it. */
             vp[1] = OBJECT_TO_JSVAL(obj);
             SAVE_SP(fp);
+#ifdef XSS
+			/* save the current taint-state of the scope and 
+			   taint the scope temporary if a variable is tainted. */
+			taintoutput_temp = XSS_SCOPE_ISTAINTED(cx->fp->scope_current);
+			XSS_CALC_TAINTOUTPUT;
+			if (taintoutput == XSS_TAINTED) {
+				cx->fp->scope_current->istainted = XSS_TAINTED;
+			}
+#endif /* XSS */
             ok = js_Invoke(cx, argc, JSINVOKE_CONSTRUCT);
+#ifdef XSS			
+			cx->fp->scope_current->istainted = taintoutput_temp;
+#endif /* XSS */
             RESTORE_SP(fp);
             LOAD_BRANCH_CALLBACK(cx);
             LOAD_INTERRUPT_HANDLER(rt);
@@ -2608,11 +3980,26 @@
                 ok = JS_FALSE;
                 goto out;
             }
+#ifdef XSS /* XSS */
+			/* check if the output has to be tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+#endif /* XSS */
             obj = JSVAL_TO_OBJECT(rval);
             JS_RUNTIME_METER(rt, constructs);
             break;
 
+		  /*
+		   * Delete a variable-name
+		   * e.g. var x = 1; delete(x);
+		   */
           case JSOP_DELNAME:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
 
@@ -2623,45 +4010,167 @@
 
             /* ECMA says to return true if name is undefined or inherited. */
             rval = JSVAL_TRUE;
+#ifdef XSS /* XSS */
+			/* save rval */
+			xss_jsval2 = rval;
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+#endif /* XSS */
             if (prop) {
+#ifdef XSS /* XSS */
+				OBJ_GET_PROPERTY(cx,obj,id, &rval);
+				XSS_TAINTOUTPUT_ON_VALUE(rval);
+#endif /* XSS */
                 OBJ_DROP_PROPERTY(cx, obj2, prop);
                 ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval);
+#ifdef XSS /* XSS */
+				xss_jsval2 = rval;
+#endif /* XSS */
                 if (!ok)
                     goto out;
-            }
+#ifdef XSS /* XSS */
+				/* taint the deleted name */
+				OBJ_GET_PROPERTY(cx,obj,id, &rval);
+				XSS_CALC_TAINTOUTPUT;
+				XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+				if (taintoutput == XSS_TAINTED) {
+					/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+					XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+					OBJ_SET_PROPERTY(cx,obj,id, &rval);
+				}
+#endif /* XSS */
+            }
+
+#ifdef XSS /* XSS */
+			/* restore rval */
+			rval = xss_jsval2;
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(rval);
             break;
 
+		  /*
+		   * Deletes a Object-property
+		   * e.g. var x = { myprop : 1 }; delete(x.myprop);
+		   */
           case JSOP_DELPROP:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
+#ifdef XSS /* XSS */
+            PROPERTY_OP(-1, CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+#endif /* XSS */
             PROPERTY_OP(-1, ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval));
+#ifdef XSS /* XSS */
+			/* save rval */
+			xss_jsval2 = rval;
+            PROPERTY_OP(-1, CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+			if (taintoutput == XSS_TAINTED) {
+				/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+	            PROPERTY_OP(-1, CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
+			}
+			/* restore rval */
+			rval = xss_jsval2;
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             STORE_OPND(-1, rval);
             break;
 
+		  /*
+		   * Deletes an element of an array
+		   * e.g. delete x[0];
+		   */
           case JSOP_DELELEM:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			ELEMENT_OP(-1, OBJ_GET_PROPERTY(cx,obj,id, &rval));
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+#endif /* XSS */
             ELEMENT_OP(-1, ok = OBJ_DELETE_PROPERTY(cx, obj, id, &rval));
+#ifdef XSS /* XSS */
+			/* save rval */
+			xss_jsval2 = rval;
+			/* taint the deleted value */
+			ELEMENT_OP(-1, OBJ_GET_PROPERTY(cx,obj,id, &rval));
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+			if (taintoutput == XSS_TAINTED) {
+				/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+				ELEMENT_OP(-1, OBJ_SET_PROPERTY(cx,obj,id, &rval));
+			}
+			/* restore rval */
+			rval = xss_jsval2;
+			/* taint the returnvalue if necessary */
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             sp--;
             STORE_OPND(-1, rval);
             break;
 
+		  /*
+		   * Checks the type of the operand
+		   * e.g. print(typeof(x));
+		   */
           case JSOP_TYPEOF:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             rval = POP_OPND();
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+#endif /* XSS */
             type = JS_TypeOfValue(cx, rval);
             atom = rt->atomState.typeAtoms[type];
             str  = ATOM_TO_STRING(atom);
+#ifdef XSS /* XSS */
+			/* type string is never tainted */
+			XSS_JSVAL_SET_ISTAINTED(XSS_NOT_TAINTED, STRING_TO_JSVAL(str));
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(STRING_TO_JSVAL(str));
             break;
 
+		  /*
+		   * pushes void on the stack
+		   * e.g. new Array(void 0);
+		   */
           case JSOP_VOID:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             (void) POP_OPND();
             PUSH_OPND(JSVAL_VOID);
             break;
 
+		  /*
+		   * Incements/decrements a name
+		   * e.g. var x = 1; ++x;
+		   */
           case JSOP_INCNAME:
           case JSOP_DECNAME:
           case JSOP_NAMEINC:
           case JSOP_NAMEDEC:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
+
             atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
 
@@ -2676,19 +4185,40 @@
             lval = OBJECT_TO_JSVAL(obj);
             goto do_incop;
 
+		  /*
+		   * Increments/Decrements properties.
+		   * e.g:
+		   * function X() { this.x = 5; }
+		   * var y = new X();
+		   * y.x++;
+		   */
           case JSOP_INCPROP:
           case JSOP_DECPROP:
           case JSOP_PROPINC:
           case JSOP_PROPDEC:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
             lval = POP_OPND();
             goto do_incop;
 
+		  /*
+		   * Increments/Decrements the element of an array.
+		   * e.g. x[0]++;
+		   */
           case JSOP_INCELEM:
           case JSOP_DECELEM:
           case JSOP_ELEMINC:
           case JSOP_ELEMDEC:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             POP_ELEMENT_ID(id);
             lval = POP_OPND();
 
@@ -2701,6 +4231,13 @@
             if (!ok)
                 goto out;
 
+#ifdef XSS /* XSS */
+			/* the array */
+			XSS_TAINTOUTPUT_ON_VALUE(lval);
+			/* the value */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             /* The expression result goes in rtmp, the updated value in rval. */
             if (JSVAL_IS_INT(rval) &&
                 rval != INT_TO_JSVAL(JSVAL_INT_MIN) &&
@@ -2719,6 +4256,7 @@
  * yet converted.  As above, the expression result goes in rtmp, the updated
  * value goes in rval.
  */
+#ifndef XSS /* original */
 #define NONINT_INCREMENT_OP()                                                 \
     JS_BEGIN_MACRO                                                            \
         VALUE_TO_NUMBER(cx, rval, d);                                         \
@@ -2740,12 +4278,50 @@
             goto out;                                                         \
     JS_END_MACRO
 
+#else /* XSS */
+#define NONINT_INCREMENT_OP()                                                 \
+    JS_BEGIN_MACRO                                                            \
+        VALUE_TO_NUMBER(cx, rval, d);                                         \
+		/* check if the value or scope is tainted */						  \
+		XSS_TAINTOUTPUT_ON_VALUE(rval);										  \
+        if (cs->format & JOF_POST) {                                          \
+            rtmp = rval;                                                      \
+			XSS_JSVAL_GET_TAINT(rtmp,xss_taint);							  \
+			/* adjust origtype */											  \
+			if (!JSVAL_IS_NUMBER(rtmp) ||									  \
+				!XSS_TAINTSTRUCTURE_IS_NUMBER(xss_taint)) {					  \
+                ok = js_NewNumberValue(cx, d, &rtmp);                         \
+				XSS_JSVAL_GET_TAINT(rtmp,xss_taint);						  \
+				XSS_TAINTSTRUCTURE_SET_ORIGTYPE(xss_taint,JSVAL_DOUBLE);	  \
+                if (!ok)                                                      \
+                    goto out;                                                 \
+            }                                                                 \
+            (cs->format & JOF_INC) ? d++ : d--;                               \
+            ok = js_NewNumberValue(cx, d, &rval);                             \
+        } else {                                                              \
+            (cs->format & JOF_INC) ? ++d : --d;                               \
+            ok = js_NewNumberValue(cx, d, &rval);                             \
+            rtmp = rval;                                                      \
+        }                                                                     \
+        if (!ok)                                                              \
+            goto out;                                                         \
+    JS_END_MACRO
+#endif /* XSS */
+
                 NONINT_INCREMENT_OP();
             }
 
+#ifdef XSS /* XSS */
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+			/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+			if (taintoutput == XSS_TAINTED) {
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+			}
+#endif /* XSS */
             CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval));
             if (!ok)
                 goto out;
+
             PUSH_OPND(rtmp);
             break;
 
@@ -2754,6 +4330,8 @@
  * it must break from the switch case that calls it, not from the do...while(0)
  * loop created by the JS_BEGIN/END_MACRO brackets.
  */
+#ifndef XSS /* original */
+
 #define FAST_INCREMENT_OP(SLOT,COUNT,BASE,PRE,OP,MINMAX)                      \
     slot = (uintN)SLOT;                                                       \
     JS_ASSERT(slot < fp->fun->COUNT);                                         \
@@ -2769,21 +4347,81 @@
     }                                                                         \
     goto do_nonint_fast_incop;
 
+#else /* XSS */
+
+#define FAST_INCREMENT_OP(SLOT,COUNT,BASE,PRE,OP,MINMAX)                      \
+    slot = (uintN)SLOT;														  \
+    JS_ASSERT(slot < fp->fun->COUNT);										  \
+    vp = fp->BASE + slot;													  \
+    xss_jsval = *vp;														  \
+	/* check if the stack is tainted or the scope */						  \
+	XSS_TAINTOUTPUT_ON_STACK;												  \
+	XSS_TAINTOUTPUT_ON_SCOPE;												  \
+	XSS_TAINTOUTPUT_ON_VALUE(xss_jsval);									  \
+	XSS_TO_ORIG_JSVAL(xss_jsval, rval);										  \
+    if (JSVAL_IS_INT(rval) &&												  \
+        rval != INT_TO_JSVAL(JSVAL_INT_##MINMAX)) {							  \
+        PRE = rval;															  \
+        rval OP 2;															  \
+		XSS_CALC_TAINTOUTPUT;												  \
+		XSS_TAINT_JSVAL_ON_OUTPUT(rval);									  \
+        *vp = rval;													          \
+		XSS_TAINT_JSVAL_ON_OUTPUT(PRE);										  \
+        PUSH_OPND(PRE);														  \
+        break;																  \
+    }																		  \
+    goto do_nonint_fast_incop;
+
+#endif /* XSS */
+
+		  /*
+		   * preincrease of an argument.
+		   * e.g. function (a) { b = ++a; }
+		   */
           case JSOP_INCARG:
             FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rval, +=, MAX);
+		  /*
+		   * predecrease of an argument.
+		   * e.g. function (a) { b = --a; }
+		   */
           case JSOP_DECARG:
             FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rval, -=, MIN);
+		  /*
+		   * postincrease of an argument.
+		   * e.g. function (a) { b = a++; }
+		   */
           case JSOP_ARGINC:
             FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rtmp, +=, MAX);
+		  /*
+		   * postdecrease of an argument.
+		   * e.g. function (a) { b = a--; }
+		   */
           case JSOP_ARGDEC:
             FAST_INCREMENT_OP(GET_ARGNO(pc), nargs, argv, rtmp, -=, MIN);
 
+		  /*
+		   * preincrease of a variable in a function
+		   * e.g. function () { var a; b = ++a; }
+		   */
           case JSOP_INCVAR:
             FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rval, +=, MAX);
+
+		  /*
+		   * predecrease of a variable in a function
+		   * e.g. function () { var a; b = --a; }
+		   */
           case JSOP_DECVAR:
             FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rval, -=, MIN);
+		  /*
+		   * postincrease of a variable in a function
+		   * e.g. function () { var a; b = a++; }
+		   */
           case JSOP_VARINC:
             FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rtmp, +=, MAX);
+		  /*
+		   * postdecrease of a variable in a function
+		   * e.g. function () { var a; b = a--; }
+		   */
           case JSOP_VARDEC:
             FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rtmp, -=, MIN);
 
@@ -2795,46 +4433,182 @@
             PUSH_OPND(rtmp);
             break;
 
+		  /*
+		   * Gets the property of an object.
+		   * e.g. var obj = { 'x' : 3}; print(obj.x);
+		   */
           case JSOP_GETPROP:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+#endif /* XSS */
             /* Get an immediate atom naming the property. */
             atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
             PROPERTY_OP(-1, CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
-            STORE_OPND(-1, rval);
-            break;
-
+#ifdef XSS /* XSS */
+#ifndef XSS_SHELL
+#ifdef XSS_DEBUG
+			/* taint only http-scripts*/
+			do {
+				JSScript *script = fp->script;
+				if (script && script->filename) {
+					if (strstr(script->filename,"http:") != NULL) {
+						xssSetDoLog(XSS_DO_LOG);
+						fprintf(stderr, "script = %s\n", script->filename);
+					}
+				}
+			} while (0); 
+#endif /* XSS_DEBUG */
+#endif /* XSS_SHELL */
+			/* check if the output has to be tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
+			STORE_OPND(-1, rval);
+            break;
+
+		  /*
+		   * Sets an object-property
+		   * e.g. o.x = 3;
+		   */
           case JSOP_SETPROP:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             /* Pop the right-hand side into rval for OBJ_SET_PROPERTY. */
             rval = FETCH_OPND(-1);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-2));
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+#endif /* XSS */
 
             /* Get an immediate atom naming the property. */
             atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
+#ifdef XSS_DEBUG
+			/* taint rval, if the var is called "evil". e.g. var evil = ... */
+			str = js_ValueToSource(cx, ATOM_KEY(atom));
+			if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(rval)) {
+				XSS_ADD_TAINTSTRUCTURE(rval);
+			}
+			XSS_TAINT_EVILSTR(str, rval);
+
+#endif /* XSS_DEBUG */
+			/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+			if (taintoutput == XSS_TAINTED) {
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+			}
             PROPERTY_OP(-2, CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
+#ifdef XSS /* XSS */
+			XSS_TAINT_JSVAL_ON_OUTPUT(FETCH_OPND(-2));
+#endif /* XSS */
             sp--;
             STORE_OPND(-1, rval);
             break;
 
+		  /*
+		   * Gets an array-element
+		   * e.g. x[0]
+		   */
           case JSOP_GETELEM:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-2));
+#endif /* XSS */
             ELEMENT_OP(-1, CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval)));
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             sp--;
             STORE_OPND(-1, rval);
             break;
 
+		  /*
+		   * sets an array-element
+		   * e.g. x[0] = 3;
+		   */
           case JSOP_SETELEM:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             rval = FETCH_OPND(-1);
+#ifdef XSS /* XSS */
+			/* check rval */
+			XSS_TAINTOUTPUT_ON_VALUE(rval); 
+			/* check index */
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-2));
+			/* check array */
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-3));
+			XSS_CALC_TAINTOUTPUT;
+			/* taint the new value for the element */
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+			/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+			if (taintoutput == XSS_TAINTED) {
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+			}
+#endif /* XSS */
             ELEMENT_OP(-2, CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval)));
+#ifdef XSS /* XSS */
+			/* taint the array if necessary */
+			XSS_TAINT_JSVAL_ON_OUTPUT(FETCH_OPND(-3));
+#endif /* XSS */
             sp -= 2;
             STORE_OPND(-1, rval);
             break;
 
+		  /*
+		   * Used for JSOP_FORELEM
+		   * e.g.:
+		   * var dut = { 'x' : evil };
+		   * var ob = [evil];
+		   * for (ob[0] in dut) {
+		   *   print(dut[ob[0]]);
+		   * }
+		   */
           case JSOP_ENUMELEM:
             /* Funky: the value to set is under the [obj, id] pair. */
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			/* check index */
+            lval = FETCH_OPND(-1);
+			XSS_TAINTOUTPUT_ON_VALUE(lval);
+#endif /* XSS */
             FETCH_ELEMENT_ID(-1, id);
             lval = FETCH_OPND(-2);
             VALUE_TO_OBJECT(cx, lval, obj);
+#ifdef XSS /* XSS */
+			/* check array */
+			XSS_TAINTOUTPUT_ON_VALUE(lval);
+            ok = OBJ_GET_PROPERTY(cx, obj, id, &rval);
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+#endif /* XSS */
             rval = FETCH_OPND(-3);
             SAVE_SP(fp);
+#ifdef XSS /* XSS */
+			/* check property of object */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+			/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+			if (taintoutput == XSS_TAINTED) {
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+			}
+#endif /* XSS */
             ok = OBJ_SET_PROPERTY(cx, obj, id, &rval);
             if (!ok)
                 goto out;
@@ -2851,11 +4625,24 @@
  */
 #define LAZY_ARGS_THISP ((JSObject *) 1)
 
+		  /*
+		   * pushes the object on the stack
+		   * e.g. print(x);
+		   */
           case JSOP_PUSHOBJ:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             if (obj == LAZY_ARGS_THISP && !(obj = js_GetArgsObject(cx, fp))) {
                 ok = JS_FALSE;
                 goto out;
             }
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(OBJECT_TO_JSVAL(obj));
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(OBJECT_TO_JSVAL(obj));
             break;
 
@@ -2864,6 +4651,13 @@
             argc = GET_ARGC(pc);
             vp = sp - (argc + 2);
             lval = *vp;
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
+
             SAVE_SP(fp);
 
             if (JSVAL_IS_FUNCTION(cx, lval) &&
@@ -2924,6 +4718,23 @@
                 newifp->frame.scopeChain = OBJ_GET_PARENT(cx, obj);
                 newifp->mark = newmark;
 
+#ifdef XSS /* XSS */
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+				if (xssGetDoLog() == XSS_DO_LOG) {
+					XSS_PRINTDEBUG_STR("before init fp for call\n");
+				}
+#endif /* XSS_DEBUG */
+				/* initialize the xss-scope */
+				XSS_SCOPE_INIT_ROOT(newifp->frame, XSS_NOT_TAINTED, XSS_FALSE);
+				/* set the bounds of the scope and if it should be tainted (scope or function tainted) */
+				XSS_SCOPE_SET(NULL, newifp->frame.scope_root, taintoutput, script->code, script->code + script->length, JSOP_CALL);
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+				if (xssGetDoLog() == XSS_DO_LOG) {
+					XSS_PRINT_SCOPE(tracefp, script, newifp->frame.scope_root);
+				}
+#endif /* XSS_DEBUG */
+#endif /* XSS */
+
                 /* Compute the 'this' parameter now that argv is set. */
                 ok = ComputeThis(cx, JSVAL_TO_OBJECT(vp[1]), &newifp->frame);
                 if (!ok) {
@@ -2961,7 +4772,23 @@
                 endpc = pc + script->length;
                 inlineCallCount++;
                 JS_RUNTIME_METER(rt, inlineCalls);
-                continue;
+
+#ifdef XSS
+#ifdef XSS_DEBUG
+				if (xssGetDoLog() == XSS_DO_LOG) {
+
+					XSS_PRINTDEBUG_STR("---------------------------------------------------------------------\n");
+					XSS_PRINTDEBUG_STR("start of sourcecode\n");
+
+					js_Disassemble(cx,script,JS_TRUE, stderr);
+
+					XSS_PRINTDEBUG_STR("end of sourcecode\n");
+					XSS_PRINTDEBUG_STR("---------------------------------------------------------------------\n");
+				}
+#endif /* XSS_DEBUG */
+#endif /* XSS */
+
+				continue;
 
               bad_inline_call:
                 script = fp->script;
@@ -2969,7 +4796,25 @@
                 goto out;
             }
 
+#ifdef XSS
+			/* save the current taint-state of the scope and 
+			   taint the scope temporary if a variable is tainted. */
+			taintoutput_temp = XSS_SCOPE_ISTAINTED(cx->fp->scope_current);
+			if (taintoutput == XSS_TAINTED) {
+				cx->fp->scope_current->istainted = XSS_TAINTED;
+			}
+			if (op == JSOP_EVAL) {
+				taint_retval_old = cx->fp->taint_retval;
+				cx->fp->taint_retval = XSS_TRUE;
+			}
+#endif /* XSS */
             ok = js_Invoke(cx, argc, 0);
+#ifdef XSS			
+			cx->fp->scope_current->istainted = taintoutput_temp;
+			if (op == JSOP_EVAL) {
+				cx->fp->taint_retval = taint_retval_old;
+			}
+#endif /* XSS */
             RESTORE_SP(fp);
             LOAD_BRANCH_CALLBACK(cx);
             LOAD_INTERRUPT_HANDLER(rt);
@@ -3000,10 +4845,22 @@
             }
 #endif
             obj = NULL;
+#ifdef XSS /* XSS */
+			XSS_TAINT_JSVAL_ON_OUTPUT(FETCH_OPND(-1));
+#endif /* XSS */
             break;
 
 #if JS_HAS_LVALUE_RETURN
+		  /*
+		   * Used if a lvalue-assignment is possible (instead of a call)
+		   * e.g. it.item('funny') = 3;
+		   */
           case JSOP_SETCALL:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             argc = GET_ARGC(pc);
             SAVE_SP(fp);
             ok = js_Invoke(cx, argc, 0);
@@ -3018,13 +4875,27 @@
                 ok = JS_FALSE;
                 goto out;
             }
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(cx->rval2);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(cx->rval2);
+#endif /* XSS */
             PUSH_OPND(cx->rval2);
             cx->rval2set = JS_FALSE;
             obj = NULL;
             break;
 #endif
 
+		  /*
+		   * Gets a variable by name
+		   * e.g. var x = 1;
+		   */
           case JSOP_NAME:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
 
@@ -3063,7 +4934,16 @@
                    ? LOCKED_OBJ_GET_SLOT(obj2, slot)
                    : JSVAL_VOID;
             JS_UNLOCK_OBJ(cx, obj2);
+#ifdef XSS /* XSS */
+			/* check if the output has to be tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+#endif /* XSS */
             ok = SPROP_GET(cx, sprop, obj, obj2, &rval);
+#ifdef XSS /* XSS */			
+			/* check if the output has to be tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             JS_LOCK_OBJ(cx, obj2);
             if (!ok) {
                 OBJ_DROP_PROPERTY(cx, obj2, prop);
@@ -3073,24 +4953,118 @@
                 LOCKED_OBJ_SET_SLOT(obj2, slot, rval);
             OBJ_DROP_PROPERTY(cx, obj2, prop);
             PUSH_OPND(rval);
-            break;
-
+#ifdef XSS /* XSS */			
+#ifdef XSS_DEBUG /* XSS_DEBUG */			
+			if (xssGetDoLog() == XSS_DO_LOG) {
+				if (XSS_JSVAL_IS_TAINTED(rval)) {
+					fprintf(stderr, "taint value of %s (%d)= ", js_AtomToPrintableString(cx, atom), rval);
+					XSS_JSVAL_GET_TAINT(rval,xss_taint);
+					if (xss_taint != 0) {
+						fprintf(stderr,"t: %d %d", xss_taint->istainted, xss_taint->type);
+					} else {
+						fprintf(stderr,"t: null!");
+					}
+					fprintf(stderr, "\n");
+				}
+			}
+#endif /* XSS_DEBUG */			
+#endif /* XSS */			
+            break;
+
+		  /*
+		   * puts a integer-constant on the stack
+		   * e.g. var x = 3;
+		   */
           case JSOP_UINT16:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             i = (jsint) GET_ATOM_INDEX(pc);
             rval = INT_TO_JSVAL(i);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(rval);
             obj = NULL;
             break;
 
+		  /*
+		   * puts a number on the stack
+		   * e.g. var x = 123.4;
+		   */
           case JSOP_NUMBER:
+		  /*
+		   * puts a string on the stack
+		   * e.g. var x = "test";
+		   */
           case JSOP_STRING:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             atom = GET_ATOM(cx, script, pc);
+#ifdef XSS
+			XSS_CALC_TAINTOUTPUT;
+			if (taintoutput == XSS_TAINTED) {
+				if (JSVAL_IS_STRING(ATOM_KEY(atom))) {
+					JS_BEGIN_MACRO
+						JSString *atomstr, *str;
+						atomstr = JSVAL_TO_STRING(ATOM_KEY(atom));
+						str = js_NewStringCopyN(cx, JSSTRING_CHARS(atomstr), JSSTRING_LENGTH(atomstr), 0);
+						if (!str) {
+							JS_free(cx, JSSTRING_CHARS(atomstr));
+							PUSH_OPND(ATOM_KEY(atom));
+						} else {
+							PUSH_OPND(STRING_TO_JSVAL(str));
+						}
+					JS_END_MACRO;
+				} else if (JSVAL_IS_INT(ATOM_KEY(atom))) {
+					JS_BEGIN_MACRO
+						jsdouble d;
+						jsval v_;
+					    
+						d = (jsdouble)JSVAL_TO_INT(ATOM_KEY(atom));
+						ok = js_NewDoubleValue(cx, d, &v_);
+						XSS_JSVAL_SET_ORIGTYPE(v_, JSVAL_INT);
+						PUSH_OPND(v_);
+					JS_END_MACRO;
+				} else if (JSVAL_IS_DOUBLE(ATOM_KEY(atom))) {
+					JS_BEGIN_MACRO
+						jsdouble d;
+						jsval v_;
+					    
+						d = *JSVAL_TO_DOUBLE(ATOM_KEY(atom));
+						ok = js_NewDoubleValue(cx, d, &v_);
+						XSS_JSVAL_SET_ORIGTYPE(v_, JSVAL_DOUBLE);
+						PUSH_OPND(v_);
+					JS_END_MACRO;
+				} else {
+					PUSH_OPND(ATOM_KEY(atom));
+				}
+			} else {
+				PUSH_OPND(ATOM_KEY(atom));
+			}
+#else /* original */
             PUSH_OPND(ATOM_KEY(atom));
+#endif /* XSS */
             obj = NULL;
             break;
 
+		  /*
+		   * creates a new object from a literal (only used fuer regexp)
+		   * e.g. /x+/
+		   */
           case JSOP_OBJECT:
           {
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
 #if 0
             jsatomid atomIndex;
             JSAtomMap *atomMap;
@@ -3198,46 +5172,136 @@
             JS_ASSERT(ATOM_IS_OBJECT(atom));
 #endif
             rval = ATOM_KEY(atom);
+#ifdef XSS /* XSS */
+			/* check if the output has to be tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(rval);
             obj = NULL;
             break;
           }
 
+		  /*
+		   * constant for the number 0
+		   * e.g. var x = 0;
+		   */
           case JSOP_ZERO:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(JSVAL_ZERO);
             obj = NULL;
             break;
 
+		  /*
+		   * constant for the number 1
+		   * e.g. var x = 1;
+		   */
           case JSOP_ONE:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(JSVAL_ONE);
             obj = NULL;
             break;
 
+		  /*
+		   * constant for null
+		   * e.g. var x = null;
+		   */
           case JSOP_NULL:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(JSVAL_NULL);
             obj = NULL;
             break;
 
+		  /*
+		   * puts the current object on the stack
+		   * e.g. Test() { return this;}
+		   */
           case JSOP_THIS:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			xss_jsval = OBJECT_TO_JSVAL(fp->thisp);
+			XSS_TAINTOUTPUT_ON_VALUE(xss_jsval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(OBJECT_TO_JSVAL(fp->thisp));
             obj = NULL;
             break;
 
+		  /*
+		   * Constant for the boolean-value false
+		   * e.g. var x = false;
+		   */
           case JSOP_FALSE:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(JSVAL_FALSE);
             obj = NULL;
             break;
 
+		  /*
+		   * Constant for the boolean-value true
+		   * e.g. var x = true;
+		   */
           case JSOP_TRUE:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(JSVAL_TRUE);
             obj = NULL;
             break;
 
 #if JS_HAS_SWITCH_STATEMENT
+		  /*
+		   * calculates the switch-target
+		   * e.g. switch(x) { case 1: x = 2; } 
+		   */
           case JSOP_TABLESWITCH:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			xss_jsval = FETCH_OPND(-1);
+			XSS_TAINTOUTPUT_ON_VALUE(xss_jsval);
+			XSS_CALC_TAINTOUTPUT;
+
+			JS_BEGIN_MACRO			  
+			  jssrcnote *sn;
+			  ptrdiff_t len;
+			  /* get the length of the switch-statement */
+              sn = js_GetSrcNote(fp->script, pc);
+              len = js_GetSrcNoteOffset(sn, 0);
+			  /* and create a new scope over the whole switch-statement */
+			  XSS_NEW_SCOPE(fp->scope_current, pc, pc + len, taintoutput);
+		    JS_END_MACRO;
+#endif /* XSS */
             pc2 = pc;
             len = GET_JUMP_OFFSET(pc2);
 
+
             /*
              * ECMAv2 forbids conversion of discriminant, so we will skip to
              * the default case if the discriminant isn't already an int jsval.
@@ -3246,9 +5310,16 @@
             if (cx->version == JSVERSION_DEFAULT ||
                 cx->version >= JSVERSION_1_4) {
                 rval = POP_OPND();
+#ifndef XSS /* original */
                 if (!JSVAL_IS_INT(rval))
                     break;
                 i = JSVAL_TO_INT(rval);
+#else /* XSS: handle the types */
+				XSS_TO_ORIG_JSVAL(rval, xss_jsval);
+                if (!JSVAL_IS_INT(xss_jsval))
+                    break;
+                i = JSVAL_TO_INT(xss_jsval);
+#endif /* XSS */
             } else {
                 FETCH_INT(cx, -1, i);
                 sp--;
@@ -3268,11 +5339,38 @@
             }
             break;
 
+		  /*
+		   * switch-statement that needs a lookup
+		   * e.g. switch ( x ) { case "z": print("z"); }
+		   */
           case JSOP_LOOKUPSWITCH:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			xss_jsval = FETCH_OPND(-1);
+			XSS_TAINTOUTPUT_ON_VALUE(xss_jsval);
+			XSS_CALC_TAINTOUTPUT;
+
+			JS_BEGIN_MACRO			  
+			  jssrcnote *sn;
+			  ptrdiff_t len;
+			  /* get the length of the switch-statement */
+              sn = js_GetSrcNote(fp->script, pc);
+              len = js_GetSrcNoteOffset(sn, 0);
+			  /* and create a new scope over the whole switch-statement */
+			  XSS_NEW_SCOPE(fp->scope_current, pc, pc + len, taintoutput);
+		    JS_END_MACRO;
+#endif /* XSS */
             lval = POP_OPND();
             pc2 = pc;
             len = GET_JUMP_OFFSET(pc2);
 
+#ifdef XSS 
+			/* convert the xss-lval back to a normal lval */
+			XSS_TO_ORIG_JSVAL(lval,lval);
+#endif /* XSS */
+
             if (!JSVAL_IS_NUMBER(lval) &&
                 !JSVAL_IS_STRING(lval) &&
                 !JSVAL_IS_BOOLEAN(lval)) {
@@ -3317,7 +5415,29 @@
 #undef SEARCH_PAIRS
             break;
 
+		  /*
+		   * calculates the switch-target
+		   * e.g. switch(x) { case 1: x = 2; } 
+		   */
           case JSOP_TABLESWITCHX:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			xss_jsval = FETCH_OPND(-1);
+			XSS_TAINTOUTPUT_ON_VALUE(xss_jsval);
+			XSS_CALC_TAINTOUTPUT;
+
+			JS_BEGIN_MACRO			  
+			  jssrcnote *sn;
+			  ptrdiff_t len;
+			  /* get the length of the switch-statement */
+              sn = js_GetSrcNote(fp->script, pc);
+              len = js_GetSrcNoteOffset(sn, 0);
+			  /* and create a new scope over the whole switch-statement */
+			  XSS_NEW_SCOPE(fp->scope_current, pc, pc + len, taintoutput);
+		    JS_END_MACRO;
+#endif /* XSS */
             pc2 = pc;
             len = GET_JUMPX_OFFSET(pc2);
 
@@ -3329,15 +5449,22 @@
             if (cx->version == JSVERSION_DEFAULT ||
                 cx->version >= JSVERSION_1_4) {
                 rval = POP_OPND();
+#ifndef XSS /* original */
                 if (!JSVAL_IS_INT(rval))
                     break;
                 i = JSVAL_TO_INT(rval);
+#else /* XSS: handle the types */
+				XSS_TO_ORIG_JSVAL(rval, xss_jsval);
+                if (!JSVAL_IS_INT(xss_jsval))
+                    break;
+                i = JSVAL_TO_INT(xss_jsval);
+#endif /* XSS */
             } else {
                 FETCH_INT(cx, -1, i);
                 sp--;
             }
 
-            pc2 += JUMPX_OFFSET_LEN;
+			pc2 += JUMPX_OFFSET_LEN;
             low = GET_JUMP_OFFSET(pc2);
             pc2 += JUMP_OFFSET_LEN;
             high = GET_JUMP_OFFSET(pc2);
@@ -3351,11 +5478,38 @@
             }
             break;
 
+		  /*
+		   * (extended) switch-statement that needs a lookup
+		   * e.g. switch ( x ) { case "z": print("z"); }
+		   */
           case JSOP_LOOKUPSWITCHX:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			xss_jsval = FETCH_OPND(-1);
+			XSS_TAINTOUTPUT_ON_VALUE(xss_jsval);
+			XSS_CALC_TAINTOUTPUT;
+
+			JS_BEGIN_MACRO			  
+			  jssrcnote *sn;
+			  ptrdiff_t len;
+			  /* get the length of the switch-statement */
+              sn = js_GetSrcNote(fp->script, pc);
+              len = js_GetSrcNoteOffset(sn, 0);
+			  /* and create a new scope over the whole switch-statement */
+			  XSS_NEW_SCOPE(fp->scope_current, pc, pc + len, taintoutput);
+		    JS_END_MACRO;
+#endif /* XSS */
             lval = POP_OPND();
             pc2 = pc;
             len = GET_JUMPX_OFFSET(pc2);
 
+#ifdef XSS 
+			/* convert the xss-lval back to a normal lval */
+			XSS_TO_ORIG_JSVAL(lval,lval);
+#endif /* XSS */
+
             if (!JSVAL_IS_NUMBER(lval) &&
                 !JSVAL_IS_STRING(lval) &&
                 !JSVAL_IS_BOOLEAN(lval)) {
@@ -3400,13 +5554,44 @@
 #undef SEARCH_EXTENDED_PAIRS
             break;
 
+		  /*
+		   * Switch on a condition
+		   * switch(1) { case (x == 1) : }
+		   */
           case JSOP_CONDSWITCH:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			xss_jsval = FETCH_OPND(-1);
+			XSS_TAINTOUTPUT_ON_VALUE(xss_jsval);
+			XSS_CALC_TAINTOUTPUT;
+
+			JS_BEGIN_MACRO			  
+			  jssrcnote *sn;
+			  ptrdiff_t len;
+			  /* get the length of the switch-statement */
+              sn = js_GetSrcNote(fp->script, pc);
+              len = js_GetSrcNoteOffset(sn, 0);
+			  /* and create a new scope over the whole switch-statement */
+			  XSS_NEW_SCOPE(fp->scope_current, pc, pc + len, taintoutput);
+		    JS_END_MACRO;
+#endif /* XSS */
             break;
 
 #endif /* JS_HAS_SWITCH_STATEMENT */
 
 #if JS_HAS_EXPORT_IMPORT
+		  /*
+		   * Used to export all properties/functions
+		   * e.g. export *;
+		   */
           case JSOP_EXPORTALL:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             obj = fp->varobj;
             ida = JS_Enumerate(cx, obj);
             if (!ida) {
@@ -3414,6 +5599,21 @@
             } else {
                 for (i = 0, j = ida->length; i < j; i++) {
                     id = ida->vector[i];
+#ifdef XSS /* XSS */
+					/* get the jsval */
+	                ok = OBJ_GET_PROPERTY(cx, obj, id, &xss_jsval);
+					if (ok) {
+						XSS_TAINTOUTPUT_ON_VALUE(xss_jsval);
+						XSS_CALC_TAINTOUTPUT;
+						XSS_TAINT_JSVAL_ON_OUTPUT(xss_jsval);
+						/* if necessary, taint the jsval  */
+						if (taintoutput == XSS_TAINTED) {
+							/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+							XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+							ok = OBJ_SET_PROPERTY(cx, obj, id, &xss_jsval);
+						}
+					}
+#endif /* XSS */
                     ok = OBJ_LOOKUP_PROPERTY(cx, obj, id, &obj2, &prop);
                     if (!ok)
                         break;
@@ -3432,10 +5632,33 @@
             }
             break;
 
+		  /*
+		   * Used to export variable.
+		   * e.g. var x = 1; export x;
+		   */
           case JSOP_EXPORTNAME:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
             obj  = fp->varobj;
+#ifdef XSS /* XSS */
+			/* if necessary, taint the jsval */
+	        ok = OBJ_GET_PROPERTY(cx, obj, id, &xss_jsval);
+			if (ok) {
+				XSS_TAINTOUTPUT_ON_VALUE(xss_jsval);
+				XSS_CALC_TAINTOUTPUT;
+				XSS_TAINT_JSVAL_ON_OUTPUT(xss_jsval);
+				if (taintoutput == XSS_TAINTED) {
+					/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+					XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+					ok = OBJ_SET_PROPERTY(cx, obj, id, &xss_jsval);
+				}
+			}
+#endif /* XSS */
             ok = OBJ_LOOKUP_PROPERTY(cx, obj, id, &obj2, &prop);
             if (!ok)
                 goto out;
@@ -3454,13 +5677,47 @@
                 goto out;
             break;
 
+		  /*
+		   * Imports all variables.
+		   * e.g. import *;
+		   */
           case JSOP_IMPORTALL:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			/* check if the imported variables have to be tained... */
+			XSS_TAINTOUTPUT_ON_VALUE(JSVAL_VOID);
+			XSS_CALC_TAINTOUTPUT;
+
+			/* create a new scope if necessary */
+			if (taintoutput == XSS_TAINTED) {
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc, XSS_TAINTED);
+			}
+#endif /* XSS */
             id = (jsid)JSVAL_VOID;
             PROPERTY_OP(-1, ok = ImportProperty(cx, obj, id));
             sp--;
             break;
 
+		  /*
+		   * Imports a property of an object
+		   * e.g. import w.f; // if there is an object "w" with a property f
+		   */
           case JSOP_IMPORTPROP:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			/* check if the imported variables have to be tained... */
+			XSS_TAINTOUTPUT_ON_VALUE(JSVAL_VOID);
+			XSS_CALC_TAINTOUTPUT;
+
+			/* create a new scope if necessary */
+			if (taintoutput == XSS_TAINTED) {
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc, XSS_TAINTED);
+			}
+#endif /* XSS */
             /* Get an immediate atom naming the property. */
             atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
@@ -3468,12 +5725,34 @@
             sp--;
             break;
 
+		  /*
+		   * Imports an element
+		   * e.g. import w['x']; // if there is an object "w" with a property "x".
+		   */
           case JSOP_IMPORTELEM:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			/* check if the imported variables have to be tained... */
+			XSS_TAINTOUTPUT_ON_VALUE(JSVAL_VOID);
+			XSS_CALC_TAINTOUTPUT;
+
+			/* create a new scope if necessary */
+			if (taintoutput == XSS_TAINTED) {
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc, XSS_TAINTED);
+			}
+#endif /* XSS */
             ELEMENT_OP(-1, ok = ImportProperty(cx, obj, id));
             sp -= 2;
             break;
 #endif /* JS_HAS_EXPORT_IMPORT */
-
+		  /*
+		   * used to call a traphandler
+		   * e.g. function test() { print('test');}
+		   * trap(test, 10, "print('trapped')");
+		   * test();
+		   */
           case JSOP_TRAP:
             switch (JS_HandleTrap(cx, script, pc, &rval)) {
               case JSTRAP_ERROR:
@@ -3500,15 +5779,37 @@
             LOAD_INTERRUPT_HANDLER(rt);
             break;
 
+		  /*
+		   * Gets the arguments of a function
+		   * function a(b,c,d) { x = arguments; }
+		   */
           case JSOP_ARGUMENTS:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             SAVE_SP(fp);
             ok = js_GetArgsValue(cx, fp, &rval);
             if (!ok)
                 goto out;
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(rval);
             break;
 
+		  /*
+		   * Gets a argument.
+		   * function x(i,j,k) { x = arguments[1]; };
+		   */
           case JSOP_ARGSUB:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             id = (jsid) INT_TO_JSVAL(GET_ARGNO(pc));
             SAVE_SP(fp);
             ok = js_GetArgsProperty(cx, fp, id, &obj, &rval);
@@ -3525,55 +5826,133 @@
                  */
                 obj = LAZY_ARGS_THISP;
             }
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(rval);
             break;
 
 #undef LAZY_ARGS_THISP
 
+		  /*
+		   * The number of arguments.
+		   * e.g. function () { a = arguments.length; }
+		   */
           case JSOP_ARGCNT:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             id = (jsid) rt->atomState.lengthAtom;
             SAVE_SP(fp);
             ok = js_GetArgsProperty(cx, fp, id, &obj, &rval);
             if (!ok)
                 goto out;
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(rval);
             break;
 
+		  /*
+		   * gets the argument of the function
+		   * e.g. function test(a) { print(a); }
+		   */
           case JSOP_GETARG:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             slot = GET_ARGNO(pc);
             JS_ASSERT(slot < fp->fun->nargs);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(fp->argv[slot]);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(fp->argv[slot]);
             obj = NULL;
             break;
 
+		  /*
+		   * sets an argument in a function
+		   * e.g. function test(a) { a = 2; }
+		   */
           case JSOP_SETARG:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             slot = GET_ARGNO(pc);
             JS_ASSERT(slot < fp->fun->nargs);
             vp = &fp->argv[slot];
             GC_POKE(cx, *vp);
             *vp = FETCH_OPND(-1);
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(FETCH_OPND(-1));
+			*vp = FETCH_OPND(-1);
+#endif /* XSS */
             obj = NULL;
             break;
 
+		  /*
+		   * Gets a function-variable;
+		   * e.g. function test() { var x = 1; print(x); }
+		   */
           case JSOP_GETVAR:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             slot = GET_VARNO(pc);
             JS_ASSERT(slot < fp->fun->nvars);
+#ifdef XSS /* orig */
+			/* check if the output has to be tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(fp->vars[slot]);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(fp->vars[slot]);
             obj = NULL;
             break;
 
+		  /*
+		   * Sets a function-variable;
+		   * e.g. function test() { var x = 5; }
+		   */
           case JSOP_SETVAR:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             slot = GET_VARNO(pc);
             JS_ASSERT(slot < fp->fun->nvars);
             vp = &fp->vars[slot];
+#ifdef XSS /* XSS */
+			/* check if the output has to be tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(FETCH_OPND(-1));
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(FETCH_OPND(-1));
+#endif /* XSS */
             GC_POKE(cx, *vp);
             *vp = FETCH_OPND(-1);
             obj = NULL;
             break;
 
+		  /*
+		   * defines a constant or a variable
+		   * e.g. var x = 1; or const x = 1;
+		   */
           case JSOP_DEFCONST:
           case JSOP_DEFVAR:
-          {
+		  {
             JSBool defined;
 
             atom = GET_ATOM(cx, script, pc);
@@ -3597,9 +5976,14 @@
                 if (!ok)
                     goto out;
             }
+
             break;
           }
 
+		  /*
+		   * defines a function
+		   * e.g. function x() {};
+		   */
           case JSOP_DEFFUN:
           {
             uintN flags;
@@ -3693,6 +6077,13 @@
           }
 
 #if JS_HAS_LEXICAL_CLOSURE
+
+		  /*
+		   * Definition of a function in a function.
+		   * e.g.: function x() { 
+		   *  function y() {} 
+		   * }
+		   */
           case JSOP_DEFLOCALFUN:
             /*
              * Define a local function (i.e., one nested at the top level of
@@ -3719,10 +6110,20 @@
             fp->vars[slot] = OBJECT_TO_JSVAL(obj);
             break;
 
+		  /*
+		   * defines an anonymous function (i.e a function with no name)
+		   * e.g. var a = function() {};
+		   */
           case JSOP_ANONFUNOBJ:
             /* Push the specified function object literal. */
             atom = GET_ATOM(cx, script, pc);
             obj = ATOM_TO_OBJECT(atom);
+#ifdef XSS
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_TAINTOUTPUT_ON_VALUE(OBJECT_TO_JSVAL(obj));
+#endif /* XSS */
 
             /* If re-parenting, push a clone of the function object. */
             parent = fp->scopeChain;
@@ -3732,14 +6133,34 @@
                     ok = JS_FALSE;
                     goto out;
                 }
-            }
+#ifdef XSS
+				/* check if the output has to be tainted */
+				XSS_TAINTOUTPUT_ON_VALUE(OBJECT_TO_JSVAL(obj));
+#endif /* XSS */
+            }
+#ifdef XSS
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(OBJECT_TO_JSVAL(obj));
             break;
 
+		  /*
+		   * a named function that is assigned to a variable
+		   * e.g. var x = function a() {}; x();
+		   */
           case JSOP_NAMEDFUNOBJ:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             /* ECMA ed. 3 FunctionExpression: function Identifier [etc.]. */
             atom = GET_ATOM(cx, script, pc);
             rval = ATOM_KEY(atom);
+#ifdef XSS /* XSS */
+			/* check if the output has to be tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+#endif /* XSS */
             JS_ASSERT(JSVAL_IS_FUNCTION(cx, rval));
 
             /*
@@ -3769,6 +6190,11 @@
                 ok = JS_FALSE;
                 goto out;
             }
+#ifdef XSS /* XSS */
+			xss_jsval = OBJECT_TO_JSVAL(obj);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(xss_jsval);
+#endif /* XSS */
 
             /*
              * 4. Create a property in the object Result(1).  The property's
@@ -3803,6 +6229,9 @@
             PUSH_OPND(OBJECT_TO_JSVAL(obj));
             break;
 
+		  /*
+		   * if (true) function f() {return 1;}
+		   */
           case JSOP_CLOSURE:
             /*
              * ECMA ed. 3 extension: a named function expression in a compound
@@ -3816,6 +6245,13 @@
             JS_ASSERT(JSVAL_IS_FUNCTION(cx, ATOM_KEY(atom)));
             obj = ATOM_TO_OBJECT(atom);
 
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_TAINTOUTPUT_ON_VALUE(OBJECT_TO_JSVAL(obj));
+#endif /* XSS */
+
             /*
              * Clone the function object with the current scope chain as the
              * clone's parent.  The original function object is the prototype
@@ -3841,6 +6277,12 @@
             attrs = fun->flags & (JSFUN_GETTER | JSFUN_SETTER);
             if (attrs)
                 attrs |= JSPROP_SHARED;
+#ifdef XSS /* XSS */
+			/* taint object */
+			XSS_CALC_TAINTOUTPUT;
+			xss_jsval = OBJECT_TO_JSVAL(obj);
+			XSS_TAINT_JSVAL_ON_OUTPUT(xss_jsval);
+#endif /* XSS */
             ok = OBJ_DEFINE_PROPERTY(cx, fp->varobj, (jsid)fun->atom,
                                      attrs ? JSVAL_VOID : OBJECT_TO_JSVAL(obj),
                                      (attrs & JSFUN_GETTER)
@@ -3859,31 +6301,59 @@
 #endif /* JS_HAS_LEXICAL_CLOSURE */
 
 #if JS_HAS_GETTER_SETTER
+		  /*
+		   * Defines getter and setters for properties, elements and variables.
+		   */
           case JSOP_GETTER:
           case JSOP_SETTER:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             JS_ASSERT(len == 1);
             op2 = (JSOp) *++pc;
             cs = &js_CodeSpec[op2];
             len = cs->length;
             switch (op2) {
+			  /*
+			   * Sets a getter/setter for a name
+			   * e.g. var name; name getter = function() { return 0;} 
+			   */
               case JSOP_SETNAME:
+			  /*
+			   * Sets a getter/setter for a property
+			   * e.g. var obj = new Object(); obj.name getter = function() {return 0;}
+			   */
               case JSOP_SETPROP:
                 atom = GET_ATOM(cx, script, pc);
                 id   = (jsid)atom;
                 i = -1;
                 rval = FETCH_OPND(i);
                 goto gs_pop_lval;
-
+			  /*
+			   * Sets a getter/setter for a array-element
+			   * e.g. var x = new Array(); x[0] getter = function() { return 0;} 
+			   */
               case JSOP_SETELEM:
                 rval = FETCH_OPND(-1);
                 i = -2;
                 FETCH_ELEMENT_ID(i, id);
               gs_pop_lval:
                 lval = FETCH_OPND(i-1);
+#ifdef XSS /* XSS */
+				XSS_TAINTOUTPUT_ON_VALUE(lval);
+				XSS_CALC_TAINTOUTPUT;
+				XSS_TAINT_JSVAL_ON_OUTPUT(lval);
+#endif /* XSS */
                 VALUE_TO_OBJECT(cx, lval, obj);
                 break;
 
 #if JS_HAS_INITIALIZERS
+			  /*
+			   * Sets a getter/setter for a object-property on initialization
+			   * e.g. var obj = { x:0 , get a() { return this.x; } }
+			   */
               case JSOP_INITPROP:
                 JS_ASSERT(sp - fp->spbase >= 2);
                 i = -1;
@@ -3891,7 +6361,10 @@
                 atom = GET_ATOM(cx, script, pc);
                 id   = (jsid)atom;
                 goto gs_get_lval;
-
+			  /*
+			   * Sets a getter/setter for an array-element on initialization
+			   * e.g. ???
+			   */
               case JSOP_INITELEM:
                 JS_ASSERT(sp - fp->spbase >= 3);
                 rval = FETCH_OPND(-1);
@@ -3900,6 +6373,11 @@
               gs_get_lval:
                 lval = FETCH_OPND(i-1);
                 JS_ASSERT(JSVAL_IS_OBJECT(lval));
+#ifdef XSS /* XSS */
+				XSS_TAINTOUTPUT_ON_VALUE(lval);
+				XSS_CALC_TAINTOUTPUT;
+				XSS_TAINT_JSVAL_ON_OUTPUT(lval);
+#endif /* XSS */
                 obj = JSVAL_TO_OBJECT(lval);
                 break;
 #endif /* JS_HAS_INITIALIZERS */
@@ -3926,6 +6404,12 @@
             if (!ok)
                 goto out;
 
+#ifdef XSS /* XSS */
+			/* check if the output has to be tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+#endif /* XSS */
             if (op == JSOP_GETTER) {
                 getter = (JSPropertyOp) JSVAL_TO_OBJECT(rval);
                 setter = NULL;
@@ -3954,11 +6438,24 @@
 #endif /* JS_HAS_GETTER_SETTER */
 
 #if JS_HAS_INITIALIZERS
+		  /*
+		   * Opcode that starts a new initializer (e.g. by literals)
+		   * e.g. x = [ 1 ];
+		   */
           case JSOP_NEWINIT:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             argc = 0;
             fp->sharpDepth++;
             goto do_new;
 
+		  /*
+		   * Opcode that marks the end of an initializer
+		   * e.g. x = [ 1 ];
+		   */
           case JSOP_ENDINIT:
             if (--fp->sharpDepth == 0)
                 fp->sharpArray = NULL;
@@ -3970,9 +6467,18 @@
             cx->newborn[GCX_OBJECT] = JSVAL_TO_GCTHING(lval);
             break;
 
+		  /*
+		   * Initializes an object-property in an object-literal
+		   * e.g. var x = { 'a' : 1};
+		   */
           case JSOP_INITPROP:
             /* Pop the property's value into rval. */
             JS_ASSERT(sp - fp->spbase >= 2);
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             rval = FETCH_OPND(-1);
 
             /* Get the immediate property name into id. */
@@ -3981,9 +6487,18 @@
             i = -1;
             goto do_init;
 
+		  /*
+		   * Initializes an Array-element in an array-literal
+		   * e.g. var x = [ 1 ];
+		   */
           case JSOP_INITELEM:
             /* Pop the element's value into rval. */
             JS_ASSERT(sp - fp->spbase >= 3);
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             rval = FETCH_OPND(-1);
 
             /* Pop and conditionally atomize the element id. */
@@ -3991,6 +6506,17 @@
             i = -2;
 
           do_init:
+#ifdef XSS /* XSS */
+			/* taint on rval and scope */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+			/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+			if (taintoutput == XSS_TAINTED) {
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+			}
+#endif /* XSS */
+
             /* Find the object being initialized at top of stack. */
             lval = FETCH_OPND(i-1);
             JS_ASSERT(JSVAL_IS_OBJECT(lval));
@@ -4004,7 +6530,17 @@
             break;
 
 #if JS_HAS_SHARP_VARS
+		  /*
+		   * Defines a sharp-variable for an array-literal
+		   * e.g. var x = #0 = [1, #0#];
+		   * where the #0 is a sharp-variable for the array.
+		   */
           case JSOP_DEFSHARP:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             obj = fp->sharpArray;
             if (!obj) {
                 obj = js_NewArrayObject(cx, 0, NULL);
@@ -4025,12 +6561,31 @@
                 ok = JS_FALSE;
                 goto out;
             }
+#ifdef XSS /* XSS */
+			/* check if the output has to be tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+			/* set current scope for OBJ_SET_PROPERTY if it calls a native method */
+			if (taintoutput == XSS_TAINTED) {
+				XSS_NEW_SCOPE(fp->scope_current, pc, pc + 1, taintoutput);
+			}
+#endif /* XSS */
             ok = OBJ_SET_PROPERTY(cx, obj, id, &rval);
             if (!ok)
                 goto out;
             break;
 
+		  /*
+		   * Uses a sharp-variable that was defined with JSOP_DEFSHARP for
+		   * an array-literal
+		   * e.g. #0= [ #0# ]; (the last reference #0#)
+		   */
           case JSOP_USESHARP:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             i = (jsint) GET_ATOM_INDEX(pc);
             id = (jsid) INT_TO_JSVAL(i);
             obj = fp->sharpArray;
@@ -4049,6 +6604,10 @@
                 ok = JS_FALSE;
                 goto out;
             }
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             PUSH_OPND(rval);
             break;
 #endif /* JS_HAS_SHARP_VARS */
@@ -4067,18 +6626,32 @@
             sp = fp->spbase + i;
             break;
 
+		  /*
+		   * Called to jump into finally-block of try-catch-finally
+		   * e.g. try { throw("test"); } catch(e) {} finally{};
+		   */
           case JSOP_GOSUB:
             i = PTRDIFF(pc, script->main, jsbytecode) + len;
             len = GET_JUMP_OFFSET(pc);
             PUSH(INT_TO_JSVAL(i));
             break;
 
+		  /*
+		   * Called to jump into finally-block of try-catch-finally 
+		   * (extended jump)
+		   * e.g. try { throw("test"); } catch(e) {} finally{};
+		   */
           case JSOP_GOSUBX:
             i = PTRDIFF(pc, script->main, jsbytecode) + len;
             len = GET_JUMPX_OFFSET(pc);
             PUSH(INT_TO_JSVAL(i));
             break;
 
+		  /*
+		   * Called to return from a finally-block of try-catch-finally 
+		   * the rval is the pc of the next opcode
+		   * e.g. try { throw("test"); } catch(e) {} finally{};
+		   */
           case JSOP_RETSUB:
             rval = POP();
             JS_ASSERT(JSVAL_IS_INT(rval));
@@ -4087,22 +6660,62 @@
             len = 0;
             break;
 
+		  /*
+		   * handles the (e)-part in the catch-definition
+		   * e.g. try { throw("test"); } catch(e) {} finally{};
+		   */
           case JSOP_EXCEPTION:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+			XSS_TAINTOUTPUT_ON_VALUE(cx->exception);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_SET_STACK_TAINTED_ON_OUTPUT(fp->scope_sp,(sp), taintoutput);
+#endif /* XSS */
             PUSH(cx->exception);
             break;
 
+		  /*
+		   * Throws an exception
+		   * e.g. throw("test");
+		   */
           case JSOP_THROW:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             cx->throwing = JS_TRUE;
             cx->exception = POP_OPND();
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(cx->exception);
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(cx->exception);
+#endif /* XSS */
             ok = JS_FALSE;
             /* let the code at out try to catch the exception. */
             goto out;
 
+		  /*
+		   * Initializes the variable in the catch-block of a
+		   * try-catch-statement
+		   * e.g. try {} catch (e) {}
+		   */
           case JSOP_INITCATCHVAR:
             /* Pop the property's value into rval. */
             JS_ASSERT(sp - fp->spbase >= 2);
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             rval = POP_OPND();
 
+#ifdef XSS /* XSS */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+#endif /* XSS */
+
             /* Get the immediate catch variable name into id. */
             atom = GET_ATOM(cx, script, pc);
             id   = (jsid)atom;
@@ -4112,6 +6725,12 @@
             JS_ASSERT(JSVAL_IS_OBJECT(lval));
             obj = JSVAL_TO_OBJECT(lval);
 
+#ifdef XSS /* XSS */
+			XSS_CALC_TAINTOUTPUT;
+			XSS_TAINT_JSVAL_ON_OUTPUT(rval);
+			XSS_TAINT_JSVAL_ON_OUTPUT(lval);
+#endif /* XSS */
+
             /* Define obj[id] to contain rval and to be permanent. */
             ok = OBJ_DEFINE_PROPERTY(cx, obj, id, rval, NULL, NULL,
                                      JSPROP_PERMANENT, NULL);
@@ -4121,7 +6740,16 @@
 #endif /* JS_HAS_EXCEPTIONS */
 
 #if JS_HAS_INSTANCEOF
+		  /*
+		   * checks if something is an instance of something other
+		   * e.g. "test" instanceof Object;
+		   */
           case JSOP_INSTANCEOF:
+#ifdef XSS /* XSS */
+			/* check if the stack is tainted or the scope */
+			XSS_TAINTOUTPUT_ON_STACK;
+			XSS_TAINTOUTPUT_ON_SCOPE;
+#endif /* XSS */
             rval = FETCH_OPND(-1);
             if (JSVAL_IS_PRIMITIVE(rval)) {
                 SAVE_SP(fp);
@@ -4144,11 +6772,21 @@
                     goto out;
             }
             sp--;
+#ifdef XSS /* XSS */
+			/* taint the output if one of the operands is tainted */
+			XSS_TAINTOUTPUT_ON_VALUE(rval);
+			XSS_TAINTOUTPUT_ON_VALUE(lval);
+			XSS_CALC_TAINTOUTPUT;
+#endif /* XSS */
             STORE_OPND(-1, BOOLEAN_TO_JSVAL(cond));
             break;
 #endif /* JS_HAS_INSTANCEOF */
 
 #if JS_HAS_DEBUGGER_KEYWORD
+		  /*
+		   * called if the keyword debugger is encountered
+		   * e.g. debugger;
+		   */
           case JSOP_DEBUGGER:
           {
             JSTrapHandler handler = rt->debuggerHandler;
@@ -4192,10 +6830,12 @@
     advance_pc:
         pc += len;
 
+#ifdef XSS_DEBUG
+		if (xssGetDoLog() == XSS_DO_LOG) {
+#endif /* XSS_DEBUG */
 #ifdef DEBUG
         if (tracefp) {
             intN ndefs, n;
-            jsval *siter;
 
             ndefs = cs->ndefs;
             if (ndefs) {
@@ -4203,22 +6843,37 @@
                 for (n = -ndefs; n < 0; n++) {
                     str = js_DecompileValueGenerator(cx, n, sp[n], NULL);
                     if (str) {
-                        fprintf(tracefp, "%s %s",
+                        fprintf(tracefp, "%s %s(%u @ %x)",
                                 (n == -ndefs) ? "  output:" : ",",
-                                JS_GetStringBytes(str));
+                                JS_GetStringBytes(str), (uint) sp[n], (uint) sp+(n));
+#ifdef XSS
+#ifdef XSS_DEBUG
+						XSS_PRINT_GC_TAINT(sp[n]);
+#endif /* XSS_DEBUG */
+#endif /* XSS */
                     }
                 }
                 fprintf(tracefp, " @ %d\n", sp - fp->spbase);
             }
-            fprintf(tracefp, "  stack: ");
-            for (siter = fp->spbase; siter < sp; siter++) {
-                str = js_ValueToSource(cx, *siter);
-                fprintf(tracefp, "%s ",
-                        str ? JS_GetStringBytes(str) : "<null>");
-            }
-            fputc('\n', tracefp);
+#ifdef XSS
+#ifndef XSS_DEBUG
+			JS_BEGIN_MACRO
+				jsval *siter;
+				fprintf(tracefp, "  stack: ");
+				for (siter = fp->spbase; siter < sp; siter++) {
+					str = js_ValueToSource(cx, *siter);
+					fprintf(tracefp, "%s ",
+							str ? JS_GetStringBytes(str) : "<null>");
+				}
+				fputc('\n', tracefp);
+			JS_END_MACRO;
+#endif /* XSS_DEBUG */
+#endif /* XSS */
         }
 #endif
+#ifdef XSS_DEBUG
+	}
+#endif /* XSS_DEBUG */
     }
 out:
 
@@ -4261,6 +6916,17 @@
             goto advance_pc;
         }
     }
+
+#ifdef XSS /* XSS */
+	if (xss_inited == 1) {
+		XSS_SCOPES_FREE_ALL(fp);
+	}
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+	fp->scope_count = 0;
+	xssSetDoLog(0);
+#endif /* XSS_DEBUG */
+#endif /* XSS */
+
 no_catch:
 #endif
 
Index: mozilla-src/mozilla/js/src/jsinterp.h
diff -u mozilla-src/mozilla/js/src/jsinterp.h:1.1 mozilla-src/mozilla/js/src/jsinterp.h:1.5
--- mozilla-src/mozilla/js/src/jsinterp.h:1.1	Sat Nov 13 12:39:00 2004
+++ mozilla-src/mozilla/js/src/jsinterp.h	Tue Jul  5 18:43:37 2005
@@ -44,6 +44,9 @@
  */
 #include "jsprvtd.h"
 #include "jspubtd.h"
+#ifdef XSS /* XSS */
+#include "xsstaint.h"
+#endif /* XSS */
 
 JS_BEGIN_EXTERN_C
 
@@ -74,6 +77,15 @@
     JSStackFrame    *dormantNext;   /* next dormant frame chain */
     JSAtomMap       *objAtomMap;    /* object atom map, non-null only if we
                                        hit a regexp object literal */
+#ifdef XSS /* XSS */
+	XSS_scope		*scope_root;	/* the taint-scopes (in a linked list) for this frame */
+	XSS_scope		*scope_current; /* the current taint-scope for this frame */
+	jsval			*scope_sp;		/* a pointer to the last not-tainted stackelement*/
+	int				taint_retval;	/* flag if the returnvalue should be tainted or not */
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+	int				scope_count;	/* counts the number of currently tainted scopes */
+#endif /* XSS_DEBUG */
+#endif /* XSS */
 };
 
 typedef struct JSInlineFrame {
Index: mozilla-src/mozilla/js/src/jsnum.c
diff -u mozilla-src/mozilla/js/src/jsnum.c:1.1 mozilla-src/mozilla/js/src/jsnum.c:1.5
--- mozilla-src/mozilla/js/src/jsnum.c:1.1	Sat Nov 13 12:39:01 2004
+++ mozilla-src/mozilla/js/src/jsnum.c	Mon Oct  3 15:41:56 2005
@@ -539,10 +539,28 @@
 {
     jsdouble *dp;
 
-    dp = (jsdouble *) js_AllocGCThing(cx, GCX_DOUBLE);
+#ifdef XSS /* XSS */
+	/* creates the double and sets the tainting-info if it should be an int */
+	XSS_taint* xss_taint;
+	jsint i;
+#endif /* XSS */
+
+	dp = (jsdouble *) js_AllocGCThing(cx, GCX_DOUBLE);
     if (!dp)
 	return NULL;
     *dp = d;
+
+#ifdef XSS /* XSS */
+	/* only create doubles for xss-info */
+    if (JSDOUBLE_IS_INT(d, i) && INT_FITS_IN_JSVAL(i)) {
+		XSS_JSVAL_GET_TAINT(DOUBLE_TO_JSVAL(dp), xss_taint);
+		XSS_TAINTSTRUCTURE_SET_ORIGTYPE(xss_taint, JSVAL_INT);
+	} else {
+		XSS_JSVAL_GET_TAINT(DOUBLE_TO_JSVAL(dp), xss_taint);
+		XSS_TAINTSTRUCTURE_SET_ORIGTYPE(xss_taint, JSVAL_DOUBLE);
+	}
+#endif /* XSS */
+
     return dp;
 }
 
@@ -567,14 +585,25 @@
 JSBool
 js_NewNumberValue(JSContext *cx, jsdouble d, jsval *rval)
 {
-    jsint i;
 
+    jsint i;
+#ifndef XSS /* orig */
     if (JSDOUBLE_IS_INT(d, i) && INT_FITS_IN_JSVAL(i)) {
 	*rval = INT_TO_JSVAL(i);
     } else {
 	if (!js_NewDoubleValue(cx, d, rval))
 	    return JS_FALSE;
     }
+#else /* creates the double and sets the tainting-info if it should be an int */
+	XSS_taint* xss_taint;
+	/* only create doubles for xss-info */
+	if (!js_NewDoubleValue(cx, d, rval))
+		return JS_FALSE;
+    if (JSDOUBLE_IS_INT(d, i) && INT_FITS_IN_JSVAL(i)) {
+		XSS_JSVAL_GET_TAINT(*rval, xss_taint);
+		XSS_TAINTSTRUCTURE_SET_ORIGTYPE(xss_taint, JSVAL_INT);
+	}
+#endif /* XSS */
     return JS_TRUE;
 }
 
Index: mozilla-src/mozilla/js/src/jsobj.c
diff -u mozilla-src/mozilla/js/src/jsobj.c:1.1 mozilla-src/mozilla/js/src/jsobj.c:1.12
--- mozilla-src/mozilla/js/src/jsobj.c:1.1	Sat Nov 13 12:39:00 2004
+++ mozilla-src/mozilla/js/src/jsobj.c	Tue Jan 24 22:07:02 2006
@@ -68,6 +68,11 @@
 
 #include "jsdbgapi.h"   /* whether or not JS_HAS_OBJ_WATCHPOINT */
 
+#ifdef XSS /* include necessary headerfiles */
+#include "xsstaint.h"
+#include "xssdbg.h"
+#endif /* XSS */
+
 #ifdef JS_THREADSAFE
 #define NATIVE_DROP_PROPERTY js_DropProperty
 
@@ -1077,6 +1082,21 @@
             scopeobj = caller->scopeChain;
     }
 #endif
+
+#ifdef XSS /* XSS */
+	if (cx->fp != NULL) {
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+		fprintf(stderr, "obj_eval: t = ");
+#endif /* XSS_DEBUG */
+		if (!XSS_SCOPE_ISTAINTED(cx->fp->scope_current)) {
+			if (XSS_JSVAL_IS_TAINTED(argv[0])) {
+				XSS_SCOPE_INIT_ROOT((*cx->fp), XSS_TAINTED, XSS_TRUE);
+			} else {
+				XSS_SCOPE_INIT_ROOT((*cx->fp), XSS_NOT_TAINTED, XSS_TRUE);
+			}
+		}
+	}
+#endif /* XSS */
     ok = js_Execute(cx, scopeobj, script, caller, JSFRAME_EVAL, rval);
     JS_DestroyScript(cx, script);
 
@@ -3629,9 +3649,19 @@
 js_ValueToObject(JSContext *cx, jsval v, JSObject **objp)
 {
     JSObject *obj;
+#ifdef XSS /* get the original type of the value for later processing */
+	int xss_origtype = XSS_NOTYPE;
+	jsval xss_jsval;
+	XSS_TO_ORIG_JSVAL(v, xss_jsval);
+	XSS_JSVAL_GET_ORIGTYPE(v,xss_origtype);
+#endif /* XSS */
 
     if (JSVAL_IS_NULL(v) || JSVAL_IS_VOID(v)) {
         obj = NULL;
+#ifdef XSS /* handle xss-types */
+	} else if ((xss_origtype == JSVAL_VOID) || (xss_jsval == JSVAL_NULL)) {
+        obj = NULL;
+#endif /* XSS */
     } else if (JSVAL_IS_OBJECT(v)) {
         obj = JSVAL_TO_OBJECT(v);
         if (!OBJ_DEFAULT_VALUE(cx, obj, JSTYPE_OBJECT, &v))
@@ -3643,6 +3673,12 @@
             obj = js_StringToObject(cx, JSVAL_TO_STRING(v));
         } else if (JSVAL_IS_INT(v)) {
             obj = js_NumberToObject(cx, (jsdouble)JSVAL_TO_INT(v));
+#ifdef XSS /* handle xss-types */
+		} else if (xss_origtype == JSVAL_BOOLEAN) {
+            obj = js_BooleanToObject(cx, (JSBool) *JSVAL_TO_DOUBLE(v));
+		} else if (xss_origtype == JSVAL_DOUBLE) {
+            obj = js_NumberToObject(cx, *JSVAL_TO_DOUBLE(v));
+#endif /* XSS */
         } else if (JSVAL_IS_DOUBLE(v)) {
             obj = js_NumberToObject(cx, *JSVAL_TO_DOUBLE(v));
         } else {
Index: mozilla-src/mozilla/js/src/jsobj.h
diff -u mozilla-src/mozilla/js/src/jsobj.h:1.1 mozilla-src/mozilla/js/src/jsobj.h:1.5
--- mozilla-src/mozilla/js/src/jsobj.h:1.1	Sat Nov 13 12:39:01 2004
+++ mozilla-src/mozilla/js/src/jsobj.h	Tue Jul  5 18:43:55 2005
@@ -50,6 +50,9 @@
 #include "jshash.h" /* Added by JSIFY */
 #include "jsprvtd.h"
 #include "jspubtd.h"
+#ifdef XSS /* include necessary headerfile */
+#include "xsstaint.h"
+#endif /* XSS */
 
 JS_BEGIN_EXTERN_C
 
@@ -124,6 +127,9 @@
 struct JSObject {
     JSObjectMap *map;
     jsval       *slots;
+#ifdef XSS /* add xss-taintstructure */
+	XSS_taint   taint;
+#endif /* XSS */
 };
 
 #define JSSLOT_PROTO        0
Index: mozilla-src/mozilla/js/src/jsopcode.c
diff -u mozilla-src/mozilla/js/src/jsopcode.c:1.1 mozilla-src/mozilla/js/src/jsopcode.c:1.4
--- mozilla-src/mozilla/js/src/jsopcode.c:1.1	Sat Nov 13 12:39:00 2004
+++ mozilla-src/mozilla/js/src/jsopcode.c	Tue Jan 31 11:42:09 2006
@@ -97,7 +97,7 @@
 
 const JSCodeSpec FAR js_CodeSpec[] = {
 #define OPDEF(op,val,name,token,length,nuses,ndefs,prec,format) \
-    {name,token,length,nuses,ndefs,prec,format},
+	{name,token,length,nuses,ndefs,prec,format},
 #include "jsopcode.tbl"
 #undef OPDEF
 };
@@ -130,6 +130,7 @@
     while (pc < end) {
         if (pc == script->main)
             fputs("main:\n", fp);
+
         len = js_Disassemble1(cx, script, pc,
                               PTRDIFF(pc, script->code, jsbytecode),
                               lines, fp);
@@ -1257,7 +1258,9 @@
                 break;
 
               case JSOP_ENTERWITH:
+#ifndef XSS /* !XSS */
                 JS_ASSERT(!js_GetSrcNote(jp->script, pc));
+#endif /* !XSS */
                 rval = POP_STR();
                 js_printf(jp, "\twith (%s) {\n", rval);
                 jp->indent += 4;
Index: mozilla-src/mozilla/js/src/jsstr.c
diff -u mozilla-src/mozilla/js/src/jsstr.c:1.1 mozilla-src/mozilla/js/src/jsstr.c:1.7
--- mozilla-src/mozilla/js/src/jsstr.c:1.1	Sat Nov 13 12:39:00 2004
+++ mozilla-src/mozilla/js/src/jsstr.c	Tue Jul  5 18:45:32 2005
@@ -68,6 +68,11 @@
 #include "jsopcode.h"
 #include "jsregexp.h"
 #include "jsstr.h"
+#ifdef XSS /* include necessary headerfiles */
+#include "xsstaint.h"
+#include "xssdbg.h"
+#endif /* XSS */
+
 
 #if JS_HAS_REPLACE_LAMBDA
 #include "jsinterp.h"
@@ -2647,6 +2652,11 @@
 {
     JSObject *obj;
     JSString *str;
+#ifdef XSS /* get original type of jsval */
+	int xss_origtype = XSS_NOTYPE;
+	XSS_JSVAL_GET_ORIGTYPE(v,xss_origtype);
+#endif /* XSS */
+	
 
     if (JSVAL_IS_OBJECT(v)) {
         obj = JSVAL_TO_OBJECT(v);
@@ -2655,10 +2665,19 @@
         if (!OBJ_DEFAULT_VALUE(cx, obj, JSTYPE_STRING, &v))
             return NULL;
     }
+
     if (JSVAL_IS_STRING(v)) {
         str = JSVAL_TO_STRING(v);
     } else if (JSVAL_IS_INT(v)) {
         str = js_NumberToString(cx, JSVAL_TO_INT(v));
+#ifdef XSS /* handle xss-types */
+    } else if (xss_origtype == JSVAL_BOOLEAN) {
+        str = js_BooleanToString(cx, (JSBool) *JSVAL_TO_DOUBLE(v));
+    } else if (xss_origtype == JSVAL_DOUBLE) {
+        str = js_NumberToString(cx, *JSVAL_TO_DOUBLE(v));
+    } else if (xss_origtype == JSVAL_VOID) {
+        str = ATOM_TO_STRING(cx->runtime->atomState.typeAtoms[JSTYPE_VOID]);
+#endif /* XSS */
     } else if (JSVAL_IS_DOUBLE(v)) {
         str = js_NumberToString(cx, *JSVAL_TO_DOUBLE(v));
     } else if (JSVAL_IS_BOOLEAN(v)) {
Index: mozilla-src/mozilla/js/src/jsstr.h
diff -u mozilla-src/mozilla/js/src/jsstr.h:1.1 mozilla-src/mozilla/js/src/jsstr.h:1.3
--- mozilla-src/mozilla/js/src/jsstr.h:1.1	Sat Nov 13 12:38:59 2004
+++ mozilla-src/mozilla/js/src/jsstr.h	Tue Jan 25 14:30:27 2005
@@ -72,6 +72,9 @@
 struct JSString {
     size_t          length;
     jschar          *chars;
+#ifdef XSS /* add xss-taintstructure */
+	XSS_taint   taint;
+#endif /* XSS */
 };
 
 /*
Index: mozilla-src/mozilla/js/src/myembed.bat
diff -u /dev/null mozilla-src/mozilla/js/src/myembed.bat:1.1
--- /dev/null	Sun Mar 19 00:41:54 2006
+++ mozilla-src/mozilla/js/src/myembed.bat	Tue Mar 29 15:36:29 2005
@@ -0,0 +1 @@
+nmake -f embed.mak CFG="embedtest - Win32 Debug" ALL 
Index: mozilla-src/mozilla/js/src/mymake.bat
diff -u /dev/null mozilla-src/mozilla/js/src/mymake.bat:1.2
--- /dev/null	Sun Mar 19 00:41:54 2006
+++ mozilla-src/mozilla/js/src/mymake.bat	Tue Mar 29 17:13:57 2005
@@ -0,0 +1,2 @@
+rem make
+nmake -f js.mak CFG="jsshell - Win32 Debug" ALL
\ No newline at end of file
Index: mozilla-src/mozilla/js/src/mytouch.bat
diff -u /dev/null mozilla-src/mozilla/js/src/mytouch.bat:1.1
--- /dev/null	Sun Mar 19 00:41:54 2006
+++ mozilla-src/mozilla/js/src/mytouch.bat	Tue Mar  8 11:51:32 2005
@@ -0,0 +1 @@
+touch *.c *.h xss/*.c xss/*.h
\ No newline at end of file
Index: mozilla-src/mozilla/js/src/xssdbg.h
diff -u /dev/null mozilla-src/mozilla/js/src/xssdbg.h:1.3
--- /dev/null	Sun Mar 19 00:41:54 2006
+++ mozilla-src/mozilla/js/src/xssdbg.h	Sun Jan 29 15:36:47 2006
@@ -0,0 +1,240 @@
+#ifndef xssdbg_h___
+#define xssdbg_h___
+
+/*
+ * Contains macros to help debug the engine (with the xss-extension)
+ */
+
+#include "jsapi.h"
+#include "jsgc.h"
+#include "jsstddef.h"
+
+/* prints the atom to stdout  */
+#define XSS_PRINT_ATOM(atom) \
+    if (ATOM_IS_STRING(atom)) \
+        printf("  atom = \"%s\"\n", js_AtomToPrintableString(cx, atom)); \
+    else if (ATOM_IS_INT(atom))												\
+        printf("  atom = %ld\n", (long)ATOM_TO_INT(atom));						 \
+    else																	  \
+        printf("  atom = %.16g\n", *ATOM_TO_DOUBLE(atom));						   \
+/*			printf("  atom = %s \n", js_AtomToPrintableString(cx,atom)); */
+
+/* prints the jsval */
+#define XSS_PRINT_VAL(x) printf("  fetch val = %s \n", js_AtomToPrintableString(cx,js_ValueToStringAtom(cx, x)))
+
+/* prints the type of the given value */
+#define XSS_PRINT_TYPE(val, strname)							\
+	if (JSVAL_IS_OBJECT(val)) {									\
+		printf(strname " is object\n");							\
+	}															\
+	if (JSVAL_IS_INT(val)) {									\
+		printf(strname " is int\n");							\
+	} else														\
+	if (JSVAL_IS_DOUBLE(val)) {									\
+		printf(strname " is double\n");							\
+	} else														\
+	if (JSVAL_IS_NUMBER(val)) {									\
+		printf(strname " is number\n");							\
+	}															\
+	if (JSVAL_IS_STRING(val)) {									\
+		printf(strname "  is string\n");						\
+	}															\
+	if (JSVAL_IS_BOOLEAN(val)) {								\
+		printf(strname "  is boolean \n");						\
+	}															\
+	if (JSVAL_IS_NULL(val)) {									\
+		printf(strname "  is null \n");							\
+	}															\
+	if (JSVAL_IS_VOID(val)) {									\
+		printf(strname "  is void \n");							\
+	} 
+
+
+/* returns the type of the given value in str */
+#define XSS_GET_TYPE_STR(val, str)								\
+	if (JSVAL_IS_OBJECT(val)) {									\
+		str = "object";											\
+	}															\
+	if (JSVAL_IS_INT(val)) {									\
+		str = "int";											\
+	} else														\
+	if (JSVAL_IS_DOUBLE(val)) {									\
+		str = "double";											\
+	} else														\
+	if (JSVAL_IS_NUMBER(val)) {									\
+		str = "number";											\
+	}															\
+	if (JSVAL_IS_STRING(val)) {									\
+		str = "string";											\
+	}															\
+	if (JSVAL_IS_BOOLEAN(val)) {								\
+		str = "boolean";										\
+	}															\
+	if (JSVAL_IS_NULL(val)) {									\
+		str = "null";											\
+	}															\
+	if (JSVAL_IS_VOID(val)) {									\
+		str = "void";											\
+	} 
+
+/* just prints the content of a taint-structure */
+#define XSS_PRINT_TAINTVALUE(taint)									\
+	if (taint != 0) {												\
+		fprintf(tracefp,"t: %d %d", taint->istainted, taint->type);	\
+	} else {														\
+		fprintf(tracefp,"t: null!");								\
+	}
+
+/* prints taintvalue of a JSGCThing */
+#define XSS_PRINT_GC_TAINT(gcthing)								\
+	if (JSVAL_IS_GCTHING(gcthing)) {							\
+		XSS_PRINTDEBUG_STR("(");								\
+		XSS_JSVAL_GET_TAINT(gcthing,xss_taint);					\
+		XSS_PRINT_TAINTVALUE(xss_taint);						\
+		XSS_PRINTDEBUG_STR(")");								\
+	} else {													\
+		XSS_PRINTDEBUG_STR("(" #gcthing " no gcthing!)\n");		\
+	}
+
+/* taints a string if it contains "evil" */
+#define XSS_TAINT_ISEVILSTR(cmpstr, isevil)						\
+		JS_BEGIN_MACRO											\
+			jschar *mychars;									\
+			JSString *mystr;									\
+			isevil = 0;											\
+																\
+			mychars = (jschar *) JS_malloc(cx, (4 + 1) *		\
+						sizeof(jschar));						\
+			mychars[0] = 'e';									\
+			mychars[1] = 'v';									\
+			mychars[2] = 'i';									\
+			mychars[3] = 'l';									\
+			mychars[4] = 0;										\
+			mystr = js_NewString(cx, mychars, 4, 0);			\
+			if (mystr && cmpstr &&								\
+				(js_CompareStrings(mystr,cmpstr) == 0)) {		\
+																\
+				isevil = 1;										\
+			}													\
+			mychars = (jschar *) JS_malloc(cx, (6 + 1) *		\
+						sizeof(jschar));						\
+			mychars[0] = '"';									\
+			mychars[1] = 'e';									\
+			mychars[2] = 'v';									\
+			mychars[3] = 'i';									\
+			mychars[4] = 'l';									\
+			mychars[5] = '"';									\
+			mychars[6] = 0;										\
+			mystr = js_NewString(cx, mychars, 6, 0);			\
+			if (mystr && cmpstr &&								\
+				(js_CompareStrings(mystr,cmpstr) == 0)) {		\
+																\
+				isevil = 1;										\
+			}													\
+		JS_END_MACRO
+
+/* taints the evilval if the cmpstr is evil or "evil" */
+#define XSS_TAINT_EVILSTR(cmpstr, evilval)						\
+		JS_BEGIN_MACRO											\
+			int isevil = 0;										\
+			XSS_TAINT_ISEVILSTR(cmpstr, isevil);				\
+			if (isevil == 1) {									\
+				XSS_JSVAL_SET_ISTAINTED(XSS_TAINTED,evilval);	\
+			}													\
+		JS_END_MACRO
+
+/* prints a debugstring */
+#ifdef XSS_DEBUG
+
+#define XSS_PRINTDEBUG_STR(str)									\
+	if (xssGetDoLog() == XSS_DO_LOG)							\
+		fprintf(tracefp, str)
+
+#define XSS_PRINTDEBUG_INT(str)									\
+	if (xssGetDoLog() == XSS_DO_LOG)							\
+		fprintf(tracefp, "%i", str)
+
+#else
+
+#define XSS_PRINTDEBUG_STR(str) 
+
+#define XSS_PRINTDEBUG_INT(str)	
+
+#endif /* XSS_DEBUG */
+
+#define XSS_PRINT_INPUTS(filep)									\
+		tracefp = (FILE *) filep;								\
+        if (tracefp) {											\
+            intN nuses, n;										\
+																\
+            fprintf(tracefp, "%4u: ", js_PCToLineNumber(cx, script, pc));	\
+            js_Disassemble1(cx, script, pc,									\
+                            PTRDIFF(pc, script->code, jsbytecode), JS_FALSE,\
+                            tracefp);										\
+            nuses = cs->nuses;												\
+            if (nuses) {													\
+                SAVE_SP(fp);												\
+                for (n = -nuses; n < 0; n++) {								\
+                    str = js_DecompileValueGenerator(cx, n, sp[n], NULL);	\
+                    if (str != NULL) {										\
+                        fprintf(tracefp, "%s %s(@ %d)",						\
+                                (n == -nuses) ? "  inputs:" : ",",			\
+                                JS_GetStringBytes(str), sp[n]);				\
+						XSS_PRINT_GC_TAINT(sp[n]);							\
+                    }											\
+                }												\
+                fprintf(tracefp, " @ %d\n", sp - fp->spbase);	\
+            }													\
+		}
+
+#define XSS_PRINT_OUPUT(filep)									\
+		tracefp = (FILE *) filep;								\
+        if (tracefp) {											\
+            intN ndefs, n;										\
+            jsval *siter;										\
+																\
+            ndefs = cs->ndefs;									\
+            if (ndefs) {										\
+                SAVE_SP(fp);									\
+                for (n = -ndefs; n < 0; n++) {					\
+                    str = js_DecompileValueGenerator(cx, n, sp[n], NULL);	\
+                    if (str) {												\
+                        fprintf(tracefp, "%s %s(@ %d)",						\
+                                (n == -ndefs) ? "  output:" : ",",			\
+                                JS_GetStringBytes(str), sp[n]);				\
+						XSS_PRINT_GC_TAINT(sp[n]);							\
+                    }											\
+                }												\
+                fprintf(tracefp, " @ %d\n", sp - fp->spbase);	\
+            }													\
+            fprintf(tracefp, "  stack: ");						\
+            for (siter = fp->spbase; siter < sp; siter++) {		\
+                str = js_ValueToSource(cx, *siter);				\
+                fprintf(tracefp, "%s ",							\
+                        str ? JS_GetStringBytes(str) : "<null>");	\
+            }													\
+            fputc('\n', tracefp);								\
+        }
+
+/* prints the node */
+#define XSS_PRINT_SCOPE(tracefp, script, node)					\
+	if (node) {													\
+		if (xssGetDoLog() == XSS_DO_LOG) {						\
+			fprintf(tracefp, "scope: n: %u ", node);			\
+			fprintf(tracefp, "t: %d ", node->istainted);		\
+			fprintf(tracefp, "p: %d ", node->prev_istainted);	\
+			fprintf(tracefp, "op: %s ", js_CodeSpec[node->opcode].name);			\
+			if (script) {										\
+				fprintf(tracefp, "f: %05u ", PTRDIFF(node->from, script->code, jsbytecode));	\
+				fprintf(tracefp, "t: %05u ", PTRDIFF(node->to, script->code, jsbytecode));		\
+			} else {											\
+				fprintf(tracefp, "f: %u ", node->from);			\
+				fprintf(tracefp, "t: %u ", node->to);			\
+			}													\
+			fprintf(tracefp, "n: %u ", node->next);				\
+			fprintf(tracefp, "\n");								\
+		}														\
+	}
+
+#endif
+
Index: mozilla-src/mozilla/js/src/xsstaint.c
diff -u /dev/null mozilla-src/mozilla/js/src/xsstaint.c:1.4
--- /dev/null	Sun Mar 19 00:41:54 2006
+++ mozilla-src/mozilla/js/src/xsstaint.c	Sun Jan 29 15:36:26 2006
@@ -0,0 +1,335 @@
+#include <stdlib.h>
+#include "jsprvtd.h"
+#include "jspubtd.h"
+#include "jsapi.h"
+#include "jsscript.h"
+#include "xsstaint.h"
+#include "xssdbg.h"
+
+/* Checks if the jsval has a xss-taintstructure
+ * v: the value to check
+ * returns an int that is 0 if it hasn't a xss-taintstructure
+ * otherwise 1
+ */
+JS_PUBLIC_API(int) xssJSValIsXssType(jsval v) {
+
+	int result = 0;
+	XSS_taint* xsstaint;
+
+	/* check if it is a JSGCThing */
+	if (JSVAL_IS_GCTHING(v)) {
+
+		/* get the taintstructure */
+		XSS_JSVAL_GET_TAINT(v, xsstaint);
+		
+		if (xsstaint != 0) {
+			result = 1;
+		}
+	}
+
+	return result;
+}
+
+/**
+ * Checks if the given jsval is tainted.
+ * v: the jsval to test
+ * returns true if the jsval has a taintstructure and is tainted
+ */
+JS_PUBLIC_API(int) xssJSValIsTainted(jsval v) {
+	
+	int result = XSS_NOT_TAINTED;
+	XSS_taint* xsstaint;
+
+	/* check if it is a JSGCThing */
+	if (JSVAL_IS_GCTHING(v)) {
+
+		/* get the taintstructure */
+		XSS_JSVAL_GET_TAINT(v, xsstaint);
+		
+		/* check if there is a taintstructure and 
+		   if the value is tainted */
+		if (xsstaint != 0) {
+			result = xsstaint->istainted;
+		}
+	}
+
+	return result;
+}
+
+/**
+ * Gets the Type of the jsval
+ * v: the jsval to get the type
+ * returns the type of the jsval
+ */
+int xssJSValGetType(jsval v) {
+
+	int result = XSS_NOTYPE;
+	XSS_taint* xss_taint;
+	
+	/* check type of tainted values */
+	if (JSVAL_IS_GCTHING(v)) {
+		XSS_JSVAL_GET_TAINT((jsval) v,xss_taint);
+		if ((xss_taint != 0) &&
+			(xss_taint->type != XSS_NOTYPE)) {
+			result = xss_taint->type;
+		}
+	}
+
+	/* no tainted value, so get the original type */
+	if (result == XSS_NOTYPE) {
+
+		if (JSVAL_IS_OBJECT(v)) {
+			result = JSVAL_OBJECT;
+		}
+		if (JSVAL_IS_INT(v)) {
+			result = JSVAL_INT;
+		}
+		if (JSVAL_IS_DOUBLE(v)) {
+			result = JSVAL_DOUBLE;
+		}
+		if (JSVAL_IS_STRING(v)) {
+			result = JSVAL_STRING;
+		}
+		if (JSVAL_IS_BOOLEAN(v)) {
+			result = JSVAL_BOOLEAN;
+		}
+		if (JSVAL_IS_NULL(v)) {
+			result = JSVAL_NULL;
+		}
+		if (JSVAL_IS_VOID(v)) {
+			result = JSVAL_VOID;
+		}
+	}
+
+	return result;
+}
+
+/**
+ * Gets the last node of the scope-structure
+ * node: the node to get the last node from
+ * returns the last node or NULL if the parameter was NULL
+ */
+XSS_scope *xssGetLastScopeNode(XSS_scope *node) {
+	
+	XSS_scope *result = NULL;
+
+	if (node != NULL) {
+		if (node->next == NULL) {
+			result = node;
+		} else {
+			result = xssGetLastScopeNode(node->next);
+		}
+	}
+
+	return result;
+}
+
+/**
+ * Frees the memory allocated by the node
+ * node: the node to free
+ */
+void xssFreeNode(XSS_scope *node) {
+	if (node != NULL) {
+		free(node);
+		node = NULL;
+	}
+}
+
+/**
+ * Frees the node and all subnodes
+ * node: the node to start freeing the memory
+ */
+int xssFreeScope(XSS_scope *node) {
+	int result = 0;
+	if (node != NULL) {
+		if (node->next != NULL) 
+			result = xssFreeScope(node->next);
+#ifdef XSS_DEBUG /* XSS_DEBUG */
+		if (xssGetDoLog() == XSS_DO_LOG) {
+			fprintf(stderr, "xssFreeScope(): freeing node: ");
+			XSS_PRINT_SCOPE(stderr, ((JSScript*)0), node);
+		}
+#endif /* XSS_DEBUG */
+		xssFreeNode(node);
+		node = NULL;
+		++result;
+	}
+
+	return result;
+}
+
+/**
+ * Gets the node before the given node
+ * node: the node to return the parent
+ * returns the node before "node" or NULL if a parameter was NULL or
+ * there is no node before
+ */
+XSS_scope *xssScopeNodeBefore(XSS_scope *node) {
+	XSS_scope *result = NULL;
+
+    /* check input parameter */
+	if (node != NULL) {
+		result = node->prev;
+	}
+	return result;
+}
+
+/**
+ * Removes the node from the list
+ * node: the node to remove
+ * returns the node before the removed node
+ */
+XSS_scope *xssRemoveNodeFromScope(XSS_scope *node) {
+	XSS_scope *before_node = NULL;
+
+    /* check input parameter */
+	if (node != NULL) {
+		/* get the node before */
+		before_node = xssScopeNodeBefore(node);
+		if (before_node) {			
+			/* remove node from scope and free node */
+			before_node->next = node->next;
+			if (before_node->next) 
+				before_node->next->prev = before_node;
+		}
+		xssFreeNode(node);
+		node = NULL;
+	}
+
+	return before_node;
+}
+
+/**
+ * Checks if the pc is in the current scope
+ * pc: the programcounter
+ * current: the scope to check
+ * returns XSS_TRUE if the pc is in the scope and the scope isn't NULL
+ * otherwise XSS_FALSE
+ */
+int xssScopePcInCurrent(jsbytecode *pc, XSS_scope *current) {
+	
+	int result = XSS_FALSE;
+
+	/* check scope for NULL */
+	if (current != NULL) {
+		if ((pc >= current->from) && (pc < current->to)) {
+			result = XSS_TRUE;
+		}
+	}
+	return result;
+}
+
+/**
+ * Checks if the two scopes overlap
+ * scope1, scope2: the two scopes to check
+ * returns XSS_TRUE if the scopes overlap and aren't null. Otherwise XSS_FALSE
+ */
+int xssScopeOverlap(XSS_scope *scope1, XSS_scope *scope2) {
+	int result = XSS_FALSE;
+	if ((scope1 != NULL) && (scope2  != NULL)) {
+		jsbytecode *f1, *f2, *t1, *t2;
+		f1 = scope1->from;
+		t1 = scope1->to;
+		f2 = scope2->from;
+		t2 = scope2->to;
+		if ((f1<=t2) && (f2<=t1)) result = XSS_TRUE;
+		if ((f2<=t1) && (f1<=t2)) result = XSS_TRUE;
+	}
+	return result;
+}
+
+/**
+ * Merges the two scopes into one scope if they overlap
+ * scope1, scope2: the two scopes
+ * returns a scope if the two scopes overlap or NULL if the don't
+ */
+XSS_scope *xssScopeMerge(XSS_scope *scope1, XSS_scope *scope2) {
+	
+	/* create the new scope */
+	XSS_scope *result = NULL;
+	
+	if(xssScopeOverlap(scope1, scope2)) {
+		result = XSS_SCOPE_CREATE;
+		XSS_SCOPE_INIT(result, XSS_NOT_TAINTED);
+
+		if ((scope1 != NULL) && (scope2 != NULL)) {
+			/* calculate min- and max-borders */
+			jsbytecode *min, *max;
+			min = scope1->from;
+			max = scope1->to;
+			if (scope2->from < min) min = scope2->from;
+			if (scope2->to > max) max = scope2->from;
+
+			/* set the borders of the new scope */
+			result->from = min;
+			result->to = max;
+		}
+	}
+	return result;
+}
+
+/**
+ * Checks if the scope is unlimited (i.e. boundries XSS_PC_EMPTY)
+ * scope: the scope to check
+ * returns XSS_TRUE if both boundries are NULL, otherwise XSS_FALSE
+ */
+int xssScopeUnlimited(XSS_scope *scope) {
+	int result = XSS_FALSE;
+
+	if (scope != NULL) {
+		if ((scope->from == XSS_PC_EMPTY) && (scope->to == XSS_PC_EMPTY)) {
+			result = XSS_TRUE;
+		}
+	}
+
+	return result;
+}
+
+/**
+ * Checks if the current stackelement is tainted
+ * current_sp: the current stack pointer
+ * taintedsp: the stack pointer to the last untainted element
+ */
+int xssScopeStackIsTainted(jsval *current_sp, jsval *taintedsp) {
+	int result = XSS_NOT_TAINTED;
+
+	if (taintedsp != NULL) {
+		if (current_sp > taintedsp)
+			result = XSS_TAINTED;
+	}
+
+	return result;
+}
+
+/**
+ * searches backward for a scope with the given op
+ * if no op is found, NULL is returned
+ * current: the current scope
+ * op: the op to search for
+ * returns the found scope or NULL
+ */
+XSS_scope *xssScopeWithOp(XSS_scope *current, JSOp op) {
+	XSS_scope *result = NULL;
+
+	if (current != NULL) {
+		if (current->opcode != op) {
+			result = xssScopeWithOp(current->prev, op);
+		} else {
+			result = current;
+		}
+	}
+
+	return result;
+}
+
+static int XSS_DO_LOG_FLAG = 0;
+
+/* set logging 1 => log */
+void xssSetDoLog(int v) {
+	XSS_DO_LOG_FLAG = v;
+}
+
+/* get logging status 1 => log */
+int xssGetDoLog() {
+	return XSS_DO_LOG_FLAG;
+}
Index: mozilla-src/mozilla/js/src/xsstaint.h
diff -u /dev/null mozilla-src/mozilla/js/src/xsstaint.h:1.11
--- /dev/null	Sun Mar 19 00:41:54 2006
+++ mozilla-src/mozilla/js/src/xsstaint.h	Wed Feb 22 18:36:39 2006
@@ -0,0 +1,606 @@
+#ifndef taint_h___
+#define taint_h___
+
+#include "jstypes.h"
+#include "jsprvtd.h"
+#include "jsopcode.h"
+#include <time.h>
+
+JS_BEGIN_EXTERN_C
+
+/* the taint-structure that contains the information about the taint-status */
+typedef struct {
+	/* main value that says, if the value is tainted or not */
+	int istainted;
+	/* original type of the value */
+	int type;
+} XSS_taint;
+
+/* structure if a scope is tainted.
+   this is implemented as a double-linked-list */
+typedef struct XSS_scope {
+
+	/* flag if this scope is tainted. */
+	int istainted;
+	/* flag if one of the previous scopes is tainted */
+	int prev_istainted;
+
+	/* the opcode that created the scope */
+	JSOp opcode;
+
+	/* pc-marks to set boundries of the scope */
+	jsbytecode *from;
+	jsbytecode *to;
+
+	struct XSS_scope *next;
+	struct XSS_scope *prev;
+
+} XSS_scope;
+
+/*
+ * Constants
+ */
+
+/* xss-structure has no type */
+#define XSS_NOTYPE -1
+
+/* mainconstants if value is tainted or not */
+#define XSS_NOT_TAINTED 0
+#define XSS_TAINTED 1
+
+/* dont't taint the result in any way. */
+#define XSS_DONT_TAINT -1
+
+/* defines an empty pc-mark */
+#define XSS_PC_EMPTY NULL
+
+/* define true/false */
+#define XSS_TRUE 1
+#define XSS_FALSE 0
+
+/* environment string for user interaction on permission
+   decisions
+ */
+#define XSS_ENV_USERINTERACTION_STR "XSS_USERINTERACTION"
+#define XSS_ENV_USERINTERACTION_TRUE 1
+#define XSS_ENV_USERINTERACTION_FALSE 0
+
+/* environment string for user interaction on permission
+   decisions
+ */
+#define XSS_ENV_DONTCHECKTAINT "XSS_DONTCHECKTAINT"
+#define XSS_ENV_DONTCHECKTAINT_TRUE 1
+#define XSS_ENV_DONTCHECKTAINT_FALSE 0
+
+/* Checks if the jsval has a xss-taintstructure */
+extern JS_PUBLIC_API(int) xssJSValIsXssType(jsval);
+
+/* Checks if the given jsval is tainted. */
+extern JS_PUBLIC_API(int) xssJSValIsTainted(jsval);
+
+/* Gets the type of the jsval */
+extern JS_PUBLIC_API(int) xssJSValGetType(jsval);
+
+/* Gets the last node of the scope-structure */
+extern XSS_scope *xssGetLastScopeNode(XSS_scope *node);
+
+/* Frees the memory allocated by the node */
+extern void xssFreeNode(XSS_scope *node);
+
+/* Frees the node and all subnodes */
+extern int xssFreeScope(XSS_scope *node);
+
+/* Gets the node before the given node */
+extern XSS_scope *xssScopeNodeBefore(XSS_scope *node);
+
+/* Removes the node from the list */
+extern XSS_scope *xssRemoveNodeFromScope(XSS_scope *node);
+
+/* Checks if the pc is in the current scope */
+extern int xssScopePcInCurrent(jsbytecode *pc, XSS_scope *current);
+
+/* Checks if the two scopes overlap */
+extern int xssScopeOverlap(XSS_scope *scope1, XSS_scope *scope2);
+
+/* Merges the two scopes into one scope if they overlap */
+extern XSS_scope *xssScopeMerge(XSS_scope *scope1, XSS_scope *scope2);
+
+/* Checks if the scope is unlimited (i.e. boundries XSS_PC_EMPTY) */
+extern int xssScopeUnlimited(XSS_scope *scope);
+
+/* Checks if the current stack element is tainted */
+extern int xssScopeStackIsTainted(jsval *current_sp, jsval *taintedsp);
+
+/* gets the scope with a given op (searches backward) */
+extern XSS_scope *xssScopeWithOp(XSS_scope *current, JSOp op);
+
+/* constant defines that logging is enabled */
+#define XSS_DO_LOG 1
+
+/* set logging 1 => log */
+extern void xssSetDoLog(int v);
+
+/* get logging status 1 => log */
+extern int xssGetDoLog();
+
+#include "xssdbg.h"
+
+/*
+ * Macros to access/modify the taintstructure
+ */
+
+/* Set the origtype of the tainted type to the given type.
+ * if the taint-value is 0 nothing is done
+ */
+#define XSS_TAINTSTRUCTURE_SET_ORIGTYPE(xss_taint, origtype)	\
+	if (xss_taint) {											\
+		xss_taint->type = origtype;								\
+	}
+
+/* Sets istainted of the taintstructure to the given value
+ * if the taintstructure-value is 0 nothing is done
+ */
+#define XSS_TAINTSTRUCTURE_SET_ISTAINTED(xss_taint, b_istainted)	\
+	if (xss_taint) {											\
+		xss_taint->istainted = b_istainted;						\
+	}
+
+/* copies the xss-taintstructure from "from" to "to" */
+#define XSS_TAINTSTRUCTURE_COPY_PTR(from, to)					\
+	if ((from != 0) && (to != 0)) {								\
+		to->istainted = from->istainted;						\
+		to->type = from->type;									\
+	}
+
+/* copies the tainted-information in the xss-taintstructure 
+ * from "from" to "to" 
+ */
+#define XSS_TAINTSTRUCTURE_COPY_TAINTEDINFO_PTR(from, to)		\
+	if ((from != 0) && (to != 0)) {								\
+		to->istainted = from->istainted;						\
+	}
+
+/* Check if the taintvalue is a number */
+#define XSS_TAINTSTRUCTURE_IS_NUMBER(xss_taint)						\
+	(xss_taint && ((xss_taint->type == JSVAL_INT) || (xss_taint->type == JSVAL_DOUBLE)))
+
+/* Check if the taintvalue is a int
+ */
+#define XSS_TAINTSTRUCTURE_IS_INT(xss_taint)							\
+	(xss_taint && (xss_taint->type == JSVAL_INT))
+
+/* Check if the taintvalue is a int
+ */
+#define XSS_TAINTSTRUCTURE_IS_DOUBLE(xss_taint)						\
+	(xss_taint && (xss_taint->type == JSVAL_DOUBLE))
+
+
+/* 
+ * Macros to access/manipulate jsvals
+ */
+
+/* checks if the value has a taintstructure */
+#define XSS_JSVAL_HAS_TAINTSTRUCTURE(val)						\
+	xssJSValIsXssType(val)
+
+#ifdef XSS /* XSS */
+
+/* get the taint-structure of a JSGCThing-object */
+#define XSS_JSVAL_GET_TAINT(val, rval)							\
+		rval = js_XSSGettaint(JSVAL_TO_GCTHING(val));
+
+#else
+
+#define XSS_JSVAL_GET_TAINT(val, rval)
+
+#endif /* XSS */
+
+/* Sets the xss_origtype to the type of v, if v is a tainted value */
+#define XSS_JSVAL_GET_ORIGTYPE(v, xss_origtype)					\
+	JS_BEGIN_MACRO												\
+	XSS_taint* xss_taint;										\
+	xss_origtype = XSS_NOTYPE;								    \
+	if (JSVAL_IS_GCTHING(v)) {									\
+		XSS_JSVAL_GET_TAINT((jsval) v,xss_taint);				\
+		if ((xss_taint != 0) &&									\
+			(xss_taint->type != XSS_NOTYPE)) {					\
+			xss_origtype = xss_taint->type;						\
+		}														\
+	}															\
+	JS_END_MACRO
+
+/* gets the type of the jsval */
+#define XSS_JSVAL_GET_TYPE(v)									\
+	xssJSValGetType(v)
+
+/* sets the original type in the taintstructure of a jsval */
+#define XSS_JSVAL_SET_ORIGTYPE(jsvalue, type)					\
+	if (XSS_JSVAL_HAS_TAINTSTRUCTURE(jsvalue)) {				\
+																\
+		JS_BEGIN_MACRO											\
+			XSS_taint* taint;									\
+																\
+			XSS_JSVAL_GET_TAINT((jsval) jsvalue, taint);		\
+			XSS_TAINTSTRUCTURE_SET_ORIGTYPE(taint, type);		\
+		JS_END_MACRO;											\
+	} else {													\
+		XSS_PRINTDEBUG_STR("XSS_JSVAL_SET_ORIGTYPE: jsvalue ( " # jsvalue " ) has no taintstructure\n");		\
+	}
+
+/* Converts the xssval back to its original value. If it isn't a 
+ * xss-value then it is returned unchanged.
+ */
+#define XSS_TO_ORIG_JSVAL(xssval, result)						\
+		JS_BEGIN_MACRO											\
+			int xss_origtype = XSS_NOTYPE;						\
+			int mydouble;										\
+			jsdouble *tempdp;									\
+			result = xssval;									\
+			if (JSVAL_IS_DOUBLE(xssval)) {						\
+																\
+					XSS_JSVAL_GET_ORIGTYPE(xssval, xss_origtype);	\
+																\
+					if (xss_origtype == JSVAL_BOOLEAN) {		\
+						tempdp = JSVAL_TO_DOUBLE(xssval);		\
+						mydouble = (int) *tempdp;				\
+						if (mydouble == 0) {					\
+							result = BOOLEAN_TO_JSVAL(JS_FALSE);\
+						} else {								\
+							result = BOOLEAN_TO_JSVAL(JS_TRUE);	\
+						}										\
+																\
+					} else if (xss_origtype == JSVAL_INT) {		\
+						tempdp = JSVAL_TO_DOUBLE(xssval);		\
+						mydouble = (int) *tempdp;				\
+						result = INT_TO_JSVAL(mydouble);		\
+					} else if (xss_origtype == JSVAL_VOID) {	\
+						result = JSVAL_VOID;					\
+					} else if (xss_origtype == JSVAL_NULL){		\
+						tempdp = JSVAL_TO_DOUBLE(xssval);		\
+						mydouble = (int) *tempdp;				\
+						result = JSVAL_OBJECT;					\
+						if (mydouble == JSVAL_NULL) {			\
+							result = JSVAL_NULL;				\
+						}										\
+					} else {									\
+						result = xssval;						\
+					}											\
+																\
+			} else {											\
+				if (JSVAL_IS_OBJECT(xssval)) {					\
+					result = xssval;							\
+					XSS_JSVAL_GET_ORIGTYPE(xssval, xss_origtype);	\
+					if ((xss_origtype == JSVAL_NULL)			\
+								&& (xssval == JSVAL_NULL)) {	\
+						result = JSVAL_NULL;					\
+					}											\
+				}												\
+			}													\
+		JS_END_MACRO											
+
+/* copies the taintstructure from the jsvals "from" to "to" */
+#define XSS_JSVAL_COPY_TAINTSTRUCTURE(from, to)					\
+	if (XSS_JSVAL_HAS_TAINTSTRUCTURE(from) &&					\
+			XSS_JSVAL_HAS_TAINTSTRUCTURE(to)) {					\
+																\
+		JS_BEGIN_MACRO											\
+			XSS_taint* from_taint;								\
+			XSS_taint* to_taint;								\
+																\
+			XSS_JSVAL_GET_TAINT((jsval) from, from_taint);		\
+			XSS_JSVAL_GET_TAINT((jsval) to, to_taint);			\
+			XSS_TAINTSTRUCTURE_COPY_PTR(from_taint, to_taint);	\
+		JS_END_MACRO;											\
+																\
+	} else {													\
+		if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(from)) {				\
+			XSS_PRINTDEBUG_STR("XSS_JSVAL_COPY_TAINTSTRUCTURE: from ( " #from " ) has no taintstructure\n");	\
+		}														\
+		if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(to)) {				\
+			XSS_PRINTDEBUG_STR("XSS_JSVAL_COPY_TAINTSTRUCTURE: to ( " #to " )  has no taintstructure\n");		\
+		}														\
+	}
+
+/* copies the istainted-information from the jsvals "from" to "to" */
+#define XSS_JSVAL_COPY_TAINTEDINFO(from, to)					\
+	if (XSS_JSVAL_HAS_TAINTSTRUCTURE(from) &&					\
+			XSS_JSVAL_HAS_TAINTSTRUCTURE(to)) {					\
+																\
+		JS_BEGIN_MACRO											\
+			XSS_taint* from_taint;								\
+			XSS_taint* to_taint;								\
+																\
+			XSS_JSVAL_GET_TAINT((jsval) from, from_taint);		\
+			XSS_JSVAL_GET_TAINT((jsval) to, to_taint);			\
+			XSS_TAINTSTRUCTURE_COPY_TAINTEDINFO_PTR(from_taint, to_taint);	\
+		JS_END_MACRO;											\
+																\
+	} else {													\
+		if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(from)) {				\
+			XSS_PRINTDEBUG_STR("XSS_JSVAL_COPY_TAINTEDINFO: from ( " #from " ) has no taintstructure\n");	\
+		}														\
+		if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(to)) {				\
+			XSS_PRINTDEBUG_STR("XSS_JSVAL_COPY_TAINTEDINFO: to ( " #to " )  has no taintstructure\n");		\
+	}
+
+/* checks if the jsval is tainted */
+#define XSS_JSVAL_IS_TAINTED(value)								\
+	xssJSValIsTainted(value)
+
+/* sets istainted according (if the jsvalue has a taintstructure and
+   istainted is not set to "don't taint" */
+#define XSS_JSVAL_SET_ISTAINTED(istainted, jsvalue)					\
+	if (istainted != XSS_DONT_TAINT) {								\
+																	\
+		if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(jsvalue)) {				\
+			XSS_PRINTDEBUG_STR("XSS_JSVAL_SET_ISTAINTED: jsvalue ( " #jsvalue " ) has no taintstructure\n");		\
+		} else {													\
+			JS_BEGIN_MACRO											\
+				XSS_taint* taint;									\
+																	\
+				XSS_JSVAL_GET_TAINT(jsvalue, taint);				\
+				XSS_TAINTSTRUCTURE_SET_ISTAINTED(taint, istainted);	\
+				if ((taint != NULL) && (taint->type == XSS_NOTYPE)) {	\
+					if (JSVAL_IS_OBJECT(jsvalue)) {					\
+						XSS_JSVAL_SET_ORIGTYPE(jsvalue, JSVAL_OBJECT);	\
+					} else if (JSVAL_IS_STRING(jsvalue)) {			\
+						XSS_JSVAL_SET_ORIGTYPE(jsvalue, JSVAL_STRING);	\
+					}												\
+				}													\
+			JS_END_MACRO;											\
+		}															\
+	}
+
+
+/* set taint-value on jsvalue on istainted (and also if there is no taintstructure) */
+#define XSS_JSVAL_TAINT_ON_FLAG(istainted, jsvalue)					\
+	if ((istainted == XSS_TAINTED) && !XSS_JSVAL_HAS_TAINTSTRUCTURE(jsvalue)) {	\
+		XSS_ADD_TAINTSTRUCTURE(rval);								\
+	}																\
+	if (istainted == XSS_TAINTED) {									\
+		XSS_JSVAL_SET_ISTAINTED(XSS_TAINTED, jsvalue);				\
+	}
+
+/*
+ * Other macros
+ */
+
+/* resets the boolean if the output should be tainted */
+#define XSS_RESET_TAINTOUTPUT(value)							\
+	value = XSS_NOT_TAINTED;
+
+/* converts a boolean to a double-jsval */
+#define XSS_BOOLEAN_TO_DOUBLE_JSVAL(val,boolval)				\
+		JS_BEGIN_MACRO											\
+			jsdouble* dp;										\
+			XSS_taint* xss_taint;								\
+			dp = JS_NewDouble(cx, val);							\
+			XSS_JSVAL_GET_TAINT(DOUBLE_TO_JSVAL(dp),xss_taint);	\
+			xss_taint->type = JSVAL_BOOLEAN;					\
+			boolval = DOUBLE_TO_JSVAL(dp);						\
+		JS_END_MACRO
+
+/* converts a double to a double-jsval */
+#define XSS_INT_TO_DOUBLE_JSVAL(inint,outjsval)				    \
+		JS_BEGIN_MACRO											\
+			jsdouble* dp;										\
+			XSS_taint* xss_taint;								\
+			dp = JS_NewDouble(cx, inint);					    \
+			XSS_JSVAL_GET_TAINT(DOUBLE_TO_JSVAL(dp),xss_taint);	\
+			xss_taint->type = JSVAL_INT;						\
+			outjsval = DOUBLE_TO_JSVAL(dp);						\
+		JS_END_MACRO
+
+/* converts a void to a double-jsval */
+#define XSS_VOID_TO_DOUBLE_JSVAL(inint,outjsval)				\
+		JS_BEGIN_MACRO											\
+			jsdouble* dp;										\
+			XSS_taint* xss_taint;								\
+			dp = JS_NewDouble(cx, inint);					    \
+			XSS_JSVAL_GET_TAINT(DOUBLE_TO_JSVAL(dp),xss_taint);	\
+			xss_taint->type = JSVAL_VOID;						\
+			outjsval = DOUBLE_TO_JSVAL(dp);						\
+		JS_END_MACRO
+
+/* converts a null to a double-jsval */
+#define XSS_NULL_TO_DOUBLE_JSVAL(inint,outjsval)				\
+		JS_BEGIN_MACRO											\
+			jsdouble* dp;										\
+			XSS_taint* xss_taint;								\
+			dp = JS_NewDouble(cx, inint);					    \
+			XSS_JSVAL_GET_TAINT(DOUBLE_TO_JSVAL(dp),xss_taint);	\
+			xss_taint->type = JSVAL_NULL;						\
+			outjsval = DOUBLE_TO_JSVAL(dp);						\
+		JS_END_MACRO
+
+/* adds a taintstructure to the jsval */
+#define XSS_ADD_TAINTSTRUCTURE(injsval)							\
+		JS_BEGIN_MACRO											\
+			jsdouble tempval;									\
+			if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(injsval)) {		\
+				if (JSVAL_IS_BOOLEAN(injsval)) {				\
+					XSS_BOOLEAN_TO_DOUBLE_JSVAL(JSVAL_TO_BOOLEAN(injsval), tempval);	\
+					injsval = DOUBLE_TO_JSVAL(tempval);			\
+					XSS_JSVAL_SET_ORIGTYPE(injsval, JSVAL_BOOLEAN);	\
+				} else if (JSVAL_IS_INT(injsval)) {				\
+					XSS_INT_TO_DOUBLE_JSVAL(JSVAL_TO_INT(injsval), tempval);	\
+					injsval = DOUBLE_TO_JSVAL(tempval);			\
+					XSS_JSVAL_SET_ORIGTYPE(injsval, JSVAL_INT);	\
+				} else if (JSVAL_IS_VOID(injsval)) {			\
+					XSS_VOID_TO_DOUBLE_JSVAL(JSVAL_TO_INT(injsval), tempval);	\
+					injsval = DOUBLE_TO_JSVAL(tempval);			\
+					XSS_JSVAL_SET_ORIGTYPE(injsval, JSVAL_VOID);	\
+				} else if (JSVAL_IS_NULL(injsval)) {			\
+					XSS_NULL_TO_DOUBLE_JSVAL(JSVAL_TO_INT(injsval), tempval);	\
+					injsval = DOUBLE_TO_JSVAL(tempval);			\
+					XSS_JSVAL_SET_ORIGTYPE(injsval, JSVAL_NULL);	\
+				}												\
+			} else {											\
+				if (JSVAL_IS_OBJECT(injsval)) {					\
+					XSS_JSVAL_SET_ORIGTYPE(injsval, JSVAL_OBJECT);	\
+				} else if (JSVAL_IS_STRING(injsval)) {			\
+					XSS_JSVAL_SET_ORIGTYPE(injsval, JSVAL_STRING);	\
+				}												\
+			}													\
+		JS_END_MACRO
+
+/* initializes a scope-node */
+#define XSS_SCOPE_INIT(scope, taintit)							\
+	scope->istainted = taintit;									\
+	scope->prev_istainted = XSS_NOT_TAINTED;					\
+	scope->opcode = JSOP_NOP;									\
+	scope->from = XSS_PC_EMPTY;									\
+	scope->to = XSS_PC_EMPTY;									\
+	scope->next = NULL;											\
+	scope->prev = NULL
+
+/* checks if the scope is tainted */
+#define XSS_SCOPE_ISTAINTED(scope)								\
+	(scope != NULL) && ((scope->istainted) || (scope->prev_istainted))	
+
+/* creates a new scope-node */
+#define XSS_SCOPE_CREATE										\
+	(XSS_scope *)  malloc (sizeof (XSS_scope))
+
+/* frees the node and all subnodes */
+#define XSS_SCOPE_FREE(node, current_node)						\
+	xssFreeScope(node);											\
+	node = NULL;												\
+	current_node = NULL
+
+/* frees the node */
+#define XSS_SCOPE_FREE_NODE(node)								\
+	xssFreeNode(node)
+
+/* sets the values of the scope-structure */
+#define XSS_SCOPE_SET(prev_node, node, i_istainted, i_from, i_to, i_op)	\
+	if (node != NULL) {											\
+		node->istainted = i_istainted;							\
+		node->opcode = i_op;									\
+		/* set bounds, from must be smaller than to */			\
+		if (i_from <= i_to) {									\
+			node->from = i_from;								\
+			node->to = i_to;									\
+		} else {												\
+			node->from = i_to;									\
+			node->to = i_from;									\
+		}														\
+		/* set links */											\
+		node->prev = prev_node;									\
+		if (node->prev != NULL) {								\
+			node->prev->next = node;							\
+		}														\
+		/* set prev_tainted */									\
+		if (node->prev != NULL) {								\
+			node->prev_istainted = node->prev->prev_istainted	\
+									|| node->prev->istainted;	\
+		} else {												\
+			node->prev_istainted = XSS_NOT_TAINTED;				\
+		}														\
+	}
+
+/* advances the node to the next node, if it isn't NULL */
+#define XSS_SCOPE_ADVANCE_NEXT(current)							\
+	if (current != NULL) {										\
+		if (current->next) current = current->next;				\
+	}
+
+/* removes the current node */
+#define XSS_SCOPE_REMOVE(current)								\
+	xssRemoveNodeFromScope(current)
+
+/* checks if the pc is in the current scope */
+#define XSS_SCOPE_PC_IN_CURRENT(pc, current)					\
+	xssScopePcInCurrent(pc, current)
+
+/* checks if the two scopes overlap */
+#define XSS_SCOPE_OVERLAP(scope1, scope2)						\
+	xssScopeOverlap(scope1, scope2)
+
+/* merges the two scopes, if they overloap  */
+#define XSS_SCOPE_MERGE(scope1, scope2)							\
+	xssScopeMerge(scope1, scope2)
+
+/* checks if the scope has unlimited boundries */
+#define XSS_SCOPE_UNLIMITED(scope)								\
+	xssScopeUnlimited(scope)
+
+/* get the node before this node */
+#define XSS_SCOPE_GETNODEBEFORE(root, node)						\
+	xssScopeNodeBefore(root, node)
+
+/* checks if the current stackelement is tainted */
+#define XSS_SCOPE_STACK_IS_TAINTED(current_sp, taintedsp)		\
+	xssScopeStackIsTainted(current_sp, taintedsp)	
+
+/* sets the current stack element as tainted */
+#define XSS_STACK_SET_TAINTED(current_sp, taintedsp)			\
+	if (taintedsp != NULL) {									\
+		if ((current_sp == NULL) || (current_sp > taintedsp)) {	\
+			current_sp = taintedsp;								\
+		} 														\
+	}
+
+/* set the pointer of the tainted stackelement if the output
+   should be tainted */
+#define XSS_SET_STACK_TAINTED_ON_OUTPUT(current_sp, taintedsp, taintoutput) \
+	if (taintoutput == XSS_TAINTED) {							\
+		XSS_STACK_SET_TAINTED(current_sp, taintedsp);			\
+	}
+
+/* resets the pointer to the last untainted stackelement if the
+   current stack pointer is below or equal the untainted stackelement 
+   pointer */
+#define XSS_SCOPE_STACK_REMOVE(current_sp, taintedsp)			\
+	if ((taintedsp != NULL) && (current_sp <= taintedsp)) {		\
+		taintedsp = NULL;										\
+	}
+
+/* get the scope with the given op (searches backward) */
+#define XSS_SCOPE_WITH_OP_BACK(current, op)						\
+	xssScopeWithOp(current, op)
+
+#ifndef XSS_DEBUG /* XSS_DEBUG */
+
+/* init the root-scope */
+#define XSS_SCOPE_INIT_ROOT(framefp, taintit, taintretval)			\
+	framefp.scope_root = XSS_SCOPE_CREATE;							\
+	XSS_SCOPE_INIT(framefp.scope_root, taintit);					\
+	framefp.scope_current = framefp.scope_root;						\
+	framefp.scope_sp = NULL;										\
+	framefp.taint_retval = taintretval
+#else 
+
+/* init the root-scope */
+#define XSS_SCOPE_INIT_ROOT(framefp, taintit, taintretval)			\
+	framefp.scope_root = XSS_SCOPE_CREATE;							\
+	XSS_SCOPE_INIT(framefp.scope_root, taintit);					\
+	framefp.scope_current = framefp.scope_root;						\
+	if (xssGetDoLog() == XSS_DO_LOG)								\
+		fprintf(stderr, "init root: %d\n", taintit);				\
+	framefp.scope_count = 1;										\
+	framefp.scope_sp = NULL;										\
+	framefp.taint_retval = taintretval
+
+
+#endif /* XSS_DEBUG */
+
+#define XSS_LOG(output1,output2)									\
+	if (PR_XSS_DEBUG_LOG() == 1) {									\
+	do {															\
+		FILE* xss_logfile;											\
+		time_t xss_timer;											\
+		char xss_buf[128];											\
+		struct tm xss_now;											\
+		xss_logfile = fopen ("xss_connections.log", "a");			\
+		xss_timer = time(NULL);										\
+		xss_now = *localtime(&xss_timer);							\
+		strftime(xss_buf,128,"%Y%m%d %H%M%S ", &xss_now);			\
+		fprintf (xss_logfile, "%s \"%s\": " output1, xss_buf,		\
+			PR_XSS_GET_DEBUG_FILENAME(), output2);					\
+		fclose (xss_logfile);										\
+	} while (0);}
+
+JS_END_EXTERN_C
+
+#endif
Index: mozilla-src/mozilla/js/src/Debug/test.js
diff -u /dev/null mozilla-src/mozilla/js/src/Debug/test.js:1.23
--- /dev/null	Sun Mar 19 00:41:54 2006
+++ mozilla-src/mozilla/js/src/Debug/test.js	Wed Jul  6 17:37:51 2005
@@ -0,0 +1,1398 @@
+/* JSOP_SETVAR 
+var evil = 42;
+function test() {
+	var z = 17;
+	var x = "juhu" + evil;
+	print(x);
+	print(z);
+}
+test();
+*/
+/* Array-/Object-tests */
+/*
+var evil = 42;
+var notevil = 3;
+var x = [1];
+if (evil) {
+	x[1] = 3;
+}
+print("length = " + x.length);
+print("x[1] = " + x[1]);
+*/
+/* enterwith, setprop 
+var evil = 42;
+var notevil = 3;
+var x = {};
+if (evil) {
+	x.y = 3;
+}
+var mylength = 0;
+for (var i in x) {
+//	print("x." + i + "= " + x[i]);
+	++mylength;
+}
+with(x) {
+	print("y = " + y);
+	z = 3;
+}
+print("mylength = " + mylength);
+print("x.z = " + x.z);
+*/
+/* initelem, initprop, endinit
+var evil = 42;
+var notevil = 3;
+var x;
+if (evil) {
+//	x = [ 1 ];
+	x = { a : 1 };
+}
+print("x= " + x);
+print("typeof(x)= " + typeof(x));
+if (typeof(x) == "object") {
+//	print("x[1]= " + x[1]);
+//	print("x[b]= " + x['b']);
+	print("x[b]= " + x.b);
+}
+*/
+/* delname
+var evil = 42;
+var notevil = 3;
+x = 10;
+if (evil) {
+	notevil = delete x;
+}
+print("notevil = " + notevil);
+print("x = " + x);
+*/
+/* delprop
+var evil = 42;
+var x = { y : 2, z : 3};
+var notevil = 0;
+if (evil) {
+	notevil = delete x.z;
+}
+print("notevil = " + notevil);
+var mylength = 0;
+for (var prop in x) {
+	print("x."+prop+" = " + x[prop]);
+	++mylength;
+}
+//print("x.y = " + x.y);
+//print("x.z = " + x.z);
+print("x.length = " + x.length);
+print("mylength = " + mylength);
+*/
+/* inc-/dec von name/prop/elem
+var evil = 42;
+var x = [ 1];
+if (evil) {
+	x[1]++;
+}
+print(x[1]);
+*/
+/*
+var evil = 42;
+var x = [ 1, 2];
+var notevil = 0;
+if (evil) {
+	notevil = delete x[1];
+}
+print("notevil = " + notevil);
+for (i=0;i<x.length;i++) {
+	print("x["+i+"] = " + x[i]);
+}
+print("x.length = " + x.length);
+*/
+/* JSOP_VOID 
+var evil = 42;
+var x;
+if (evil) {
+	x = new Array(void 0);
+}
+print(x[0]);
+*/
+/* JSOP_UINT16 
+var evil = 42;
+var x;
+if (evil) {
+	x = 3;
+}
+print(x);
+*/
+/* JSOP_TYPEOF 
+var evil = 42;
+var notevil = "1.5";
+if (evil) {
+	notevil = typeof(notevil);
+}
+print(notevil);
+*/
+/* JSOP_TRAP 
+var evil = 42;
+var x = 5;
+function test() { 
+	return x;
+};
+if (evil) {
+	trap(test, 0, 'print("vorher: " + x);x = 15;print("nachher: " + x);x;');
+}
+print("ergebnis: " + test());
+*/
+/* JSOP_TOOBJECT 
+var evil = 42;
+var x = "3";
+if (evil) {
+	for (p in x) {
+		print("p: " + p);
+		print("x[p]: " + x[p]);
+	}
+}
+*/
+/* JSOP_THIS 
+var evil = 42;
+var o = { 
+  x : 12, 
+  test : function () { 
+	if (evil) {
+		return this.x; 
+	}
+  }
+}
+print(o.test());
+*/
+/* JSOP_TABLESWITCH 
+var evil = 1;
+var notevil = 2;
+switch (evil) {
+	default:
+		notevil = 5;
+	break;
+	case 1 : notevil = 3;
+		break;
+	case 2 : notevil = 4;
+		break;		
+}
+print(notevil);
+*/
+/* JSOP_SWAP 
+// kein bsp, da nur noch legacy! 
+*/
+/* JSOP_SETSP 
+var TO_STRING = Boolean.prototype.toString;
+
+try {
+    var s = new String("Not a Boolean");
+    s.toString = TO_STRING;
+    s.toString();
+} catch ( e ) {
+}
+*/
+/* JSOP_SETPROP 
+var evil = 42;
+var dut = { x : 0};
+if (evil) {
+	dut.x = 13;
+}
+print(dut.x);
+print(dut.length);
+*/
+/* JSOP_SETNAME 
+var evil = 42;
+var notevil = 3;
+if (evil) {
+	notevil = { x : 3};
+}
+print(notevil);
+*/
+/* JSOP_SETELEM 
+var evil = 42;
+var x = [ 1 ];
+if (evil) {
+	x[0] = 17;
+}
+print(x[0]);
+*/
+/* JSOP_SETCONST 
+var evil = 42;
+if (evil) {
+	const x = 3;// = evil;
+}
+if (typeof(x) == "undefined") {
+ print("not evil x = " + x);
+} else {
+ print("evil x = " + x);
+}
+*/
+/* JSOP_SETCALL 
+// special variable "it" is defined in js.c for this testcase ;)
+var evil = 42;
+var notevil;
+//it.funny = 41;
+print(it.funny);
+if (evil) {
+	notevil = it.item('funny') = evil;
+}
+print(it.funny);
+print(notevil);
+*/
+/* JSOP_SETARG 
+var evil = 42;
+function test(x) {
+	if (evil) {
+		x = 3;
+	}
+	print(x);
+}
+test("test");
+*/
+/* JSOP_RETRVAL, JSOP_SETRVAL, JSOP_RETURN 
+var evil = 42;
+function x() {
+	try {
+		if (evil) {
+			return "JUHU"+3;
+		}
+		throw("fehler");
+	} catch (e) {
+		if (evil) {
+			return 1;
+		}
+	} finally {
+		if (evil) {
+//			return 2;
+		}
+	}
+}
+var y = x();
+print(y);
+*/
+/* JSOP_PUSHOBJ 
+var evil = 42;
+var x = 3;
+if (evil) {
+	print(x);
+}
+*/
+/* JSOP_PUSH 
+var evil = 42;
+if (evil) {
+	for (x in {}) {
+		print(x);
+	}
+}
+*/
+/* JSOP_POS 
+var evil = 42;
+var notevil = -1;
+if (evil) {
+	notevil = +notevil;
+}
+print(notevil);
+*/
+/* JSOP_POP2, JSOP_POP, JSOP_POPV 
+var evil = 42;
+var notevil;
+if (evil) {
+	notevil = 2;
+	5;
+}
+*/
+/* JSOP_OBJECT 
+var evil = 42;
+var notevil;
+if (evil) {
+	notevil = /x+/;
+}
+print(notevil);
+*/
+/* JSOP_NUMBER, JSOP_STRING 
+var evil = 42;
+var notevil;
+if (evil) {
+	notevil = 123.23;
+	print(notevil);
+	notevil = "juhu";
+	print(notevil);
+}
+*/
+/* JSOP_NULL, JSOP_ZERO, JSOP_ONE 
+var evil = 42;
+var notevil;
+var notevil2;
+if (evil) {
+	notevil = null;
+	notevil2 = 0;
+	notevil2 = 1;
+}
+print(notevil);
+*/
+/* JSOP_NOT 
+var evil = 42;
+var notevil = 3;
+if (evil) {
+	print(!notevil);
+}
+print(!evil);
+*/
+/* JSOP_NOP 
+var evil = 42;
+if (evil) {
+	do {} while (false);
+}
+*/
+/* JSOP_NEW_EQ, JSOP_NEW_NE 
+var notevil = 1;
+var notevil2 = "1";
+var result;
+var result2;
+var evil = 42;
+if (evil) {
+	result = notevil === notevil2;
+	result2 = notevil !== notevil2;
+}
+print(result);
+print(result2);
+*/
+/* JSOP_NEW 
+var evil = 42;
+var notevil = {};
+function Test(x) {
+	this.y = x;
+}
+//if (evil) {
+	notevil.x = new Test(evil);
+//	notevil = new Object();
+//}
+//print(notevil);
+print(notevil.x.y);
+*/
+/* JSOP_NEG 
+var evil = 42;
+var notevil = 3;
+var result;
+if (evil) {
+	result = -notevil;
+}
+print(result);
+*/
+/* JSOP_NAMEDFUNOBJ 
+var x;
+var evil = 42;
+if (evil) {
+	x = function a() {};
+}
+x();
+*/
+/* JSOP_NAME 
+var evil = 1;
+var notevil = 2;
+if (evil) {
+	notevil;
+}
+print(notevil);
+*/
+/* JSOP_LSH, JSOP_RSH, JSOP_URSH 
+var evil = 42;
+var notevil = 3;
+var notevil2;
+if (evil) {
+	notevil2 = 1 << notevil;
+	print(notevil2);
+	notevil2 = 100 >> notevil;
+	print(notevil2);
+	notevil2 = -100 >>> notevil;
+	print(notevil2);
+}
+*/
+/* JSOP_LOOKUPSWITCH, JSOP_LOOKUPSWITCHX 
+var evil = "z";
+var notevil = 1;
+switch ( evil ) {
+    case "z": notevil = 2;
+		break;
+    default:
+		 notevil = 3;
+	break;
+}
+print(notevil);
+*/
+/* JSOP_ENTERWITH, JSOP_LEAVEWITH 
+var evil = 42;
+var notevil = 4;
+var notevil2 = { 'x' : 3 };
+if (evil) {
+	with ( notevil2 ) {
+		notevil = 3;
+	}
+}
+print(notevil);
+*/
+/* JSOP_INSTANCEOF 
+var evil = 42;
+var notevil = {};
+var result;
+var result2;
+if (evil) {
+	notevil.x = {};
+}
+//if (evil) {
+	result = notevil.x instanceof Object;
+//	result = "x" instanceof notevil;
+//	result2 = notevil instanceof Object;
+//}
+print(result);
+///print(result2);
+*/
+/* JSOP_INITPROP 
+var evil = 42;
+if (evil) {
+	var obj = { 'x' : 5 };
+}
+print(obj.x);
+*/
+/* JSOP_INITELEM, JSOP_NEWINIT, JSOP_ENDINIT 
+var evil = 42;
+var notevil = 3;
+if (evil) {
+	var x = [1, notevil];
+}
+print("0: "+ x[0]);
+print("1: "+ x[1]);
+*/
+/* JSOP_INITCATCHVAR 
+var evil = 42;
+var notevil = 1;
+var dut = {};
+try {
+	if (evil) {
+		dut.x = 3;
+	}
+	throw(dut.x);
+} catch (e) {
+	print("catch exception: " + e);
+} finally {
+	print("finally notevil: " + notevil);
+}
+*/
+/* JSOP_IN 
+var evil = 42;
+var dut = {};
+var notevil = 1;
+if (evil) {
+	dut.x = 3;
+}
+notevil = "x" in dut;
+print(notevil);
+*/
+/* JSOP_IFNE 
+var evil = 0;
+var notevil = 10;
+do { 
+  ++notevil;
+  print(notevil); 
+  ++evil;
+} while(evil < 2);
+print(notevil);
+*/
+/* JSOP_IFEQ 
+var evil = 42;
+var notevil = 2;
+var a;
+//if (evil) {
+//	print("juhu");
+//}
+a = evil && notevil;
+print(a);
+a = !evil && notevil;
+print(a);
+*/
+/* JSOP_IFEQ 2
+var evil = true;
+var evil2 = false;
+var x = 5;
+if (!(1 && evil && evil && evil2)) {
+	x = 6;
+	print(x);
+} else {
+	x = 8;
+}
+print(evil2);
+print(x);
+*/
+/* JSOP_GROUP 
+var evil = 1;
+var x = (2 + evil);
+*/
+/* JSOP_GOSUB, JSOP_GOSUBX, JSOP_RETSUB, JSOP_GOTO, JSOP_GOTOX 
+try {
+	throw("test");
+} catch ( e ) {
+	print(e);
+} finally {
+	print("finally");
+}
+print("juhu");
+*/
+/* JSOP_GETVAR 
+var evil = 42;
+function test() {
+	var notevil = 3;
+	if (evil) {
+		notevil = 5 + notevil;
+	}
+	print (notevil);
+}
+test();
+*/
+/* JSOP_GETTER, JSOP_SETTER */
+// op2 = JSOP_INITELEM
+/* ??????? */
+/*
+// op2 = JSOP_INITPROP 
+var evil = 42;
+//if (evil) {
+	var obj = { 
+		x : 0,
+		set a(newValue) { this.x = newValue;},
+		get a() { return this.x; }
+	}
+//}
+print(obj.a);
+obj.a = evil;
+print(obj.a);
+print(obj.x);
+*/
+// op2 = JSOP_SETELEM 
+/*
+var evil = 1;
+var geheim;
+var geheim2 = [];
+var x = [];
+//x[0] setter = function(newValue) { geheim = newValue;};
+//x[0] getter = function() { return geheim;} 
+print("length: " + x.length);
+if (evil) {
+	x[0] setter = function(newValue) { geheim2[0] = newValue;};
+	x[0] getter = function() { return geheim2[0];} 
+}
+print("length: " + x.length);
+//print("length: " + x.length);
+//print("geheim2.length: " + geheim2.length);
+//x[0] = evil;
+//print("geheim2.length: " + geheim2.length);
+//print("geheim2: " + geheim2);
+//print("x[0]: " + x[0]);
+//print("length: " + x.length);
+*/
+/*
+// op2 obj2 = JSOP_SETNAME 
+var evil = 1;
+var notevil = 2;
+var geheim;
+if (evil) {
+	name setter = function(newValue) { geheim = newValue;};
+	name getter = function() { return geheim;} 
+}
+name = notevil;
+print(name);
+/*
+// op2 obj2 = JSOP_SETPROP
+obj = new Object();
+obj.nameSETS = 0;
+obj.nameGETS = 0;
+obj.name setter = function(newValue) {this._name=newValue; this.nameSETS++;}
+obj.name getter = function() {this.nameGETS++; return this._name;}
+obj.name = evil;
+print(obj.name);
+print(obj._name);
+*/
+/* JSOP_GETPROP 
+var evil = 42;
+var notevil = 1;
+var obj = { 'x' : 0 };
+if (evil) {
+	notevil = obj.x;
+}
+print(notevil);
+*/
+/* JSOP_GETELEM 
+var evil = 42;
+var notevil = 1;
+var x = [0];
+if (evil) {
+	notevil = x[0];
+}
+print(notevil);
+*/
+/* JSOP_GETARG 
+var notevil = 3;
+var evil = 42;
+function test(a) {
+	var notevil2 = 0;
+	if (evil) {
+		notevil2 = a; //print(a);
+	}	
+	print(notevil2);
+}
+test(notevil);
+*/
+/* JSOP_GE, JSOP_LE, JSOP_GT, JSOP_LT 
+var evil = 42;
+var test = 1;
+var notevil = 2;
+if (evil) {
+	notevil = test >= 3;
+}
+print(notevil);
+*/
+/* JSOP_FORVAR 
+var x = 1;
+var notevil = 0;
+var evil = 42;
+function test (a) {
+	var dut = { };
+	dut.x = evil;
+	var test;
+	if (evil) {
+		for (test in dut)
+			notevil = dut[test];
+	}
+}
+test(x);
+print(x);
+*/
+/* JSOP_FORPROP 
+var evil = 42;
+var notevil = 0;
+var evil = { };
+evil.x = 2;
+var ob = { 'x' : 0 };
+for (ob.x in evil)
+	notevil = evil[ob.x];
+print(ob.x);
+print(notevil);
+*/
+/* JSOP_FORNAME 
+var evil = 42;
+var dut = { };
+dut.x = evil;
+var notevil = 0;
+var notevil2 = 1;
+if (evil) {
+	for (notevil in dut)
+		notevil2 = dut[notevil];
+}
+print(notevil);
+print(notevil2);
+*/
+/* JSOP_FORELEM 
+var evil = { };
+evil.x = 3;
+var notevil = 0;
+var ob = [];
+for (ob[0] in evil) 
+	notevil = evil[ob[0]];
+print("ob = " + ob);
+print("ob[0] = " +ob[0]);
+print("notevil = " + notevil);
+*/
+/* JSOP_FORARG 
+var evil = 42;
+var x = 1;
+function test (a) {
+	var notevil = 0;
+	var dut = { };
+	dut.x = evil;
+//	dut.x = notevil;
+	if (evil) {
+		for (a in dut)
+			notevil = dut[a];
+	}
+	print(notevil);
+}
+test(x);
+print(x);
+*/
+/* JSOP_TRY, JSOP_FINALLY 
+try {
+	var a = 1;
+	throw("test");
+} catch (e) {
+	print(e);
+} finally {
+	a = 2;
+}
+print(a);
+*/
+/* JSOP_TRUE, JSOP_FALSE 
+var evil = 42;
+var notevil = 2;
+if (evil) {
+	notevil = true;
+}
+print(notevil);
+*/
+/* JSOP_EXPORTALL, JSOP_EXPORTNAME, JSOP_IMPORTALL, JSOP_IMPORTNAME, JSOP_IMPORTPROP
+  check test.html in Debug\mytests!  
+var evil = 42;
+//var notevil = 2;
+var notevil2 = 2;
+var w = {notevil : 4};
+if (evil) {
+//	export *;
+//	export notevil;
+	export w;
+//	export testit;
+}
+print(evil);
+//print(notevil);
+//print(notevil2);
+//print(testit);
+if (evil) {
+	import w.*;
+}
+*/
+/* JSOP_EXCEPTION, JSOP_THROW 
+var evil = 42;
+var dut = { 'x' : evil };
+try {
+	if (evil) {
+		throw(dut.x);
+	}
+} catch ( e ) {
+	var x = "aber: " + e;
+    print(x);
+}
+*/
+/* JSOP_EVAL 
+var evil = 42;
+var notevil = 41;
+var dut = {};
+var test;
+function mytest() {
+	return notevil;
+}
+if (evil) {
+	test = eval("dut.x = evil");
+//	print(eval("print("+evil+")"));
+//	test = eval("print(evil);evil;");
+//	test = eval("print(notevil);notevil;");
+//	test = mytest();
+//	eval("notevil = notevil + 1;");
+	print(test);
+}
+//print(notevil);
+print(dut.x);
+*/
+/* JSOP_EQ, JSOP_NE 
+var evil = 42;
+var notevil = {};
+if (evil) {
+	var a = notevil == null;
+}
+print(a);
+*/
+/* JSOP_ENUMELEM 
+var evil = 42;
+var ob = [];
+var dut = { 'x' : evil };
+var notevil = 2;
+if (evil) {
+	for (ob[0] in dut) {
+		notevil = dut[ob[0]];
+	}
+}
+print(notevil);
+print(ob[0]);
+print(ob.length);
+*/
+/* JSOP_DUP2 
+var evil = 42;
+var notevil = 3;
+var t = [notevil];
+if (evil) {
+	t[notevil] += 1;
+}
+print(t[0]);
+*/
+/* JSOP_MOD, JSOP_MUL, JSOP_SUB, JSOP_DIV  
+var evil = 3;
+var notevil = 4;
+var a = 0;
+if (evil) {
+//	a = 10 % notevil;
+//	a = 10 * notevil;
+	a = 10 - notevil;
+//	a = 10 / notevil;
+}
+print(notevil);
+print(a);
+*/
+/* JSOP_DELPROP 
+var evil = 42;
+var x = { notevil : 1 };
+x.notevil = "notevil";
+if (evil) {
+	var a = delete(x.notevil);
+}
+print(a);
+print(x.notevil);
+print(x);
+*/
+/* JSOP_DELNAME 
+var evil = 42;
+var notevil = 1;
+if (evil) {
+	var a = delete(notevil);
+}
+print(a);
+print(notevil);
+*/
+/* JSOP_DELELEM 
+var evil = 42;
+var notevil = [ 1, 2, 3];
+var test = "";
+if (evil) {
+	test = delete notevil[1];
+}
+print(notevil[1]);
+print(test);
+*/
+/* JSOP_DEFVAR 
+var evil = 42;
+if (evil) {
+	var notevil = 2;
+}
+print(notevil);
+*/
+/* JSOP_DEFSHARP, JSOP_USESHARP 
+var evil = 42;
+var x;
+if (evil) {
+	x = #3= [ 1, evil, #3#, 3];
+}
+var a = x[2][0];
+print(a);
+*/
+/* JSOP_DEFLOCALFUN 
+var evil = 42;
+function x() {
+	function y() {
+		print("y");
+	} 
+	print("x");
+	y();
+}
+x();
+*/
+/* JSOP_DEFFUN 
+var evil = 42;
+function notevil() {};
+notevil();
+*/
+/* JSOP_DEFCONST 
+var evil = 42;
+if (evil) {
+	const notevil = 1;
+}
+print(notevil);
+*/
+/* JSOP_DEFAULT, JSOP_DEFAULTX 
+var evil = 3;
+var notevil = 1;
+switch(notevil) {
+	case (evil == 3):
+		notevil = 2;
+		break;
+	default:
+		notevil = 3;
+}
+print(notevil);
+*/
+/* JSOP_PROPINC, JSOP_PROPDEC, JSOP_DECPROP, JSOP_INCPROP 
+var evil = 42;
+var y = { test : evil};
+y.test++;
+print(y.test);
+var y = { notevil : 1};
+var evil = true;
+if (evil) {
+	y.notevil++;
+}
+print(y.notevil);
+*/
+/* JSOP_NAMEINC, JSOP_NAMEDEC, JSOP_DECNAME, JSOP_INCNAME 
+var evil = true;
+var notevil = 2;
+if (evil) {
+	notevil = --notevil;
+}
+print(notevil);
+print(evil);
+*/
+/* JSOP_ELEMINC, JSOP_DECELEM, JSOP_INCELEM, JSOP_ELEMDEC 
+var evil = 42;
+var x = [ 1,2,3];
+var notevil = 0;
+if (evil) {
+	notevil = --x[2]; // ++x[2]; x[2]--; x[2]++;
+}
+//print(notevil);
+print(x[2]);
+//print(x[0]);
+*/
+/* JSOP_DEBUGGER 
+var evil = true;
+var x = 5;
+if (evil) {
+	debugger;
+}
+print(evil);
+*/
+/* JSOP_CLOSURE 
+var evil = true;
+var notevil = 2 ;
+function f() { notevil = 1;}
+if (evil) 
+	function f() {
+		notevil = 3;
+	}
+
+f();
+print(notevil);
+*/
+/* JSOP_CASE, JSOP_CASEX, JSOP_CONDSWITCH 
+var notevil = true;
+var evil = 42;
+// the value in switch says, to what the case-expr has to evaluate to be executed.
+//switch(notevil) {
+switch(evil) {
+	case evil == false :
+		notevil = 4;
+	case evil == 3 :
+		notevil = 3;
+		break;
+	default:
+		notevil = 2;
+		break;
+	break;
+}
+print(notevil);
+*/
+/* JSOP_CALL 
+var evil = 1;
+var notevil = 2;
+function test() {
+	notevil = 3 ;
+}
+if (evil) {
+	test();
+}
+print(notevil);
+*/
+/* JSOP_BITNOT 
+var evil = 42;
+var notevil = 3;
+if (evil) {
+	notevil = ~notevil;
+}
+print(notevil);
+*/
+/* JSOP_BITAND, JSOP_BITOR, JSOP_BITXOR
+var evil = 42;
+var notevil = 15;
+if (evil) {
+	notevil = notevil & 2;// ^ 3;//| 3; // ~notevil; // 
+}
+print(notevil);
+ */
+/* JSOP_BINDNAME 
+var evil = 42;
+if (evil) {
+	var notevil = 0;	
+}
+print(notevil);
+*/
+/* JSOP_ARGUMENTS 
+var evil = 42;
+function a(i,j,k) {
+	if (evil) {
+		x = !arguments  || arguments;
+		x = x[1];
+		print(x);
+	}
+};
+a(1,evil,3);
+*/
+/* JSOP_ARGSUB 
+var evil = 1;
+var notevil = 0;
+function x(i,j,k) { 
+	if (evil) {
+		notevil = arguments[1]; 
+	}
+};
+x(evil,1,1);
+print(notevil);
+*/
+/* JSOP_ARGDEC, JSOP_ARGINC, JSOP_DECARG, JSOP_INCARG 
+var evil = 1;
+var notevil = 0;
+function test(a) { 
+	print("before = " + a); 
+	if (evil) {
+		a--;
+	}
+	print("after = " + a); 
+}
+test(10);
+print(notevil);
+*/
+/* JSOP_ARGCNT 
+var evil = 42;
+function mytest(test) {
+	if (evil) {
+		return arguments.length;
+	}
+}
+print(mytest(evil));
+*/
+/* JSOP_ANONFUNOBJ 
+var evil = 42;
+var a = function (b) {
+	var c = b;
+	print(b);
+	if (evil) {
+		x = function() { print(c);}
+	}
+	x();
+}
+a(evil);
+*/
+/* JSOP_OR, JSOP_ORX, JSOP_AND, JSOP_ANDX 
+var evil = 0;//42;
+var notevil = 2;
+//var a = 0 || evil || 4;
+//var evil = 2;
+//var a = 1 && evil;
+//if (evil) {
+//	notevil = 4 && evil && 3;
+	notevil = 0 || evil || 3;
+//	notevil = 4 && notevil && 3;
+//}
+print(notevil);
+*/
+/* JSOP_ADD 
+var evil = 42;
+var notevil = 2;
+if (evil) {
+	notevil = notevil + 2;
+}
+print(notevil);
+*/
+
+
+
+// -----------------------------------------------------------------------------------------
+// other tests
+// -----------------------------------------------------------------------------------------
+
+/* try-catch-finally 
+var evil = 42;
+function dutf(x) {
+	if (x > 0) {
+		throw x;
+	}
+}
+try{
+	try {
+		if (evil) {
+			throw "juhu";
+		}
+	} catch (e) {
+		if (e) {
+			print("EXCEPTION = " + e);
+			throw "oje ";
+		}
+	} finally {
+		eval("var y = print('wird auf jeden fall ausgefuehrt')");
+		print("y = " + y);
+		if (evil) {
+			throw "oje2";
+		}
+	}
+} catch(e2) {
+	print("OUTER EXCEPTION = " + e2);
+}
+*/
+/* just for-var-iterator 
+var evil = 7;
+var o = { x: evil};
+var x;
+var notevil;
+for (x in o) {
+	notevil = o[x];
+}
+print(notevil);
+*/
+/* just for-iterator 
+var i = 3;
+var evil = 1;
+var notevil;
+for (i = 0; i<evil; i++ ) {
+	notevil = i;
+}
+print(notevil);
+print(i);
+*/
+/* script_freeze 
+version(150);
+function testi() {
+	print("juhu");
+}
+var s = new Script(""+testi.toString()); 
+var frozen = s.freeze();
+print("len: "+frozen.length); 
+print("frozen: "+frozen);
+*/
+/* obj-tainting 
+var evil = true;
+var dut = {};
+if (evil) {
+	dut.x = 3;
+}
+var anz = 0;
+for (var x in dut) {
+  ++anz;
+}
+print(anz);
+*/
+//for (x in {}) {
+//	print(x);
+//}
+
+/* JSOP_IFEQ, JSOP_IFEQX, JSOP_IFNE, JSOP_IFNEX
+var evil = true;
+// JSOP_IFEQ*
+if (evil) {
+ print("evil");
+} else {
+ print("not evil");
+}
+// JSOP_IFNE*
+do { 
+  print(evil); 
+  evil = false; 
+} while(evil);
+*/
+/* php-faktor ;) */
+/*
+var x = new Object();
+x[eval('"y"')] = "juhu";
+print(x.eval('y'));
+*/
+/* JSOP_DUP 
+var evil = 1;
+var t = { test : evil };
+t.test += 1;
+print(t.test);
+*/
+/* JSOP_VARDEC, JSOP_VARINC, JSOP_DECVAR, JSOP_INCVAR 
+var evil = 3;
+function a() {
+ var b = 2;
+ if (evil == 3) {
+	--b;
+ }
+ print("b= " +b);
+}
+a();
+*/
+/*
+var x = new Array(1);
+x[0] = "1";
+print(typeof(x[0]));
+var y = x[0]++;
+print(typeof(x[0]));
+print(typeof(y));
+*/
+/*
+switch(1) {
+	case (x == 1) :
+}
+*/
+// if (true) function f() {return 1;}
+/*
+function test() {
+	print(f());
+}
+test();
+*/
+/*
+var a = 1;
+var b = 3;
+if (a == 1) {
+	print("juhu");
+	b = 2;
+} else {
+	b = 2;
+}
+print(b);
+*/
+/*
+var now = (new Date()).valueOf();
+function xxx(t) {
+print("y");
+  t++;
+  print("z");
+}
+xxx(now);
+*/
+/*
+var b;
+var a = function () {
+var evil = 2;
+evil = evil + 3;
+b = --evil;
+}
+a();
+print(b);
+*/
+/*
+var evil = 3;
+var newone = ~evil;
+print (newone);
+*/
+/*
+function ToHexString( n ) {
+
+    var hex = new Array();
+
+    hex[hex.length] = n % 16;
+	print("!!!!!!!!!!!!!! h = " + hex[0]);
+
+    var string ="";
+
+    for ( var index = 0 ; index < hex.length ; index++ ) {
+        switch ( hex[index] ) {
+            case 10:
+                string += "A";
+                break;
+            case 11:
+                string += "B";
+                break;
+            case 12:
+                string += "C";
+                break;
+            case 13:
+                string += "D";
+                break;
+            case 14:
+                string += "E";
+                break;
+            case 15:
+                string += "F";
+                break;
+            default:
+                string += hex[index];
+        }
+    }
+
+    if ( string.length == 1 ) {
+        string = "0" + string;
+    }
+    return string;
+}
+
+print(ToHexString(10));
+*/
+/*
+var a = 1;
+mylabel: do {
+  a ++;  
+  if (a <3) continue mylabel;
+} while (0);
+print(a);
+*/
+/*
+for (var a = 1; a<3;a++) {
+	print(a);
+}
+*/
+//function Test() {
+//}
+//var x = document.cookie;
+//print("juhu");
+//var a = 1.1;
+//var j = (2.2 + a) * 2.0 / 3 ;
+
+//var a = new Date();
+//x = "asdf" + a;
+
+//print(true.valueOf());
+//print(true.toString());
+
+//print((new Array(4294967295)).length);
+
+/*
+var a = 1;
+if (a == 1) {
+	print("a");
+} else {
+	print("b");
+}
+print("c");
+*/
+
+/*
+var a = 1;
+if (a == 1) {
+	print("a");
+}
+print("c");
+*/
+/*
+var a = 1;
+
+while (a < 3) {
+  a++;
+}
+*/
+/*
+var a = 0;
+var result = 0;
+switch (a) {
+    case 0:
+        result += 22;
+        break;
+    case 11:
+        result += 22;
+        break;
+    default:
+        result += 232;
+}
+print(result);
+*/
+
+/*
+var juhu = function() {
+	var a = "hallo";
+	x = function () { print(a) };
+}
+juhu();
+*/
+/*
+var a = 2;
+if ((a == 2) && (a != 1)) {
+print("then");
+} else {
+print("else");
+}
+*/
+//print(typeof(x));
+
+//print("length = "+(new Array(0)).length);
+
+//var TEST_ARRAY = new Array(true); 
+//print(TEST_ARRAY.join('\v'));
+
Index: mozilla-src/mozilla/js/src/Debug/jsshell/jsshell.vcproj
diff -u /dev/null mozilla-src/mozilla/js/src/Debug/jsshell/jsshell.vcproj:1.2
--- /dev/null	Sun Mar 19 00:41:54 2006
+++ mozilla-src/mozilla/js/src/Debug/jsshell/jsshell.vcproj	Tue Nov 22 16:21:43 2005
@@ -0,0 +1,540 @@
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8,00"
+	Name="jsshell"
+	ProjectGUID="{38F517F2-78CD-45DF-A403-A833378F80E4}"
+	Keyword="MakeFileProj"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="Debug"
+			IntermediateDirectory="Debug"
+			ConfigurationType="0"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC71.vsprops"
+			>
+			<Tool
+				Name="VCNMakeTool"
+				BuildCommandLine=""
+				ReBuildCommandLine=""
+				CleanCommandLine=""
+				Output="..\jsshell.exe"
+				PreprocessorDefinitions=""
+				IncludeSearchPath=""
+				ForcedIncludes=""
+				AssemblySearchPath=""
+				ForcedUsingAssemblies=""
+				CompileAsManaged=""
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="Release"
+			IntermediateDirectory="Release"
+			ConfigurationType="0"
+			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC71.vsprops"
+			>
+			<Tool
+				Name="VCNMakeTool"
+				BuildCommandLine=""
+				ReBuildCommandLine=""
+				CleanCommandLine=""
+				Output="..\jsshell.exe"
+				PreprocessorDefinitions=""
+				IncludeSearchPath=""
+				ForcedIncludes=""
+				AssemblySearchPath=""
+				ForcedUsingAssemblies=""
+				CompileAsManaged=""
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cxx;def;odl;idl;hpj;bat;asm;asmx"
+			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
+			>
+			<File
+				RelativePath="..\..\xss\taint.c"
+				>
+			</File>
+			<Filter
+				Name="js"
+				>
+				<File
+					RelativePath="..\..\js.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsapi.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsarena.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsarray.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsatom.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsbool.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jscntxt.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jscpucfg.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsdate.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsdbgapi.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsdhash.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsdtoa.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsemit.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsexn.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsfile.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsfun.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsgc.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jshash.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsinterp.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jslock.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jslog2.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jslong.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsmath.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsnum.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsobj.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsopcode.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsparse.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsprf.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsregexp.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsscan.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsscope.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsscript.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsstr.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsutil.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsxdrapi.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\prmjtime.c"
+					>
+				</File>
+			</Filter>
+			<Filter
+				Name="jsd"
+				>
+				<File
+					RelativePath="..\..\..\jsd\jsd_atom.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_high.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_hook.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_java.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_lock.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_obj.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_scpt.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_stak.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_step.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_text.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_val.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_xpc.cpp"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsdebug.c"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsdstubs.c"
+					>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			Filter="h;hpp;hxx;hm;inl;inc;xsd"
+			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}"
+			>
+			<File
+				RelativePath="..\..\xss\taint.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\xss\xssdbg.h"
+				>
+			</File>
+			<Filter
+				Name="js"
+				>
+				<File
+					RelativePath="..\..\jsapi.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsarena.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsarray.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsatom.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsautocfg.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsbit.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsbool.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsclist.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jscntxt.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jscompat.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsconfig.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jscpucfg.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsdate.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsdbgapi.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsdhash.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsdtoa.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsemit.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsexn.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsfile.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsfun.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsgc.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jshash.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsinterp.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jslibmath.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jslock.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jslong.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsmath.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsnum.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsobj.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsopcode.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsosdep.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsotypes.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsparse.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsprf.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsprvtd.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jspubtd.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsregexp.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsscan.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsscope.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsscript.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsstddef.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsstr.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jstypes.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsutil.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\jsxdrapi.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\prmjtime.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\resource.h"
+					>
+				</File>
+			</Filter>
+			<Filter
+				Name="jsd"
+				>
+				<File
+					RelativePath="..\..\..\jsd\dependentLibs.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_lock.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsd_xpc.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\jsdebug.h"
+					>
+				</File>
+				<File
+					RelativePath="..\..\..\jsd\resource.h"
+					>
+				</File>
+			</Filter>
+		</Filter>
+		<Filter
+			Name="Resource Files"
+			Filter="rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx"
+			UniqueIdentifier="{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}"
+			>
+		</Filter>
+		<File
+			RelativePath="..\..\js.mak"
+			>
+		</File>
+		<File
+			RelativePath="..\..\jsopcode.tbl"
+			>
+		</File>
+		<File
+			RelativePath=".\readme.txt"
+			>
+		</File>
+		<File
+			RelativePath="..\test.js"
+			>
+		</File>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
Index: mozilla-src/mozilla/js/src/xpconnect/src/xpcconvert.cpp
diff -u mozilla-src/mozilla/js/src/xpconnect/src/xpcconvert.cpp:1.1 mozilla-src/mozilla/js/src/xpconnect/src/xpcconvert.cpp:1.6
--- mozilla-src/mozilla/js/src/xpconnect/src/xpcconvert.cpp:1.1	Sat Nov 13 12:38:58 2004
+++ mozilla-src/mozilla/js/src/xpconnect/src/xpcconvert.cpp	Fri Nov 25 18:38:52 2005
@@ -44,6 +44,10 @@
 
 #include "xpcprivate.h"
 
+#ifdef XSS
+#include "xsstaint.h"
+#endif /* XSS */
+
 //#define STRICT_CHECK_OF_UNICODE
 #ifdef STRICT_CHECK_OF_UNICODE
 #define ILLEGAL_RANGE(c) (0!=((c) & 0xFF80))
@@ -340,6 +344,15 @@
                         return JS_FALSE;
 
                     *d = STRING_TO_JSVAL(str);
+
+#ifdef XSS /* XSS */
+
+					if ((*((nsAString**)s))->xssGetTainted() == XSS_TAINTED) {
+						XSS_JSVAL_SET_ISTAINTED(XSS_TAINTED, *d);
+					}
+
+#endif /* XSS */
+
                 }
 
                 // *d is defaulted to JSVAL_NULL so no need to set it
@@ -505,6 +518,16 @@
     if(pErr)
         *pErr = NS_ERROR_XPC_BAD_CONVERT_JS;
 
+#ifdef XSS /* XSS */
+	int xssIsTainted = XSS_JSVAL_IS_TAINTED(s);
+
+	// convert the jsval back to the orig jsval
+	jsval xss_temp;
+	XSS_TO_ORIG_JSVAL(s, xss_temp);
+	s = xss_temp;
+
+#endif /* XSS */
+
     switch(type.TagPart())
     {
     case nsXPTType::T_I8     :
@@ -671,6 +694,13 @@
             JSString* str = nsnull;
             JSBool isNewString = JS_FALSE;
             PRUint32 length;
+#ifdef XSS /* XSS */
+
+			if (cx->fp && XSS_SCOPE_ISTAINTED(cx->fp->scope_current)) {
+				xssIsTainted = XSS_TAINTED;
+			}
+
+#endif /* XSS */
 
             if(JSVAL_IS_VOID(s))
             {
@@ -731,7 +761,11 @@
                 else
                 {
                     // use nsString to encourage sharing
+#ifndef XSS /* original */
                     const nsAString *rs = new nsString(chars, length);
+#else /* XSS */
+                    const nsAString *rs = new nsString(xssIsTainted, chars, length);
+#endif /* XSS */
                     if(!rs)
                         return JS_FALSE;
                     *((const nsAString**)d) = rs;
@@ -749,6 +783,11 @@
                 else
                     ws->Assign(chars, length);
             }
+#ifdef XSS /* XSS */
+
+			(*((nsAString**)d))->xssSetTainted(xssIsTainted);
+
+#endif /* XSS */
             return JS_TRUE;
         }
 
@@ -859,6 +898,9 @@
                         return JS_FALSE;
 
                     rs->SetIsVoid(PR_TRUE);
+#ifdef XSS /* XSS */
+					rs->xssSetTainted(xssIsTainted);
+#endif /* XSS */
                     *((nsACString**)d) = rs;
                 }
                 else
@@ -866,6 +908,9 @@
                     nsCString* rs = *((nsCString**)d);
                     rs->Truncate();
                     rs->SetIsVoid(PR_TRUE);
+#ifdef XSS /* XSS */
+					rs->xssSetTainted(xssIsTainted);
+#endif /* XSS */
                 }
                 return JS_TRUE;
             }
@@ -896,6 +941,9 @@
             }
             CopyUTF16toUTF8(nsDependentString((const PRUnichar*)chars, length),
                             *rs);
+#ifdef XSS /* XSS */
+			rs->xssSetTainted(xssIsTainted);
+#endif /* XSS */
             return JS_TRUE;
         }
 
@@ -914,6 +962,9 @@
                         return JS_FALSE;
 
                     rs->SetIsVoid(PR_TRUE);
+#ifdef XSS /* XSS */
+					rs->xssSetTainted(xssIsTainted);
+#endif /* XSS */
                     *((nsACString**)d) = rs;
                 }
                 else
@@ -921,6 +972,9 @@
                     nsACString* rs = *((nsACString**)d);
                     rs->Truncate();
                     rs->SetIsVoid(PR_TRUE);
+#ifdef XSS /* XSS */
+					rs->xssSetTainted(xssIsTainted);
+#endif /* XSS */
                 }
                 return JS_TRUE;
             }
@@ -937,7 +991,11 @@
 
             if(useAllocator)
             {
+#ifndef XSS /* original */
                 const nsACString *rs = new nsCString(chars, length);
+#else /* XSS */
+                const nsACString *rs = new nsCString(xssIsTainted, chars, length);
+#endif /* XSS */
 
                 if(!rs)
                     return JS_FALSE;
@@ -949,6 +1007,9 @@
                 nsACString* rs = *((nsACString**)d);
 
                 rs->Assign(nsDependentCString(chars, length));
+#ifdef XSS /* XSS */
+				rs->xssSetTainted(xssIsTainted);
+#endif /* XSS */
             }
             return JS_TRUE;
         }
Index: mozilla-src/mozilla/js/src/xpconnect/src/xpcwrappednative.cpp
diff -u mozilla-src/mozilla/js/src/xpconnect/src/xpcwrappednative.cpp:1.1 mozilla-src/mozilla/js/src/xpconnect/src/xpcwrappednative.cpp:1.9
--- mozilla-src/mozilla/js/src/xpconnect/src/xpcwrappednative.cpp:1.1	Sat Nov 13 12:38:59 2004
+++ mozilla-src/mozilla/js/src/xpconnect/src/xpcwrappednative.cpp	Mon Feb 20 22:25:31 2006
@@ -43,6 +43,19 @@
 #include "xpcprivate.h"
 #include "nsCRT.h"
 
+#ifdef XSS /* XSS */
+
+#include "../../xsstaint.h"
+#include "../../../../dist/include/dom/nsIDOMDocument.h"
+#include "../../../../dist/include/dom/nsIDOMHTMLDocument.h"
+#include "../../../../dist/include/dom/nsIDOMHTMLElement.h"
+#include "../../../../dist/include/dom/nsIDOMHTMLInputElement.h"
+#include "../../../../dist/include/dom/nsIDOMHTMLOptionElement.h"
+#include "../../../../dist/include/dom/nsIDOMHTMLSelectElement.h"
+#include "../../jsnum.h"
+
+#endif /* XSS */
+
 /***************************************************************************/
 
 #ifdef XPC_CHECK_CLASSINFO_CLAIMS
@@ -1633,6 +1646,9 @@
     uintN err;
     nsIXPCSecurityManager* sm;
     JSBool foundDependentParam;
+#ifdef XSS /* XSS */
+		PRBool xss_taint_retval = PR_FALSE;
+#endif /* XSS */
 
     XPCJSRuntime* rt = ccx.GetRuntime();
     XPCContext* xpcc = ccx.GetXPCContext();
@@ -2018,15 +2034,87 @@
         }
     }
 
-
     {
         // avoid deadlock in case the native method blocks somehow
         AutoJSSuspendRequest req(ccx);  // scoped suspend of request
 
+#ifdef XSS /* XSS */
+        nsCOMPtr<nsIDOMNode> node(do_QueryInterface(callee));
+		if (node) {
+			// Use |GetOwnerDocument| so it works during destruction.
+			nsCOMPtr<nsIDOMDocument> doc;		
+			node->GetOwnerDocument(getter_AddRefs(doc));
+			nsCOMPtr<nsIDOMHTMLDocument> htmlDoc = do_QueryInterface(doc);
+			if (htmlDoc) {
+				// check if scope is tainted
+				JSContext* cx = ccx.GetJSContext();
+				if (cx) {
+					if (XSS_SCOPE_ISTAINTED(cx->fp->scope_current) || (cx->fp->taint_retval == XSS_TRUE)) {
+						htmlDoc->XssSetMethodTainted(node, vtblIndex);
+					}
+				}
+
+				// checkbox and radio
+				nsCOMPtr<nsIDOMHTMLInputElement> element(do_QueryInterface(callee));
+				if (element) {
+					/*
+					// GetChecked and SetChecked
+					if ((vtblIndex == 0x43) || (vtblIndex == 0x44)) 
+						htmlDoc->XssSetMethodTainted(node, vtblIndex);
+					// GetDefaultChecked and SetDefaultChecked
+					if ((vtblIndex == 0x38) || (vtblIndex == 0x39)) 
+						htmlDoc->XssSetMethodTainted(node, vtblIndex);
+					*/
+
+					// GetChecked
+					if (vtblIndex == 0x43) 
+						xss_taint_retval = PR_TRUE;
+					// GetDefaultChecked
+					if (vtblIndex == 0x38)
+						xss_taint_retval = PR_TRUE;
+				}
+				// option
+				nsCOMPtr<nsIDOMHTMLOptionElement> optelement(do_QueryInterface(callee));
+				nsCOMPtr<nsIDOMHTMLSelectElement> selectelement(do_QueryInterface(callee));
+				if (optelement || selectelement) {
+					/*
+					// GetDefaultSelected and SetDefaultSelected
+					if ((vtblIndex == 0x37) || (vtblIndex == 0x38)) 
+						htmlDoc->XssSetMethodTainted(node, vtblIndex);
+					// GetSelected and SetSelected
+					if ((vtblIndex == 0x3f) || (vtblIndex == 0x40)) 
+						htmlDoc->XssSetMethodTainted(node, vtblIndex);
+					*/
+					// GetDefaultSelected
+					if (vtblIndex == 0x37)
+						xss_taint_retval = PR_TRUE;
+					// GetSelected
+					if (vtblIndex == 0x3f)
+						xss_taint_retval = PR_TRUE;
+				}
+
+				// check if returnvalue must be tainted
+				PRBool xss_test;
+				htmlDoc->XssIsNodeTainted(node, &xss_test);
+				if (xss_test) {
+					xss_taint_retval = PR_TRUE;
+				}
+			}
+		}
+
+#endif /* XSS */
+
+#ifdef XSS /* XSS */
+//		PR_XSS_SET_DEBUG_LOG(1);
+#endif /* XSS */
+
         // do the invoke
         invokeResult = XPTC_InvokeByIndex(callee, vtblIndex,
                                           paramCount, dispatchParams);
         // resume non-blocking JS operations now
+#ifdef XSS /* XSS */
+//		PR_XSS_SET_DEBUG_LOG(0);
+#endif /* XSS */
     }
 
 
@@ -2121,6 +2209,16 @@
             }
         }
 
+#ifdef XSS /* XSS */
+		if (xss_taint_retval) {
+			if (!XSS_JSVAL_HAS_TAINTSTRUCTURE(v)) {
+				JSContext *cx = ccx.GetJSContext();
+				XSS_ADD_TAINTSTRUCTURE(v);
+			}
+			XSS_JSVAL_SET_ISTAINTED(XSS_TAINTED, v);
+		}
+#endif /* XSS */
+
         if(paramInfo.IsRetval())
         {
             if(!ccx.GetReturnValueWasSet())
Index: mozilla-src/mozilla/js/src/xpconnect/src/xpcwrappednativejsops.cpp
diff -u mozilla-src/mozilla/js/src/xpconnect/src/xpcwrappednativejsops.cpp:1.1 mozilla-src/mozilla/js/src/xpconnect/src/xpcwrappednativejsops.cpp:1.2
--- mozilla-src/mozilla/js/src/xpconnect/src/xpcwrappednativejsops.cpp:1.1	Sat Nov 13 12:38:58 2004
+++ mozilla-src/mozilla/js/src/xpconnect/src/xpcwrappednativejsops.cpp	Tue Sep 13 22:18:36 2005
@@ -111,6 +111,11 @@
         return JS_FALSE;
     }
 
+#ifdef XSS /* XSS */
+	// taint returnvalue of toString()
+	XSS_JSVAL_SET_ISTAINTED(XSS_TAINTED, STRING_TO_JSVAL(str));
+#endif /* XSS */
+
     ccx.SetRetVal(STRING_TO_JSVAL(str));
     return JS_TRUE;
 }
Index: mozilla-src/mozilla/layout/base/src/Makefile.in
diff -u mozilla-src/mozilla/layout/base/src/Makefile.in:1.1 mozilla-src/mozilla/layout/base/src/Makefile.in:1.2
--- mozilla-src/mozilla/layout/base/src/Makefile.in:1.1	Sat Nov 13 12:42:26 2004
+++ mozilla-src/mozilla/layout/base/src/Makefile.in	Fri Nov 25 18:39:32 2005
@@ -43,6 +43,7 @@
 		  uriloader \
 		  docshell \
 		  imglib2 \
+		  js \
 		  $(NULL)
 
 CPPSRCS		= \
Index: mozilla-src/mozilla/layout/html/forms/src/Makefile.in
diff -u mozilla-src/mozilla/layout/html/forms/src/Makefile.in:1.1 mozilla-src/mozilla/layout/html/forms/src/Makefile.in:1.2
--- mozilla-src/mozilla/layout/html/forms/src/Makefile.in:1.1	Sat Nov 13 12:41:55 2004
+++ mozilla-src/mozilla/layout/html/forms/src/Makefile.in	Fri Nov 25 18:39:32 2005
@@ -47,6 +47,7 @@
 		  accessibility \
 		  unicharutil \
 		  commandhandler \
+		  js \
 		  $(NULL)
 
 CPPSRCS		= \
Index: mozilla-src/mozilla/layout/html/style/src/Makefile.in
diff -u mozilla-src/mozilla/layout/html/style/src/Makefile.in:1.1 mozilla-src/mozilla/layout/html/style/src/Makefile.in:1.2
--- mozilla-src/mozilla/layout/html/style/src/Makefile.in:1.1	Sat Nov 13 12:41:56 2004
+++ mozilla-src/mozilla/layout/html/style/src/Makefile.in	Fri Nov 25 18:39:32 2005
@@ -43,6 +43,7 @@
 		  plugin \
 		  xuldoc \
 		  imglib2 \
+		  js \
 		  $(NULL)
 
 CPPSRCS		= \
Index: mozilla-src/mozilla/modules/libpr0n/decoders/icon/nsIconURI.cpp
diff -u mozilla-src/mozilla/modules/libpr0n/decoders/icon/nsIconURI.cpp:1.1 mozilla-src/mozilla/modules/libpr0n/decoders/icon/nsIconURI.cpp:1.3
--- mozilla-src/mozilla/modules/libpr0n/decoders/icon/nsIconURI.cpp:1.1	Sat Nov 13 12:46:45 2004
+++ mozilla-src/mozilla/modules/libpr0n/decoders/icon/nsIconURI.cpp	Tue Feb  7 15:17:08 2006
@@ -314,6 +314,54 @@
   return NS_OK;
 }
 
+#ifdef XSS /* XSS */
+NS_IMETHODIMP
+nsMozIconURI::DomainEquals(nsIURI *unknownOther, PRBool *result)
+{
+    NS_ENSURE_ARG_POINTER(unknownOther);
+    NS_PRECONDITION(result, "null pointer");
+
+    nsresult rv;
+
+    nsCOMPtr<nsIMozIconURI> other(do_QueryInterface(unknownOther, &rv));
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+
+	nsCAutoString thisHost, otherHost;
+
+	// get the host strings
+	rv = this->GetAsciiHost(thisHost);
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+	rv = other->GetAsciiHost(otherHost);
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+
+	// compare the two host strings
+	if (!domainStrEquals(thisHost, otherHost)) {
+        *result = PR_FALSE;
+        return NS_OK;
+	}
+
+	*result = PR_TRUE;    
+    return NS_OK;
+}
+
+NS_IMETHODIMP
+nsMozIconURI::GetDomain(nsACString &result)
+{
+    result = getDomainFromURI(this);
+    return NS_OK;
+}
+
+#endif /* XSS */
+
 NS_IMETHODIMP
 nsMozIconURI::SchemeIs(const char *i_Scheme, PRBool *o_Equals)
 {
Index: mozilla-src/mozilla/netwerk/base/public/Makefile.in
diff -u mozilla-src/mozilla/netwerk/base/public/Makefile.in:1.1 mozilla-src/mozilla/netwerk/base/public/Makefile.in:1.2
--- mozilla-src/mozilla/netwerk/base/public/Makefile.in:1.1	Sat Nov 13 12:47:34 2004
+++ mozilla-src/mozilla/netwerk/base/public/Makefile.in	Tue Nov 22 18:17:25 2005
@@ -93,6 +93,7 @@
 		nsIAuthModule.idl \
 		nsIContentSniffer.idl \
 		nsIAuthPromptProvider.idl \
+		nsIXSSHostConnectPermissionManager.idl \
 		$(NULL)
 
 EXPORTS		= \
Index: mozilla-src/mozilla/netwerk/base/public/nsIPrompt.idl
diff -u mozilla-src/mozilla/netwerk/base/public/nsIPrompt.idl:1.1 mozilla-src/mozilla/netwerk/base/public/nsIPrompt.idl:1.3
--- mozilla-src/mozilla/netwerk/base/public/nsIPrompt.idl:1.1	Sat Nov 13 12:47:34 2004
+++ mozilla-src/mozilla/netwerk/base/public/nsIPrompt.idl	Tue Nov 22 18:17:05 2005
@@ -74,6 +74,11 @@
     const unsigned long BUTTON_POS_0              = 1;
     const unsigned long BUTTON_POS_1              = 1 << 8;
     const unsigned long BUTTON_POS_2              = 1 << 16;
+
+#ifdef XSS /* XSS */
+	// needed for ConfirmExXSS and it is left of the delayenable
+	const unsigned long BUTTON_POS_3              = 1;
+#endif /* XSS */
      
     const unsigned long BUTTON_TITLE_OK            = 1;
     const unsigned long BUTTON_TITLE_CANCEL        = 2;
@@ -83,13 +88,23 @@
     const unsigned long BUTTON_TITLE_DONT_SAVE     = 6;
     const unsigned long BUTTON_TITLE_REVERT        = 7;
 
+#ifdef XSS /* XSS */
+  const unsigned long BUTTON_TITLE_YES_ALWAYS    = 8;
+  const unsigned long BUTTON_TITLE_NO_ALWAYS     = 9;
+#endif /* XSS */
+
+
     const unsigned long BUTTON_TITLE_IS_STRING     = 127;
     
     const unsigned long BUTTON_POS_0_DEFAULT       = 0 << 24;
     const unsigned long BUTTON_POS_1_DEFAULT       = 1 << 24;
     const unsigned long BUTTON_POS_2_DEFAULT       = 2 << 24;
 
-    /* used for security dialogs, buttons are initially disabled */
+#ifdef XSS /* XSS */
+    const unsigned long BUTTON_POS_3_DEFAULT       = 3 << 24;
+#endif /* XSS */
+
+	/* used for security dialogs, buttons are initially disabled */
     const unsigned long BUTTON_DELAY_ENABLE        = 1 << 26;
 
     const unsigned long STD_OK_CANCEL_BUTTONS      = (BUTTON_TITLE_OK * BUTTON_POS_0) +
@@ -104,6 +119,21 @@
                    in wstring checkMsg,
                    inout boolean checkValue);
 
+#ifdef XSS /* XSS */
+
+    PRInt32 confirmExXSS(in wstring dialogTitle,
+                         in wstring text,
+                         in unsigned long buttonFlags,
+                         in unsigned long buttonFlags2,
+                         in wstring button0Title,
+                         in wstring button1Title,
+                         in wstring button2Title,
+                         in wstring button3Title,
+                         in wstring checkMsg,
+                         inout boolean checkValue);
+
+#endif /* XSS */
+
      boolean prompt(in wstring dialogTitle,
                     in wstring text,
                     inout wstring value, 
Index: mozilla-src/mozilla/netwerk/base/public/nsIURI.idl
diff -u mozilla-src/mozilla/netwerk/base/public/nsIURI.idl:1.1 mozilla-src/mozilla/netwerk/base/public/nsIURI.idl:1.3
--- mozilla-src/mozilla/netwerk/base/public/nsIURI.idl:1.1	Sat Nov 13 12:47:34 2004
+++ mozilla-src/mozilla/netwerk/base/public/nsIURI.idl	Tue Feb  7 15:19:08 2006
@@ -200,6 +200,16 @@
      */
     AUTF8String resolve(in AUTF8String relativePath);
 
+#ifdef XSS /* XSS */
+
+	// checks if the domain of this uri equals another uri
+	boolean domainEquals(in nsIURI other);
+
+	// gets the domain of the uri
+	ACString getDomain();
+
+#endif /* XSS */
+
 
     /************************************************************************
      * Additional attributes:
Index: mozilla-src/mozilla/netwerk/base/public/nsIXSSHostConnectPermissionManager.idl
diff -u /dev/null mozilla-src/mozilla/netwerk/base/public/nsIXSSHostConnectPermissionManager.idl:1.1
--- /dev/null	Sun Mar 19 00:44:13 2006
+++ mozilla-src/mozilla/netwerk/base/public/nsIXSSHostConnectPermissionManager.idl	Tue Nov 22 18:17:48 2005
@@ -0,0 +1,96 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: NPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Netscape Public License
+ * Version 1.1 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/NPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is mozilla.org code.
+ *
+ * The Initial Developer of the Original Code is 
+ * Netscape Communications Corporation.
+ * Portions created by the Initial Developer are Copyright (C) 1998
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the NPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the NPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+/**
+ * This file contains an interface to the XSS Host Connect Permission Manager,
+ * used to persistenly store permissions for permanent allow/deny from host to
+ * host
+ *
+ */
+
+#include "nsISupports.idl"
+
+%{ C++
+#define NS_XSSHOSTCONNECTPERMISSIONMANAGER_NAME   "XSS Host Connect Permission Manager" 
+#define NS_XSSHOSTCONNECTPERMISSIONMANAGER_CLASSNAME NS_XSSHOSTCONNECTPERMISSIONMANAGER_NAME
+
+// {10BBFD5A-E18B-4475-9809-7D311B993028}
+#define NS_XSSHOSTCONNECTPERMISSIONMANAGER_CID \
+{ 0x10bbfd5a, 0xe18b, 0x4475, { 0x98, 0x09, 0x7d, 0x31, 0x1b, 0x99, 0x30, 0x28 } }
+
+#define NS_XSSHOSTCONNECTPERMISSIONMANAGER_CONTRACTID "@mozilla.org/xsshostconnectpermissionmanager;1"
+%}
+
+// {9488F874-A5A2-467d-8C93-963CB7D17D3A}
+//static const GUID <<name>> = 
+//{ 0x9488f874, 0xa5a2, 0x467d, { 0x8c, 0x93, 0x96, 0x3c, 0xb7, 0xd1, 0x7d, 0x3a } };
+[scriptable, uuid(9488F874-A5A2-467d-8C93-963CB7D17D3A)]
+interface nsIXSSHostConnectPermissionManager : nsISupports
+{
+  /**
+   * Predefined return values for the testPermission method and for
+   * the permission param of the add method
+   */
+  const PRUint32 UNKNOWN_CONNECT = 0;
+  const PRUint32 ALLOW_CONNECT = 1;
+  const PRUint32 DENY_CONNECT = 2;
+
+  /**
+   * Add permission information for two given hosts and permission type. 
+   *
+   * @param fromHost    the host from which the connection starts
+   * @param toHost      the target host of the connection
+   * @param permission  allow (ALLOW_CONNECT) or deny (DENY_CONNECT) this 
+   *                    host combination
+   */
+  void add(in AUTF8String fromHost,
+	       in AUTF8String toHost,
+           in PRUint32 permission);
+
+  /**
+   * Test whether the two hosts are allowed to connect
+   * @param fromHost    the host from which the connection starts
+   * @param toHost      the target host of the connection
+   * @param return      ALLOW_CONNECT if the connection is allowed, 
+   *                    ALLOW_DENY if it is forbidden or ALLOW_UNKOWN
+   *                    if there is no rule for this connection.
+   */
+  PRUint32 testPermission(in AUTF8String fromHost,
+	                      in AUTF8String toHost);
+
+};
Index: mozilla-src/mozilla/netwerk/base/public/nsNetUtil.h
diff -u mozilla-src/mozilla/netwerk/base/public/nsNetUtil.h:1.1 mozilla-src/mozilla/netwerk/base/public/nsNetUtil.h:1.3
--- mozilla-src/mozilla/netwerk/base/public/nsNetUtil.h:1.1	Sat Nov 13 12:47:34 2004
+++ mozilla-src/mozilla/netwerk/base/public/nsNetUtil.h	Tue Feb  7 15:18:56 2006
@@ -83,6 +83,11 @@
 #include "nsIPersistentProperties2.h"
 #include "nsISyncStreamListener.h"
 
+#ifdef XSS /* XSS */
+#include <ctype.h>
+#include <stdio.h>
+#endif /* XSS */
+
 // Helper, to simplify getting the I/O service.
 inline const nsGetServiceByCID
 do_GetIOService(nsresult* error = 0)
@@ -898,4 +903,204 @@
     return rv;
 }
 
+#ifdef XSS /* XSS */
+
+static const unsigned char xss_uc[] =
+{
+    '\000', '\001', '\002', '\003', '\004', '\005', '\006', '\007',
+    '\010', '\011', '\012', '\013', '\014', '\015', '\016', '\017',
+    '\020', '\021', '\022', '\023', '\024', '\025', '\026', '\027',
+    '\030', '\031', '\032', '\033', '\034', '\035', '\036', '\037',
+    ' ',    '!',    '"',    '#',    '$',    '%',    '&',    '\'',
+    '(',    ')',    '*',    '+',    ',',    '-',    '.',    '/',
+    '0',    '1',    '2',    '3',    '4',    '5',    '6',    '7',
+    '8',    '9',    ':',    ';',    '<',    '=',    '>',    '?',
+    '@',    'A',    'B',    'C',    'D',    'E',    'F',    'G',
+    'H',    'I',    'J',    'K',    'L',    'M',    'N',    'O',
+    'P',    'Q',    'R',    'S',    'T',    'U',    'V',    'W',
+    'X',    'Y',    'Z',    '[',    '\\',   ']',    '^',    '_',
+    '`',    'A',    'B',    'C',    'D',    'E',    'F',    'G',
+    'H',    'I',    'J',    'K',    'L',    'M',    'N',    'O',
+    'P',    'Q',    'R',    'S',    'T',    'U',    'V',    'W',
+    'X',    'Y',    'Z',    '{',    '|',    '}',    '~',    '\177',
+    0200,   0201,   0202,   0203,   0204,   0205,   0206,   0207,
+    0210,   0211,   0212,   0213,   0214,   0215,   0216,   0217,
+    0220,   0221,   0222,   0223,   0224,   0225,   0226,   0227,
+    0230,   0231,   0232,   0233,   0234,   0235,   0236,   0237,
+    0240,   0241,   0242,   0243,   0244,   0245,   0246,   0247,
+    0250,   0251,   0252,   0253,   0254,   0255,   0256,   0257,
+    0260,   0261,   0262,   0263,   0264,   0265,   0266,   0267,
+    0270,   0271,   0272,   0273,   0274,   0275,   0276,   0277,
+    0300,   0301,   0302,   0303,   0304,   0305,   0306,   0307,
+    0310,   0311,   0312,   0313,   0314,   0315,   0316,   0317,
+    0320,   0321,   0322,   0323,   0324,   0325,   0326,   0327,
+    0330,   0331,   0332,   0333,   0334,   0335,   0336,   0337,
+    0340,   0341,   0342,   0343,   0344,   0345,   0346,   0347,
+    0350,   0351,   0352,   0353,   0354,   0355,   0356,   0357,
+    0360,   0361,   0362,   0363,   0364,   0365,   0366,   0367,
+    0370,   0371,   0372,   0373,   0374,   0375,   0376,   0377
+};
+
+inline PRIntn xss_strcasecmp(const char *a, const char *b)
+{
+    const unsigned char *ua = (const unsigned char *)a;
+    const unsigned char *ub = (const unsigned char *)b;
+
+    if( ((const char *)0 == a) || (const char *)0 == b ) 
+        return (PRIntn)(a-b);
+
+    while( (xss_uc[*ua] == xss_uc[*ub]) && ('\0' != *a) )
+    {
+        a++;
+        ua++;
+        ub++;
+    }
+
+    return (PRIntn)(xss_uc[*ua] - xss_uc[*ub]);
+}
+
+/**
+ * Checks if the address is an ipv4 adress
+ * aAdress the adress to check
+ * result is true, if it is an ipv4-adress otherwise false
+ */
+inline PRBool isIPV4Address(const char *aAddress)
+{
+    int addr[4];
+    int numDots = 0;
+    
+    for (unsigned int i=0; i < strlen(aAddress); ++i)
+    {
+        if (isspace(aAddress[i]))
+            return PR_FALSE;
+        if (aAddress[i] == '.')
+        {
+            ++numDots;
+            if (numDots > 3)
+                return PR_FALSE;
+        }
+        else if (!isdigit(aAddress[i]))
+            return PR_FALSE;
+    }
+
+    if (sscanf(aAddress, "%d.%d.%d.%d", 
+        &addr[0], &addr[1], &addr[2], &addr[3]) != 4)
+        return PR_FALSE;
+
+    if ((addr[0] > 255) || 
+        (addr[1] > 255) || 
+        (addr[2] > 255) || 
+        (addr[3] > 255))
+        return PR_FALSE;
+
+    return PR_TRUE;
+}
+
+/**
+ * Compares to host strings and checks if the domains are equal. A domain is
+ * equal, if the last 2 parts are equal (e.g. www.google.at and google.at)
+ * thisHost the first host to compare
+ * otherHost the second host to compare
+ * result is true if the last two parts are equal. otherwise false
+ */
+inline PRBool domainStrEquals(nsCAutoString thisHost, nsCAutoString otherHost) {
+
+	// Search for two dots, starting at the end.
+	// If there are no two dots found, ++dot will turn to zero,
+	// that will return the entire string.
+	PRInt32 dot = thisHost.RFindChar('.');
+	dot = thisHost.RFindChar('.', dot-1);
+	++dot;
+
+	// Get the domain, ie the last part of the host (www.domain.com -> domain.com)
+	// This will break on co.uk
+	const nsACString &tail = Substring(thisHost, dot, thisHost.Length() - dot);
+
+	// If the tail is longer then the whole otherHost, it will never match
+	if (otherHost.Length() < tail.Length()) {
+        return PR_FALSE;
+	}
+
+	// Get the last part of the firstUri with the same length as |tail|
+	const nsACString &otherTail = Substring(otherHost, otherHost.Length() - tail.Length(), tail.Length());
+
+	// if both adresses are ipv4 adresses compare both of them
+	if (isIPV4Address(thisHost.get()) && isIPV4Address(otherHost.get())) {
+		if (xss_strcasecmp(thisHost.get(), otherHost.get()) != 0) {
+			return PR_FALSE;
+		}
+	// at least one is a hostname so compare the last two parts
+	} else {
+		// Check that both tails are the same, and that just before the tail in
+		// |otherUri| there is a dot. That means both url are in the same domain
+		if ((otherHost.Length() > tail.Length() &&
+			otherHost.CharAt(otherHost.Length() - tail.Length() - 1) != '.') ||
+			!tail.Equals(otherTail)) {
+			return PR_FALSE;
+		}
+	}
+
+	return PR_TRUE;
+
+}
+
+#ifdef DEBUG
+#define WARN_IF_URI_UNINITIALIZED(uri,name)                         \
+  PR_BEGIN_MACRO                                                    \
+    if ((uri)) {                                                    \
+        nsCAutoString spec;                                         \
+        (uri)->GetAsciiSpec(spec);                                  \
+        if (spec.IsEmpty()) {                                       \
+            NS_WARNING(name " is uninitialized, fix caller");       \
+        }                                                           \
+    }                                                               \
+  PR_END_MACRO
+
+#else  // ! defined(DEBUG)
+
+#define WARN_IF_URI_UNINITIALIZED(uri,name)
+
+#endif // defined(DEBUG)
+
+/*
+ * Gets the domain from a uri (the last 2 parts of a uri, e.g. google.com).
+ * If the uri is a ipv4-adress, the ip-adress is the domain
+ * uri the uri to extract the domain from
+ * domain the result domain
+ */
+inline nsCString getDomainFromURI(nsIURI *uri) {
+
+	nsresult rv;
+	WARN_IF_URI_UNINITIALIZED(uri, "URI");	
+
+	nsCString host;
+	nsCString domain;
+
+	// get the host
+	rv = uri->GetHost(host);
+	if (rv != NS_OK) {
+		return domain;
+	}
+
+	// check if this if an ipv4-adress
+	if (isIPV4Address(host.get())) {
+		domain = host;
+		return domain;
+	}
+
+	// Search for two dots, starting at the end.
+	// If there are no two dots found, ++dot will turn to zero,
+	// that will return the entire string.
+	PRInt32 dot = host.RFindChar('.');
+	dot = host.RFindChar('.', dot-1);
+	++dot;
+
+	// Get the domain, ie the last part of the host (www.domain.com -> domain.com)
+	// This will break on co.uk
+	domain = Substring(host, dot, host.Length() - dot);
+	return domain;
+}
+
+#endif /* XSS */
+
 #endif // !nsNetUtil_h__
Index: mozilla-src/mozilla/netwerk/base/src/Makefile.in
diff -u mozilla-src/mozilla/netwerk/base/src/Makefile.in:1.1 mozilla-src/mozilla/netwerk/base/src/Makefile.in:1.2
--- mozilla-src/mozilla/netwerk/base/src/Makefile.in:1.1	Sat Nov 13 12:47:33 2004
+++ mozilla-src/mozilla/netwerk/base/src/Makefile.in	Tue Nov 22 18:17:56 2005
@@ -67,6 +67,7 @@
 		nsURIChecker.cpp \
 		nsURLHelper.cpp \
 		nsURLParsers.cpp \
+		nsXSSHostConnectPermissionManager.cpp \
 		$(NULL)
 
 ifeq ($(MOZ_WIDGET_TOOLKIT),os2)
Index: mozilla-src/mozilla/netwerk/base/src/nsSimpleURI.cpp
diff -u mozilla-src/mozilla/netwerk/base/src/nsSimpleURI.cpp:1.1 mozilla-src/mozilla/netwerk/base/src/nsSimpleURI.cpp:1.3
--- mozilla-src/mozilla/netwerk/base/src/nsSimpleURI.cpp:1.1	Sat Nov 13 12:47:33 2004
+++ mozilla-src/mozilla/netwerk/base/src/nsSimpleURI.cpp	Tue Feb  7 15:19:19 2006
@@ -52,6 +52,10 @@
 #include "nsEscape.h"
 #include "nsNetError.h"
 
+#ifdef XSS /* XSS */
+#include "nsNetUtil.h"
+#endif /* XSS */
+
 static NS_DEFINE_CID(kThisSimpleURIImplementationCID,
                      NS_THIS_SIMPLEURI_IMPLEMENTATION_CID);
 
@@ -302,6 +306,57 @@
     return NS_OK;
 }
 
+#ifdef XSS /* XSS */
+NS_IMETHODIMP
+nsSimpleURI::DomainEquals(nsIURI *unknownOther, PRBool *result)
+{
+    NS_ENSURE_ARG_POINTER(unknownOther);
+    NS_PRECONDITION(result, "null pointer");
+
+    nsSimpleURI* other;
+    nsresult rv =
+        unknownOther->QueryInterface(kThisSimpleURIImplementationCID,
+                                (void**)other);
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+
+	nsCAutoString thisHost, otherHost;
+	
+	// get the host strings
+	rv = this->GetAsciiHost(thisHost);
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+	rv = other->GetAsciiHost(otherHost);
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+
+	// compare the two host strings
+	if (!domainStrEquals(thisHost, otherHost)) {
+        *result = PR_FALSE;
+        return NS_OK;
+	}
+
+    NS_RELEASE(other);
+	*result = PR_TRUE;    
+	return NS_OK;
+}
+
+NS_IMETHODIMP
+nsSimpleURI::GetDomain(nsACString &result)
+{
+    result = getDomainFromURI(this);
+    return NS_OK;
+}
+
+#endif /* XSS */
+
+
 NS_IMETHODIMP
 nsSimpleURI::SchemeIs(const char *i_Scheme, PRBool *o_Equals)
 {
Index: mozilla-src/mozilla/netwerk/base/src/nsStandardURL.cpp
diff -u mozilla-src/mozilla/netwerk/base/src/nsStandardURL.cpp:1.1 mozilla-src/mozilla/netwerk/base/src/nsStandardURL.cpp:1.4
--- mozilla-src/mozilla/netwerk/base/src/nsStandardURL.cpp:1.1	Sat Nov 13 12:47:33 2004
+++ mozilla-src/mozilla/netwerk/base/src/nsStandardURL.cpp	Tue Feb  7 15:19:30 2006
@@ -53,6 +53,10 @@
 #include "nsNetUtil.h"
 #include "prlog.h"
 
+#ifdef XSS /* XSS */
+#include "../../../js/src/xsstaint.h"
+#endif /* XSS */
+
 static NS_DEFINE_CID(kThisImplCID, NS_THIS_STANDARDURL_IMPL_CID);
 static NS_DEFINE_CID(kStandardURLCID, NS_STANDARDURL_CID);
 
@@ -1029,6 +1033,18 @@
         LOG((" ref       = (%u,%d)\n", mRef.mPos,       mRef.mLen));
     }
 #endif
+#ifdef XSS /* XSS */
+	if (input.xssGetTainted() == XSS_TAINTED)
+	{
+		XSS_LOG("xsstaintstring nsStandardURL::SetSpec: %s\n",
+			ToNewCString(
+			NS_LITERAL_STRING("'") +
+			NS_ConvertUTF8toUTF16(mSpec) +
+			NS_LITERAL_STRING("' ") +
+			NS_ConvertUTF8toUTF16(input)));
+	} while (0);
+	mSpec.xssSetTainted(input.xssGetTainted());
+#endif /* XSS */
     return rv;
 }
 
@@ -1455,6 +1471,54 @@
     return NS_OK;
 }
 
+#ifdef XSS /* XSS */
+NS_IMETHODIMP
+nsStandardURL::DomainEquals(nsIURI *unknownOther, PRBool *result)
+{
+    NS_ENSURE_ARG_POINTER(unknownOther);
+    NS_PRECONDITION(result, "null pointer");
+
+    nsStandardURL *other;
+    nsresult rv = unknownOther->QueryInterface(kThisImplCID, (void **) &other);
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+
+	nsCAutoString thisHost, otherHost;
+
+	// get the host strings
+	rv = this->GetAsciiHost(thisHost);
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+	rv = other->GetAsciiHost(otherHost);
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+
+	// compare the two host strings
+	if (!domainStrEquals(thisHost, otherHost)) {
+        *result = PR_FALSE;
+        return NS_OK;
+	}
+
+    NS_RELEASE(other);
+	*result = PR_TRUE;
+    return NS_OK;
+}
+
+NS_IMETHODIMP
+nsStandardURL::GetDomain(nsACString &result)
+{
+    result = getDomainFromURI(this);
+    return NS_OK;
+}
+
+#endif /* XSS */
+
 NS_IMETHODIMP
 nsStandardURL::SchemeIs(const char *scheme, PRBool *result)
 {
Index: mozilla-src/mozilla/netwerk/base/src/nsXSSHostConnectPermissionManager.cpp
diff -u /dev/null mozilla-src/mozilla/netwerk/base/src/nsXSSHostConnectPermissionManager.cpp:1.1
--- /dev/null	Sun Mar 19 00:44:14 2006
+++ mozilla-src/mozilla/netwerk/base/src/nsXSSHostConnectPermissionManager.cpp	Tue Nov 22 18:18:07 2005
@@ -0,0 +1,508 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: NPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Netscape Public License
+ * Version 1.1 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/NPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is mozilla.org code.
+ *
+ * The Initial Developer of the Original Code is 
+ * Netscape Communications Corporation.
+ * Portions created by the Initial Developer are Copyright (C) 1998
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Michiel van Leeuwen (mvl@exedo.nl)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the NPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the NPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include "nsXSSHostConnectPermissionManager.h"
+#include "nsCRT.h"
+#include "nsNetUtil.h"
+#include "nsILineInputStream.h"
+#include "nsAppDirectoryServiceDefs.h"
+#include "prprf.h"
+
+//#include "nsIInputstream.h"
+//#include "nsIOutputStream.h"
+
+
+////////////////////////////////////////////////////////////////////////////////
+// nsXSSHostTableHashEntry Implementation
+
+// constructor for the hashtable entries that initializes the internal hashtable
+nsXSSHostTableHashEntry::nsXSSHostTableHashEntry()
+{
+	mTable.Init();
+}
+////////////////////////////////////////////////////////////////////////////////
+// nsXSSHostConnectPermissionManager Implementation
+
+// the name of the file with the permissions
+static const char kPermissionsFileName[] = "xsshostconnectperm.1";
+
+// writes the file after this miliseconds. multiple writes are combined
+static const PRUint32 kLazyWriteTimeout = 2000; //msec
+
+// implemented interfaces
+NS_IMPL_ISUPPORTS2(nsXSSHostConnectPermissionManager, nsIXSSHostConnectPermissionManager, nsISupportsWeakReference)
+
+// Constructor for a new object. Ensure that Init() is called before using
+// the object.
+nsXSSHostConnectPermissionManager::nsXSSHostConnectPermissionManager()
+ : mHostCount(0),
+   mChangedList(PR_FALSE)
+{
+}
+
+// Destructor stops the timer and empties the hashtable
+nsXSSHostConnectPermissionManager::~nsXSSHostConnectPermissionManager()
+{
+  if (mWriteTimer)
+    mWriteTimer->Cancel();
+
+  RemoveAllFromMemory();
+}
+
+// initialize the hashtable, open the file and read the contents
+nsresult nsXSSHostConnectPermissionManager::Init()
+{
+  nsresult rv;
+
+  if (!mHostTable.Init()) {
+    return NS_ERROR_OUT_OF_MEMORY;
+  }
+
+  // Cache the permissions file
+  rv = NS_GetSpecialDirectory(NS_APP_USER_PROFILE_50_DIR, getter_AddRefs(mPermissionsFile));
+  if (NS_SUCCEEDED(rv)) {
+    rv = mPermissionsFile->AppendNative(NS_LITERAL_CSTRING(kPermissionsFileName));
+  }
+
+  // Ignore an error. That is not a problem. No cookperm.txt usually.
+  Read();
+
+  return NS_OK;
+}
+
+
+/**
+ * Creates a new instance and initializes it
+ */
+NS_METHOD
+nsXSSHostConnectPermissionManager::Create(nsISupports* outer, const nsIID& aIID, void* *aInstancePtr)
+{
+    NS_ENSURE_NO_AGGREGATION(outer);
+    nsXSSHostConnectPermissionManager* serv = new nsXSSHostConnectPermissionManager();
+    if (serv == nsnull)
+        return NS_ERROR_OUT_OF_MEMORY;
+    NS_ADDREF(serv);
+    nsresult rv = serv->QueryInterface(aIID, aInstancePtr);
+	serv->Init();
+    NS_RELEASE(serv);
+    return rv;
+}
+
+/**
+ * Add permission information for two given hosts and permission type. 
+ *
+ * @param fromHost    the host from which the connection starts
+ * @param toHost      the target host of the connection
+ * @param permission  allow (ALLOW_CONNECT) or deny (DENY_CONNECT) this 
+ *                    host combination
+ */
+NS_IMETHODIMP
+nsXSSHostConnectPermissionManager::Add(const nsACString &fromHost,
+									   const nsACString &toHost,
+									   PRUint32 permission)
+{
+	nsXSSHostTableHashEntry *mEntry;
+	nsInt32HashSet* permissionset;
+
+	mHostTable.Get(fromHost, &mEntry);
+	if (!mEntry) {
+		mEntry = new nsXSSHostTableHashEntry();
+		mHostTable.Put(fromHost, mEntry);
+	}
+	mEntry->mTable.Get(toHost, &permissionset);
+	if (!permissionset) {
+		permissionset = new nsInt32HashSet();
+		permissionset->Init(3);
+		mEntry->mTable.Put(toHost, permissionset);
+		++mHostCount;
+	}
+	permissionset->Put(permission);
+
+	mChangedList = PR_TRUE;
+	LazyWrite();
+	return NS_OK;
+}
+
+/**
+ * Test whether the two hosts are allowed to connect
+ * @param fromHost    the host from which the connection starts
+ * @param toHost      the target host of the connection
+ * @param return      ALLOW_CONNECT if the connection is allowed, 
+ *                    ALLOW_DENY if it is forbidden or ALLOW_UNKOWN
+ *                    if there is no rule for this connection.
+ */
+NS_IMETHODIMP
+nsXSSHostConnectPermissionManager::TestPermission(const nsACString &fromHost,
+												  const nsACString &toHost,
+												  PRUint32   *aPermission)
+{
+	NS_ASSERTION(aPermission, "no permission pointer");
+
+	// set the default
+	*aPermission = nsIXSSHostConnectPermissionManager::UNKNOWN_CONNECT;
+
+	nsXSSHostTableHashEntry *mEntry;
+	nsInt32HashSet* permissionset;
+
+	mHostTable.Get(fromHost, &mEntry);
+	if (mEntry) {
+		mEntry->mTable.Get(toHost, &permissionset);
+		if (permissionset) {
+			if (permissionset->Contains(nsIXSSHostConnectPermissionManager::ALLOW_CONNECT)) 
+				*aPermission = nsIXSSHostConnectPermissionManager::ALLOW_CONNECT;
+			if (permissionset->Contains(nsIXSSHostConnectPermissionManager::DENY_CONNECT)) 
+				*aPermission = nsIXSSHostConnectPermissionManager::DENY_CONNECT;
+		}
+	}
+
+	return NS_OK;
+}
+
+//*****************************************************************************
+//*** nsXSSHostConnectPermissionManager private methods
+//*****************************************************************************
+
+/**
+ * Callback to count the number of entries
+ * @param aKey        the key of the entry
+ * @param aData       the value of the entry
+ * @param userArg     not used here
+ */
+PR_STATIC_CALLBACK(PLDHashOperator)
+nsXSSEnumCount(const nsACString& aKey, nsXSSHostTableHashEntry* aData, void* userArg) {
+	return PL_DHASH_NEXT;
+}
+
+/**
+ * Callback to count the number of entries
+ * @param aKey        the key of the entry
+ * @param aData       the value of the entry
+ * @param userArg     not used here
+ */
+PR_STATIC_CALLBACK(PLDHashOperator)
+nsXSSEnumCountHashsets(const nsACString& aKey, nsInt32HashSet* aData, void* userArg) {
+	return PL_DHASH_NEXT;
+}
+
+/**
+ * Callback to clear the entries
+ *
+ * @param aKey        the key of the entry
+ * @param aData       the value of the entry
+ * @param userArg     not used here
+ */
+PR_STATIC_CALLBACK(PLDHashOperator)
+nsXSSEnumClear(const nsACString& aKey, nsXSSHostTableHashEntry* aData, void* userArg) {
+
+	if (aData) {
+		aData->mTable.Clear();
+	}
+	return PL_DHASH_NEXT;
+}
+
+/**
+ * A helper function that adds the pointer to the entry to the list.
+ * This is not threadsafe, and only safe if the consumer does not 
+ * modify the list. It is only used in Write() where we are sure
+ * that nothing else changes the list while we are saving.
+ *
+ * @param aKey        the key of the entry
+ * @param aData       the value of the entry
+ * @param userArg     not used here
+ */
+PR_STATIC_CALLBACK(PLDHashOperator)
+nsXSSEnumAddEntryToList(const nsACString& aKey, nsXSSHostTableHashEntry* aData, void *arg)
+{
+  // add the key to the list
+  nsACString*** elementPtr = NS_STATIC_CAST(nsACString***, arg);
+  **elementPtr = (nsACString*)&aKey;
+  ++(*elementPtr);
+  return PL_DHASH_NEXT;
+}
+
+/**
+ * A helper function that adds the pointer to the entry to the list.
+ * This is not threadsafe, and only safe if the consumer does not 
+ * modify the list. It is only used in Write() where we are sure
+ * that nothing else changes the list while we are saving.
+ *
+ * @param aKey        the key of the entry
+ * @param aData       the value of the entry
+ * @param userArg     not used here
+ */
+PR_STATIC_CALLBACK(PLDHashOperator)
+nsXSSEnumAddEntryToListHashsets(const nsACString& aKey, nsInt32HashSet* aData, void* arg) {
+
+  // add the key to the list
+  nsACString*** elementPtr = NS_STATIC_CAST(nsACString***, arg);
+  **elementPtr = (nsACString*)&aKey;
+  ++(*elementPtr);
+  return PL_DHASH_NEXT;
+}
+
+
+/**
+ * Removes all entries from the memory
+ */
+nsresult
+nsXSSHostConnectPermissionManager::RemoveAllFromMemory()
+{
+  PRUint32 count = mHostTable.EnumerateRead(nsXSSEnumClear, nsnull);
+  mHostTable.Clear();
+  mHostCount = 0;
+  mChangedList = PR_TRUE;
+  return NS_OK;
+}
+
+// used as a seperator in a line in the file
+static const char kTab = '\t';
+// used as a line terminator
+static const char kNew = '\n';
+
+/**
+ * Reads the content of the file and stores it in the hash.
+ * 
+ * format is:
+ * fromHost \t toHost \t permission \n
+ *
+ * empty lines, lines that start with # or lines with too few
+ * arguments are ignored.
+ */
+nsresult
+nsXSSHostConnectPermissionManager::Read()
+{
+	nsresult rv;
+
+	// get a stream for the permissionfile
+	nsCOMPtr<nsIInputStream> fileInputStream;
+	rv = NS_NewLocalFileInputStream(getter_AddRefs(fileInputStream), mPermissionsFile);
+	NS_ENSURE_SUCCESS(rv, rv);
+	nsCOMPtr<nsILineInputStream> lineInputStream = do_QueryInterface(fileInputStream, &rv);
+	NS_ENSURE_SUCCESS(rv, rv);
+
+	nsCAutoString buffer;
+	PRBool isMore = PR_TRUE;
+
+	// read to the end of the file
+	while (isMore && NS_SUCCEEDED(lineInputStream->ReadLine(buffer, &isMore))) {
+		// filter the empty and comment lines
+		if (buffer.IsEmpty() || buffer.First() == '#') {
+			continue;
+		}
+
+		nsCStringArray lineArray;
+
+		// Split the line at tabs
+		lineArray.ParseString(buffer.get(), "\t");
+
+		// we need 3 parts, ignore the rest
+		if (lineArray.Count() == 3) {
+
+			// last part is the permission
+			PRInt32 error;
+			PRUint32 permission = lineArray[2]->ToInteger(&error);
+			if (error)
+				continue;
+
+			// add the tupel to the permissionlist
+			rv = Add(*lineArray[0], *lineArray[1], permission);
+			NS_ENSURE_SUCCESS(rv, rv);
+
+		}
+	}
+
+	mChangedList = PR_FALSE;
+
+	return NS_OK;
+}
+
+/**
+ * Starts a timer that delays the write.
+ */
+void
+nsXSSHostConnectPermissionManager::LazyWrite()
+{
+  if (mWriteTimer) {
+    mWriteTimer->SetDelay(kLazyWriteTimeout);
+  } else {
+    mWriteTimer = do_CreateInstance("@mozilla.org/timer;1");
+    if (mWriteTimer) {
+      mWriteTimer->InitWithFuncCallback(DoLazyWrite, this, kLazyWriteTimeout,
+                                        nsITimer::TYPE_ONE_SHOT);
+    }
+  }
+}
+
+/**
+ * Callback that is called from the timer and writes the hash to the file
+ * 
+ * @param aTimer    the Timer that called the function
+ * @param aClosure  the permissionmanager that called it.
+ */
+void
+nsXSSHostConnectPermissionManager::DoLazyWrite(nsITimer *aTimer,
+                                 void     *aClosure)
+{
+  nsXSSHostConnectPermissionManager *service = NS_REINTERPRET_CAST(nsXSSHostConnectPermissionManager*, aClosure);
+  service->Write();
+  service->mWriteTimer = 0;
+}
+
+/**
+ * Writes the permission to the file
+ */
+nsresult
+nsXSSHostConnectPermissionManager::Write()
+{
+  nsresult rv;
+
+  // nothing changed, so nothing to do
+  if (!mChangedList) {
+    return NS_OK;
+  }
+
+  // only write, if we have a file
+  if (!mPermissionsFile) {
+    return NS_ERROR_FAILURE;
+  }
+
+  // get outputstream
+  nsCOMPtr<nsIOutputStream> fileOutputStream;
+  rv = NS_NewSafeLocalFileOutputStream(getter_AddRefs(fileOutputStream),
+                                       mPermissionsFile,
+                                       -1,
+                                       0600);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  // get a buffered output stream 4096 bytes big, to optimize writes
+  nsCOMPtr<nsIOutputStream> bufferedOutputStream;
+  rv = NS_NewBufferedOutputStream(getter_AddRefs(bufferedOutputStream), fileOutputStream, 4096);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  // the header in the file
+  static const char kHeader[] = 
+    "# XSS host connect permission file\n"
+    "# This is a generated file! Do not edit.\n\n";
+
+  bufferedOutputStream->Write(kHeader, sizeof(kHeader) - 1, &rv);
+
+  // write file!
+
+  /* format is:
+   * fromHost \t toHost \t permission
+   */
+
+  // get all fromHostnames
+  PRUint32 countFromHost = mHostTable.EnumerateRead(nsXSSEnumCount, nsnull);
+  nsACString* *fromHostNameList = new nsACString*[countFromHost];
+  if (!fromHostNameList) return NS_ERROR_OUT_OF_MEMORY;
+
+  nsACString** fromHostNameListCopy = fromHostNameList;
+  mHostTable.EnumerateRead(nsXSSEnumAddEntryToList, &fromHostNameListCopy);
+
+  // first loop through all fromHostnames
+  PRUint32 i;
+  for (i = 0; i < countFromHost; ++i) {
+	  nsACString *fromHostName = NS_STATIC_CAST(nsACString*, fromHostNameList[i]);
+
+	  nsXSSHostTableHashEntry *mEntry;
+	  mHostTable.Get(*fromHostName, &mEntry);
+
+	  // there is an entry, so process it
+	  if (mEntry) {
+
+		  // get all toHostnames
+		  PRUint32 countToHost = mEntry->mTable.EnumerateRead(nsXSSEnumCountHashsets, nsnull);
+		  nsACString* *toHostNameList = new nsACString*[countToHost];
+		  if (!toHostNameList) return NS_ERROR_OUT_OF_MEMORY;
+
+		  nsACString** toHostNameListCopy = toHostNameList;
+		  mEntry->mTable.EnumerateRead(nsXSSEnumAddEntryToListHashsets, &toHostNameListCopy);
+
+		  // now loop through all toHostnames
+		  PRUint32 j;
+		  for (j = 0; j < countToHost; ++j) {
+			  nsACString *toHostName = NS_STATIC_CAST(nsACString*, toHostNameList[j]);
+
+			  mHostTable.Get(*fromHostName, &mEntry);
+			  nsInt32HashSet* permissionset;
+
+			  // get the permissions
+			  mEntry->mTable.Get(*toHostName, &permissionset);
+			  if (permissionset) {
+
+				  // all informations to write are present, so write them
+				  bufferedOutputStream->Write(PromiseFlatCString(*fromHostName).get(), fromHostName->Length(), &rv);
+				  bufferedOutputStream->Write(&kTab, 1, &rv);
+
+				  bufferedOutputStream->Write(PromiseFlatCString(*toHostName).get(), toHostName->Length(), &rv);
+				  bufferedOutputStream->Write(&kTab, 1, &rv);
+
+				  char permissionString[5];
+				  if (permissionset->Contains(nsIXSSHostConnectPermissionManager::ALLOW_CONNECT)) {
+					  PRUint32 len = PR_snprintf(permissionString, sizeof(permissionString) - 1, "%u", nsIXSSHostConnectPermissionManager::ALLOW_CONNECT);
+					  bufferedOutputStream->Write(permissionString, len, &rv);
+				  }
+				  if (permissionset->Contains(nsIXSSHostConnectPermissionManager::DENY_CONNECT)) {
+					  PRUint32 len = PR_snprintf(permissionString, sizeof(permissionString) - 1, "%u", nsIXSSHostConnectPermissionManager::DENY_CONNECT);
+					  bufferedOutputStream->Write(permissionString, len, &rv);
+				  }
+
+				  bufferedOutputStream->Write(&kNew, 1, &rv);
+			  }
+		  }
+		  delete[] toHostNameList;
+	  }
+  }
+  delete[] fromHostNameList;
+
+  // All went ok. Maybe except for problems in Write(), but the stream detects
+  // that for us
+  nsCOMPtr<nsISafeOutputStream> safeStream = do_QueryInterface(bufferedOutputStream);
+  NS_ASSERTION(safeStream, "expected a safe output stream!");
+  if (safeStream) {
+    rv = safeStream->Finish();
+    if (NS_FAILED(rv)) {
+      NS_WARNING("failed to save permissions file! possible dataloss");
+      return rv;
+    }
+  }
+
+  mChangedList = PR_FALSE;
+  return NS_OK;
+}
Index: mozilla-src/mozilla/netwerk/base/src/nsXSSHostConnectPermissionManager.h
diff -u /dev/null mozilla-src/mozilla/netwerk/base/src/nsXSSHostConnectPermissionManager.h:1.1
--- /dev/null	Sun Mar 19 00:44:14 2006
+++ mozilla-src/mozilla/netwerk/base/src/nsXSSHostConnectPermissionManager.h	Tue Nov 22 18:18:07 2005
@@ -0,0 +1,101 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: NPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Netscape Public License
+ * Version 1.1 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/NPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is mozilla.org code.
+ *
+ * The Initial Developer of the Original Code is 
+ * Netscape Communications Corporation.
+ * Portions created by the Initial Developer are Copyright (C) 1998
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the NPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the NPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#ifndef nsXSSHostConnectPermissionManager_h__
+#define nsXSSHostConnectPermissionManager_h__
+
+#include "nsIXSSHostConnectPermissionManager.h"
+#include "nsWeakReference.h"
+#include "nsCOMPtr.h"
+#include "nsVoidArray.h"
+#include "nsIFile.h"
+#include "nsTHashtable.h"
+#include "nsString.h"
+#include "nsITimer.h"
+#include "nsClassHashtable.h"
+#include "nsHashSets.h"
+
+////////////////////////////////////////////////////////////////////////////////
+
+class nsXSSHostTableHashEntry {
+
+public:
+	nsClassHashtable<nsCStringHashKey, nsInt32HashSet> mTable;
+
+	nsXSSHostTableHashEntry();
+};
+
+
+class nsXSSHostConnectPermissionManager : public nsIXSSHostConnectPermissionManager,
+	public nsSupportsWeakReference
+{
+public:
+
+  // nsISupports
+  NS_DECL_ISUPPORTS
+  NS_DECL_NSIXSSHOSTCONNECTPERMISSIONMANAGER
+
+  nsXSSHostConnectPermissionManager();
+  virtual ~nsXSSHostConnectPermissionManager();
+  nsresult Init();
+
+  static NS_METHOD
+	  Create(nsISupports* outer, const nsIID& aIID, void* *aInstancePtr);
+
+private:
+
+	// Use LazyWrite to save the permissions file on a timer. It will write
+	// the file only once if repeatedly hammered quickly.
+	void        LazyWrite();
+	static void DoLazyWrite(nsITimer *aTimer, void *aClosure);
+	nsresult    Write();
+
+	nsresult Read();
+	nsresult RemoveAllFromMemory();
+
+	nsCOMPtr<nsIFile>            mPermissionsFile;
+	nsCOMPtr<nsITimer>           mWriteTimer;
+	nsClassHashtable<nsCStringHashKey, nsXSSHostTableHashEntry> mHostTable;
+
+	PRUint32                     mHostCount;
+	PRPackedBool                 mChangedList;
+	PRPackedBool                 mHasUnknownTypes;
+
+};
+
+#endif /* nsXSSHostConnectPermissionManager_h__ */
Index: mozilla-src/mozilla/netwerk/build/nsNetModule.cpp
diff -u mozilla-src/mozilla/netwerk/build/nsNetModule.cpp:1.1 mozilla-src/mozilla/netwerk/build/nsNetModule.cpp:1.2
--- mozilla-src/mozilla/netwerk/build/nsNetModule.cpp:1.1	Sat Nov 13 12:47:41 2004
+++ mozilla-src/mozilla/netwerk/build/nsNetModule.cpp	Tue Nov 22 18:18:26 2005
@@ -107,6 +107,11 @@
 
 NS_GENERIC_FACTORY_CONSTRUCTOR(nsSafeFileOutputStream)
 
+#ifdef XSS /* XSS */
+#include "nsXSSHostConnectPermissionManager.h"
+NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(nsXSSHostConnectPermissionManager, Init)
+#endif /* XSS */
+
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "nsStreamConverterService.h"
@@ -1051,6 +1056,13 @@
       nsCookieServiceConstructor
     },
 #endif
+#ifdef XSS /* XSS */
+    { NS_XSSHOSTCONNECTPERMISSIONMANAGER_CLASSNAME,
+      NS_XSSHOSTCONNECTPERMISSIONMANAGER_CID,
+      NS_XSSHOSTCONNECTPERMISSIONMANAGER_CONTRACTID,
+      nsXSSHostConnectPermissionManager::Create
+    },
+#endif /* XSS */
 
 };
 
Index: mozilla-src/mozilla/netwerk/protocol/jar/src/nsJARURI.cpp
diff -u mozilla-src/mozilla/netwerk/protocol/jar/src/nsJARURI.cpp:1.1 mozilla-src/mozilla/netwerk/protocol/jar/src/nsJARURI.cpp:1.3
--- mozilla-src/mozilla/netwerk/protocol/jar/src/nsJARURI.cpp:1.1	Sat Nov 13 12:47:36 2004
+++ mozilla-src/mozilla/netwerk/protocol/jar/src/nsJARURI.cpp	Tue Feb  7 15:18:24 2006
@@ -330,6 +330,55 @@
     return rv;
 }
 
+#ifdef XSS /* XSS */
+NS_IMETHODIMP
+nsJARURI::DomainEquals(nsIURI *unknownOther, PRBool *result)
+{
+    NS_ENSURE_ARG_POINTER(unknownOther);
+    NS_PRECONDITION(result, "null pointer");
+
+    nsresult rv;
+
+    nsCOMPtr<nsIJARURI> other(do_QueryInterface(unknownOther, &rv));
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+
+	nsCAutoString thisHost, otherHost;
+
+	// get the host strings
+	rv = this->GetAsciiHost(thisHost);
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+	rv = other->GetAsciiHost(otherHost);
+    if (NS_FAILED(rv)) {
+        *result = PR_FALSE;
+        return NS_OK;
+    }
+
+	// compare the two host strings
+	if (!domainStrEquals(thisHost, otherHost)) {
+        *result = PR_FALSE;
+        return NS_OK;
+	}
+
+	*result = PR_TRUE;    
+    return NS_OK;
+}
+
+NS_IMETHODIMP
+nsJARURI::GetDomain(nsACString &result)
+{
+    result = getDomainFromURI(this);
+    return NS_OK;
+}
+
+#endif /* XSS */
+
+
 NS_IMETHODIMP
 nsJARURI::SchemeIs(const char *i_Scheme, PRBool *o_Equals)
 {
Index: mozilla-src/mozilla/nsprpub/configure.in
diff -u mozilla-src/mozilla/nsprpub/configure.in:1.1 mozilla-src/mozilla/nsprpub/configure.in:1.2
--- mozilla-src/mozilla/nsprpub/configure.in:1.1	Sat Nov 13 12:48:22 2004
+++ mozilla-src/mozilla/nsprpub/configure.in	Wed Dec 14 14:59:59 2005
@@ -72,6 +72,9 @@
 dnl Link in libraries necessary to resolve all symbols for shared libs
 RESOLVE_LINK_SYMBOLS=
 
+
+DEFINES="$DEFINES -DXSS=1"
+
 dnl ========================================================
 dnl =
 dnl = Dont change the following lines.  Doing so breaks:
Index: mozilla-src/mozilla/nsprpub/config/autoconf.mk.in
diff -u mozilla-src/mozilla/nsprpub/config/autoconf.mk.in:1.1 mozilla-src/mozilla/nsprpub/config/autoconf.mk.in:1.2
--- mozilla-src/mozilla/nsprpub/config/autoconf.mk.in:1.1	Sat Nov 13 12:48:15 2004
+++ mozilla-src/mozilla/nsprpub/config/autoconf.mk.in	Wed Dec 14 14:59:49 2005
@@ -88,7 +88,7 @@
 HOST_CC		= @HOST_CC@
 HOST_CFLAGS	= @HOST_CFLAGS@
 
-DEFINES		= @DEFINES@ @DEFS@
+DEFINES		= @DEFINES@ -DXSS=1 @DEFS@
 
 MDCPUCFG_H	= @MDCPUCFG_H@
 PR_MD_CSRCS	= @PR_MD_CSRCS@
Index: mozilla-src/mozilla/nsprpub/config/config.mk
diff -u mozilla-src/mozilla/nsprpub/config/config.mk:1.1 mozilla-src/mozilla/nsprpub/config/config.mk:1.2
--- mozilla-src/mozilla/nsprpub/config/config.mk:1.1	Sat Nov 13 12:48:15 2004
+++ mozilla-src/mozilla/nsprpub/config/config.mk	Wed Dec 14 14:59:38 2005
@@ -32,6 +32,8 @@
 # GPL.
 # 
 
+DEFINES		+= -DXSS=1
+
 # Configuration information for building in the NSPR source module
 
 # Define an include-at-most-once-flag
Index: mozilla-src/mozilla/nsprpub/pr/include/prlog.h
diff -u mozilla-src/mozilla/nsprpub/pr/include/prlog.h:1.1 mozilla-src/mozilla/nsprpub/pr/include/prlog.h:1.3
--- mozilla-src/mozilla/nsprpub/pr/include/prlog.h:1.1	Sat Nov 13 12:48:19 2004
+++ mozilla-src/mozilla/nsprpub/pr/include/prlog.h	Wed Dec 21 21:15:30 2005
@@ -186,6 +186,13 @@
 */
 NSPR_API(void) PR_LogFlush(void);
 
+#ifdef XSS /* XSS */
+NSPR_API(int) PR_XSS_DEBUG_LOG();
+NSPR_API(void) PR_XSS_SET_DEBUG_LOG(int newval);
+NSPR_API(void) PR_XSS_SET_DEBUG_FILENAME(char *filename);
+NSPR_API(char*) PR_XSS_GET_DEBUG_FILENAME();
+#endif /* XSS */
+
 /*
 ** Windoze 16 can't support a large static string space for all of the
 ** various debugging strings so logging is not enabled for it.
Index: mozilla-src/mozilla/nsprpub/pr/src/io/prlog.c
diff -u mozilla-src/mozilla/nsprpub/pr/src/io/prlog.c:1.1 mozilla-src/mozilla/nsprpub/pr/src/io/prlog.c:1.3
--- mozilla-src/mozilla/nsprpub/pr/src/io/prlog.c:1.1	Sat Nov 13 12:48:21 2004
+++ mozilla-src/mozilla/nsprpub/pr/src/io/prlog.c	Wed Dec 21 21:15:30 2005
@@ -497,6 +497,33 @@
     abort();
 }
 
+#ifdef XSS /* XSS */
+static int DEBUG_XSS_LOG = 0;
+static char *DEBUG_XSS_FILENAME = "";
+
+PR_IMPLEMENT(int)
+PR_XSS_DEBUG_LOG() {
+	return DEBUG_XSS_LOG;
+}
+
+PR_IMPLEMENT(void)
+PR_XSS_SET_DEBUG_LOG(int newval) {
+	DEBUG_XSS_LOG = newval;
+}
+
+PR_IMPLEMENT(void)
+PR_XSS_SET_DEBUG_FILENAME(char *filename) {
+	DEBUG_XSS_FILENAME = filename;
+}
+
+PR_IMPLEMENT(char*)
+PR_XSS_GET_DEBUG_FILENAME() {
+	return DEBUG_XSS_FILENAME;
+}
+
+#endif /* XSS */
+
+
 #if defined(XP_OS2)
 /*
  * Added definitions for DebugBreak() for 2 different OS/2 compilers.
Index: mozilla-src/mozilla/toolkit/components/typeaheadfind/src/Makefile.in
diff -u mozilla-src/mozilla/toolkit/components/typeaheadfind/src/Makefile.in:1.1 mozilla-src/mozilla/toolkit/components/typeaheadfind/src/Makefile.in:1.2
--- mozilla-src/mozilla/toolkit/components/typeaheadfind/src/Makefile.in:1.1	Sat Nov 13 12:55:25 2004
+++ mozilla-src/mozilla/toolkit/components/typeaheadfind/src/Makefile.in	Fri Nov 25 18:40:23 2005
@@ -59,6 +59,7 @@
 		  windowwatcher \
 		  xpcom \
 		  xuldoc \
+		  js \
 		  $(NULL)
 
 CPPSRCS =   \
Index: mozilla-src/mozilla/toolkit/locales/en-US/chrome/global/commonDialogs.properties
diff -u mozilla-src/mozilla/toolkit/locales/en-US/chrome/global/commonDialogs.properties:1.1 mozilla-src/mozilla/toolkit/locales/en-US/chrome/global/commonDialogs.properties:1.2
--- mozilla-src/mozilla/toolkit/locales/en-US/chrome/global/commonDialogs.properties:1.1	Sat Nov 13 12:55:13 2004
+++ mozilla-src/mozilla/toolkit/locales/en-US/chrome/global/commonDialogs.properties	Mon Nov 14 16:49:14 2005
@@ -9,6 +9,9 @@
 Cancel=Cancel
 Yes=&Yes
 No=&No
+Yesalways=&Always Yes
+Noalways=Al&ways No
+ConfirmExXSS=Allow connection from host "%S" to host "%S"
 Save=&Save
 Revert=&Revert
 DontSave=&Don't Save
Index: mozilla-src/mozilla/toolkit/xre/nsWindowCreator.cpp
diff -u /dev/null mozilla-src/mozilla/toolkit/xre/nsWindowCreator.cpp:1.1
--- /dev/null	Sun Mar 19 00:44:46 2006
+++ mozilla-src/mozilla/toolkit/xre/nsWindowCreator.cpp	Sun Feb  5 14:33:34 2006
@@ -0,0 +1,148 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: NPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Netscape Public License
+ * Version 1.1 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/NPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is mozilla.org code.
+ *
+ * The Initial Developer of the Original Code is 
+ * Netscape Communications Corporation.
+ * Portions created by the Initial Developer are Copyright (C) 2001
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or 
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the NPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the NPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+/* There are several ways to open a new window in Mozilla: directly, using
+   nsAppShellService; indirectly, using the Open method on an extant
+   window, the OpenWindow method on the nsWindowWatcher service, and this
+   WindowCreator. I think that's all of them, for petessake.  But
+   the conditions under which each should be used are definite, if
+   not clear, and there is no overlap.
+
+   Basically, you should never use nsAppShellService. That's the basic
+   method that all others boil down to, and it creates partially initialized
+   windows. Trust the other means of opening windows to use nsAppShellService
+   and then finish the new window's initialization. nsAppShellService is
+   also strictly a Mozilla-only service; it's unavailable (or should be)
+   to embedding apps. So it's not merely inadvisable but also illegal
+   for any code that may execute in an embedding context to use that service.
+
+   Unless you're writing window opening code yourself, you want to use
+   the Open method on an extant window, or lacking one of those, the
+   OpenWindow method on the nsWindowWatcher service. (The former calls
+   through to the latter.) Both methods are equally at home in Mozilla
+   and embedding contexts. They differentiate between which kind of window
+   to open in different ways, depending on whether there is an extant
+   window.
+
+   Lacking an extant window, it's this object, the nsWindowCreator,
+   that allows new window creation and properly distinguishes between
+   Mozilla and embedding contexts. This source file contains the
+   Mozilla version, which calls through to nsAppShellService.
+*/
+
+#include "nsCOMPtr.h"
+#include "nsAppShellCIDs.h"
+#include "nsWidgetsCID.h"
+#include "nsWindowCreator.h"
+
+#include "nsIAppShell.h"
+#include "nsIAppShellService.h"
+#include "nsIInterfaceRequestor.h"
+#include "nsIInterfaceRequestorUtils.h"
+#include "nsIServiceManager.h"
+#include "nsIURI.h"
+#include "nsIXULWindow.h"
+#include "nsIWebBrowserChrome.h"
+
+static NS_DEFINE_CID(kAppShellServiceCID, NS_APPSHELL_SERVICE_CID);
+
+nsWindowCreator::nsWindowCreator() {
+}
+
+nsWindowCreator::~nsWindowCreator() {
+}
+
+NS_IMPL_ISUPPORTS2(nsWindowCreator, nsIWindowCreator, nsIWindowCreator2)
+
+NS_IMETHODIMP
+nsWindowCreator::CreateChromeWindow(nsIWebBrowserChrome *aParent,
+                                    PRUint32 aChromeFlags,
+                                    nsIWebBrowserChrome **_retval)
+{
+  PRBool cancel;
+  return CreateChromeWindow2(aParent, aChromeFlags, 0, 0, &cancel, _retval);
+}
+
+NS_IMETHODIMP
+nsWindowCreator::CreateChromeWindow2( nsIWebBrowserChrome *aParent,
+                                      PRUint32 aChromeFlags,
+                                      PRUint32 aContextFlags,
+                                      nsIURI *aURI,
+                                      PRBool *aCancel,
+                                      nsIWebBrowserChrome **_retval)
+{
+  NS_ENSURE_ARG_POINTER(aCancel);
+  NS_ENSURE_ARG_POINTER(_retval);
+  *aCancel = PR_FALSE;
+  *_retval = 0;
+
+  nsCOMPtr<nsIXULWindow> newWindow;
+
+  if (aParent) {
+    nsCOMPtr<nsIXULWindow> xulParent(do_GetInterface(aParent));
+    NS_ASSERTION(xulParent, "window created using non-XUL parent. that's unexpected, but may work.");
+
+    if (xulParent)
+      xulParent->CreateNewWindow(aChromeFlags, getter_AddRefs(newWindow));
+    // And if it fails, don't try again without a parent. It could fail
+    // intentionally (bug 115969).
+  } else { // try using basic methods:
+    /* You really shouldn't be making dependent windows without a parent.
+      But unparented modal (and therefore dependent) windows happen
+      in our codebase, so we allow it after some bellyaching: */
+    if (aChromeFlags & nsIWebBrowserChrome::CHROME_DEPENDENT)
+      NS_WARNING("dependent window created without a parent");
+
+    nsCOMPtr<nsIAppShellService> appShell(do_GetService(kAppShellServiceCID));
+    if (!appShell)
+      return NS_ERROR_FAILURE;
+    
+    appShell->CreateTopLevelWindow(0, 0, PR_FALSE, PR_FALSE,
+      aChromeFlags, nsIAppShellService::SIZE_TO_CONTENT,
+      nsIAppShellService::SIZE_TO_CONTENT, getter_AddRefs(newWindow));
+  }
+
+  // if anybody gave us anything to work with, use it
+  if (newWindow) {
+    newWindow->SetContextFlags(aContextFlags);
+    nsCOMPtr<nsIInterfaceRequestor> thing(do_QueryInterface(newWindow));
+    if (thing)
+      thing->GetInterface(NS_GET_IID(nsIWebBrowserChrome), (void **) _retval);
+  }
+
+  return *_retval ? NS_OK : NS_ERROR_FAILURE;
+}
Index: mozilla-src/mozilla/toolkit/xre/showOSAlert.cpp
diff -u /dev/null mozilla-src/mozilla/toolkit/xre/showOSAlert.cpp:1.1
--- /dev/null	Sun Mar 19 00:44:46 2006
+++ mozilla-src/mozilla/toolkit/xre/showOSAlert.cpp	Sun Feb  5 14:33:34 2006
@@ -0,0 +1,211 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: NPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Netscape Public License
+ * Version 1.1 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/NPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla Communicator client code.
+ *
+ * The Initial Developer of the Original Code is 
+ * Netscape Communications Corporation.
+ * Portions created by the Initial Developer are Copyright (C) 1998
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ * Don Bragg <dbragg@netscape.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or 
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the NPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the NPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include  <stdio.h>
+#include  <string.h>
+#include "nscore.h"
+
+//defines and includes for previous installation cleanup process
+#if defined (XP_WIN)
+#include <windows.h>
+#elif defined (XP_MAC)
+#include <Dialogs.h>
+#include <TextUtils.h>
+#elif defined (MOZ_WIDGET_GTK)
+#include <gtk/gtk.h>
+#elif defined (XP_OS2)
+#include <os2.h>
+#endif
+
+extern "C" void ShowOSAlert(const char* aMessage);
+
+#if defined (MOZ_WIDGET_GTK)
+
+static int sbAlertDone = 0;
+
+/**
+ * ns_gtk_alert_OK_callback
+ *
+ * Private callback function for the OK button on the alert.
+ *
+ * @param aWidget   the button widget
+ * @param aData     the alert dialog passed in for destruction
+ */
+void
+ns_gtk_alert_OK_callback(GtkWidget *aWidget, gpointer aData)
+{
+    GtkWidget *alertDlg = (GtkWidget *) aData;
+
+    if (!alertDlg)
+        return;
+
+    gtk_widget_destroy(alertDlg);
+    sbAlertDone = 1;
+}
+
+/**
+ * NS_gtk_alert
+ *
+ * Displays an alert with a message and an OK button in a modal 
+ * dialog that is centered on the screen.  Assumes gtk_main has 
+ * been called or explicit event queue flushing is being performed.
+ *
+ * @param aMessage   [required] the message to display in the alert
+ * @param aTitle     [optional] the alert dialog title;
+ *                              passing NULL defaults the title to ""
+ * @param aOKBtnText [optional] the text on the OK button;
+ *                              parametrized for i18n purposes;
+ *                              passing NULL defaults the button text to "OK"
+ * @return int error code       returns 0 for SUCCESS;
+ *                              returns -1 for param error;
+ *                              returns -2 for widget creation error
+ */
+int
+NS_gtk_alert(const char *aMessage, const char *aTitle, const char *aOKBtnText)
+{
+#ifdef DEBUG_dbragg
+    printf ("\n*** Now inside NS_gtk_alert *** \n");
+#endif 
+
+    GtkWidget *alertDlg = NULL;
+    GtkWidget *okBtn = NULL;
+    GtkWidget *msgLabel = NULL;
+    GtkWidget *packerLbl = NULL;
+    GtkWidget *packerBtn = NULL;
+    const char *okBtnText = aOKBtnText;
+    const char *title = aTitle;
+
+    if (!aMessage)
+        return -1;
+    if (!aOKBtnText)
+        okBtnText = "OK";
+    if (!aTitle)
+        title = " ";
+
+#ifdef DEBUG_dbragg
+    printf("title is: %s\n", title);
+#endif
+
+    alertDlg = gtk_dialog_new();
+    msgLabel = gtk_label_new(aMessage);
+    if (msgLabel)
+      gtk_label_set_line_wrap(GTK_LABEL(msgLabel), TRUE);
+    okBtn = gtk_button_new_with_label(okBtnText);
+    packerLbl = gtk_packer_new();
+    packerBtn = gtk_packer_new();
+    sbAlertDone = 0;
+
+    if (alertDlg && msgLabel && okBtn && packerBtn && packerLbl)
+    {
+        // pack widgets in dialog 
+        gtk_packer_set_default_border_width(GTK_PACKER(packerLbl), 20);
+        gtk_packer_add_defaults(GTK_PACKER(packerLbl), msgLabel, 
+            GTK_SIDE_BOTTOM, GTK_ANCHOR_CENTER, GTK_FILL_X);
+        gtk_packer_set_default_border_width(GTK_PACKER(packerBtn), 0);
+        gtk_packer_add_defaults(GTK_PACKER(packerBtn), okBtn, 
+            GTK_SIDE_BOTTOM, GTK_ANCHOR_CENTER, GTK_FILL_Y);
+        gtk_container_add(GTK_CONTAINER(GTK_DIALOG(alertDlg)->vbox), 
+            packerLbl);
+        gtk_container_add(GTK_CONTAINER(GTK_DIALOG(alertDlg)->action_area),
+            packerBtn);
+
+        gtk_window_set_modal(GTK_WINDOW(alertDlg), TRUE);
+        gtk_window_set_title(GTK_WINDOW(alertDlg), title);
+        gtk_window_set_position(GTK_WINDOW(alertDlg), GTK_WIN_POS_CENTER);
+
+        // register callback for OK button
+        gtk_signal_connect(GTK_OBJECT(okBtn), "clicked", 
+            GTK_SIGNAL_FUNC(ns_gtk_alert_OK_callback), alertDlg);
+        GTK_WIDGET_SET_FLAGS(okBtn, GTK_CAN_DEFAULT);
+        gtk_widget_grab_default(okBtn);
+
+        // show dialog
+        gtk_widget_show(msgLabel);
+        gtk_widget_show(packerLbl);
+        gtk_widget_show(okBtn);
+        gtk_widget_show(packerBtn);
+        gtk_widget_show(alertDlg);
+    }
+    else
+    {
+        return -2;
+    }
+
+    while (!sbAlertDone)
+    {
+        while (gtk_events_pending())
+            gtk_main_iteration();
+    }
+
+    return 0;
+}
+#endif //MOZ_WIDGET_GTK
+
+
+// The maximum allowed length of aMessage is 255 characters!
+void ShowOSAlert(const char* aMessage)
+{
+#ifdef DEBUG_dbragg
+printf("\n****Inside ShowOSAlert ***\n");	
+#endif 
+
+    const PRInt32 max_len = 255;
+    char message_copy[max_len+1] = { 0 };
+    PRInt32 input_len = strlen(aMessage);
+    PRInt32 copy_len = (input_len > max_len) ? max_len : input_len;
+    strncpy(message_copy, aMessage, copy_len);
+    message_copy[copy_len] = 0;
+
+#if defined (XP_WIN)
+    MessageBox(NULL, message_copy, NULL, MB_OK | MB_ICONERROR | MB_SETFOREGROUND );
+#elif (XP_MAC)
+    short buttonClicked;
+    StandardAlert(kAlertStopAlert, c2pstr(message_copy), nil, nil, &buttonClicked);
+#elif defined (MOZ_WIDGET_GTK)
+    NS_gtk_alert(message_copy, NULL, "OK");
+#elif defined (XP_OS2)
+    HAB hab = WinInitialize(0);
+    HMQ hmq = WinCreateMsgQueue(hmq,0);
+    WinMessageBox( HWND_DESKTOP, HWND_DESKTOP, message_copy, "", 0, MB_OK);
+    WinDestroyMsgQueue(hmq);
+    WinTerminate(hab);
+#endif
+    // It can't hurt to display the message on the console in any case,
+    // even if we have already tried to display it in a GUI window.
+    fprintf(stdout, "%s\n", aMessage);
+}
Index: mozilla-src/mozilla/xpcom/string/public/nsTAString.h
diff -u mozilla-src/mozilla/xpcom/string/public/nsTAString.h:1.1 mozilla-src/mozilla/xpcom/string/public/nsTAString.h:1.6
--- mozilla-src/mozilla/xpcom/string/public/nsTAString.h:1.1	Sat Nov 13 12:57:14 2004
+++ mozilla-src/mozilla/xpcom/string/public/nsTAString.h	Mon Nov 28 15:57:39 2005
@@ -37,6 +37,10 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
+#ifdef XSS /* XSS */
+#define XSS_NOT_TAINTED 0
+#define XSS_TAINTED 1
+#endif /* XSS */
 
   /**
    * The base for string comparators
@@ -346,7 +350,22 @@
       NS_COM void Replace( index_type cutStart, size_type cutLength, const self_type& readable );
       NS_COM void Replace( index_type cutStart, size_type cutLength, const substring_tuple_type& readable );
 
-      
+
+#ifdef XSS /* XSS */
+		/**
+		 * Checks if this string is tainted
+		 */
+	  NS_COM int xssGetTainted() const {
+		return xss_istainted;
+	  }
+
+	    /**
+	     * Sets this string to tainted
+		 */
+	  NS_COM void xssSetTainted(int tainted);
+
+#endif /* XSS */
+
         /**
          * this is public to support automatic conversion of tuple to abstract
          * string, which is necessary to support our API.
@@ -357,10 +376,13 @@
         , mLength(0)
         , mFlags(0)
         {
+#ifdef XSS /* XSS */
+		  xss_istainted = XSS_NOT_TAINTED;
+#endif /* XSS */
           Assign(tuple);
         }
 
-    protected:
+	protected:
 
       friend class nsTSubstringTuple_CharT;
 
@@ -385,6 +407,21 @@
       size_type   mLength;
       PRUint32    mFlags;
 
+#ifdef XSS /* XSS */
+	  
+	  // flag if the string is tainted
+	  int xss_istainted;
+
+#endif /* XSS */
+
+#ifdef XSS /* XSS */
+	  
+	  nsTAString_CharT() {
+		  xss_istainted = XSS_NOT_TAINTED;
+	  }
+	  
+#endif /* XSS */
+
         /**
          * nsTAString must be subclassed before it can be instantiated.
          */
@@ -393,7 +430,13 @@
         , mData(data)
         , mLength(length)
         , mFlags(flags)
-        {}
+        {
+#ifdef XSS /* XSS */
+	  
+		  xss_istainted = XSS_NOT_TAINTED;
+	  
+#endif /* XSS */
+		}
 
         /**
          * optional ctor for use by subclasses.
@@ -404,7 +447,8 @@
       nsTAString_CharT(PRUint32 flags)
         : mVTable(obsolete_string_type::sCanonicalVTable)
         , mFlags(flags)
-        {}
+        {
+		}
 
         /**
          * get pointer to internal string buffer (may not be null terminated).
Index: mozilla-src/mozilla/xpcom/string/public/nsTDependentSubstring.h
diff -u mozilla-src/mozilla/xpcom/string/public/nsTDependentSubstring.h:1.1 mozilla-src/mozilla/xpcom/string/public/nsTDependentSubstring.h:1.3
--- mozilla-src/mozilla/xpcom/string/public/nsTDependentSubstring.h:1.1	Sat Nov 13 12:57:14 2004
+++ mozilla-src/mozilla/xpcom/string/public/nsTDependentSubstring.h	Mon Sep  5 17:16:31 2005
@@ -63,20 +63,34 @@
       nsTDependentSubstring_CharT( const abstract_string_type& str, PRUint32 startPos, PRUint32 length = size_type(-1) )
         : substring_type(F_NONE)
         {
+#ifdef XSS /* XSS */
+		  xss_istainted = str.xssGetTainted();
+#endif /* XSS */
           Rebind(str, startPos, length);
         }
 
       nsTDependentSubstring_CharT( const substring_type& str, PRUint32 startPos, PRUint32 length = size_type(-1) )
         : substring_type(F_NONE)
         {
+#ifdef XSS /* XSS */
+		  xss_istainted = str.xssGetTainted();
+#endif /* XSS */
           Rebind(str, startPos, length);
         }
 
       nsTDependentSubstring_CharT( const char_type* start, const char_type* end )
-        : substring_type(NS_CONST_CAST(char_type*, start), end - start, F_NONE) {}
+        : substring_type(NS_CONST_CAST(char_type*, start), end - start, F_NONE) {
+#ifdef XSS /* XSS */
+		  xss_istainted = XSS_NOT_TAINTED;
+#endif /* XSS */
+		}
 
       nsTDependentSubstring_CharT( const const_iterator& start, const const_iterator& end )
-        : substring_type(NS_CONST_CAST(char_type*, start.get()), end.get() - start.get(), F_NONE) {}
+        : substring_type(NS_CONST_CAST(char_type*, start.get()), end.get() - start.get(), F_NONE) {
+#ifdef XSS /* XSS */
+		  xss_istainted = XSS_NOT_TAINTED;
+#endif /* XSS */
+		}
 
       // auto-generated copy-constructor OK (XXX really?? what about base class copy-ctor?)
 
Index: mozilla-src/mozilla/xpcom/string/public/nsTString.h
diff -u mozilla-src/mozilla/xpcom/string/public/nsTString.h:1.1 mozilla-src/mozilla/xpcom/string/public/nsTString.h:1.2
--- mozilla-src/mozilla/xpcom/string/public/nsTString.h:1.1	Sat Nov 13 12:57:14 2004
+++ mozilla-src/mozilla/xpcom/string/public/nsTString.h	Mon Nov 14 16:50:11 2005
@@ -76,6 +76,16 @@
           Assign(data, length);
         }
 
+#ifdef XSS /* XSS */
+      explicit
+      nsTString_CharT( int xss_tainted, const char_type* data,  size_type length = size_type(-1))
+        : substring_type()
+        {
+          Assign(data, length);
+		  xss_istainted = xss_tainted;
+        }
+#endif /* XSS */
+
       nsTString_CharT( const self_type& str )
         : substring_type()
         {
Index: mozilla-src/mozilla/xpcom/string/public/nsTSubstring.h
diff -u mozilla-src/mozilla/xpcom/string/public/nsTSubstring.h:1.1 mozilla-src/mozilla/xpcom/string/public/nsTSubstring.h:1.3
--- mozilla-src/mozilla/xpcom/string/public/nsTSubstring.h:1.1	Sat Nov 13 12:57:14 2004
+++ mozilla-src/mozilla/xpcom/string/public/nsTSubstring.h	Mon Nov 28 15:57:02 2005
@@ -313,7 +313,13 @@
         // default initialization 
       nsTSubstring_CharT()
         : abstract_string_type(
-              NS_CONST_CAST(char_type*, char_traits::sEmptyBuffer), 0, F_TERMINATED) {}
+              NS_CONST_CAST(char_type*, char_traits::sEmptyBuffer), 0, F_TERMINATED) {
+#ifdef XSS /* XSS */
+	  
+		  xss_istainted = XSS_NOT_TAINTED;
+
+#endif /* XSS */
+	  }
 
         // allow subclasses to initialize fields directly
       nsTSubstring_CharT( char_type *data, size_type length, PRUint32 flags )
Index: mozilla-src/mozilla/xpcom/string/src/nsReadableUtils.cpp
diff -u mozilla-src/mozilla/xpcom/string/src/nsReadableUtils.cpp:1.1 mozilla-src/mozilla/xpcom/string/src/nsReadableUtils.cpp:1.3
--- mozilla-src/mozilla/xpcom/string/src/nsReadableUtils.cpp:1.1	Sat Nov 13 12:57:10 2004
+++ mozilla-src/mozilla/xpcom/string/src/nsReadableUtils.cpp	Mon Nov 28 15:56:34 2005
@@ -32,6 +32,11 @@
   {
     aDest.Truncate();
     LossyAppendUTF16toASCII(aSource, aDest);
+#ifdef XSS /* XSS */
+	if (aSource.xssGetTainted() == XSS_TAINTED) {
+		aDest.xssSetTainted(XSS_TAINTED);
+	}
+#endif /* XSS */
   }
 
 NS_COM
@@ -40,6 +45,11 @@
   {
     aDest.Truncate();
     AppendASCIItoUTF16(aSource, aDest);
+#ifdef XSS /* XSS */
+	if (aSource.xssGetTainted() == XSS_TAINTED) {
+		aDest.xssSetTainted(XSS_TAINTED);
+	}
+#endif /* XSS */
   }
 
 NS_COM
@@ -112,6 +122,12 @@
     LossyConvertEncoding<PRUnichar, char> converter(dest.get());
     
     copy_string(aSource.BeginReading(fromBegin), aSource.EndReading(fromEnd), converter);
+#ifdef XSS /* XSS */
+	if (aSource.xssGetTainted() == XSS_TAINTED) {
+		aDest.xssSetTainted(XSS_TAINTED);
+	}
+#endif /* XSS */
+
   }
 
 NS_COM
@@ -132,6 +148,11 @@
     LossyConvertEncoding<char, PRUnichar> converter(dest.get());
 
     copy_string(aSource.BeginReading(fromBegin), aSource.EndReading(fromEnd), converter);
+#ifdef XSS /* XSS */
+	if (aSource.xssGetTainted() == XSS_TAINTED) {
+		aDest.xssSetTainted(XSS_TAINTED);
+	}
+#endif /* XSS */
   }
 
 NS_COM
@@ -161,6 +182,12 @@
     copy_string(aSource.BeginReading(source_start),
                 aSource.EndReading(source_end), calculator);
 
+#ifdef XSS /* XSS */
+	if (aSource.xssGetTainted() == XSS_TAINTED) {
+		aDest.xssSetTainted(XSS_TAINTED);
+	}
+#endif /* XSS */
+
     PRUint32 count = calculator.Size();
 
     if (count)
@@ -217,6 +244,11 @@
                 aSource.EndReading(source_end), calculator);
 
     PRUint32 count = calculator.Length();
+#ifdef XSS /* XSS */
+	if (aSource.xssGetTainted() == XSS_TAINTED) {
+		aDest.xssSetTainted(XSS_TAINTED);
+	}
+#endif /* XSS */
 
     if (count)
       {
@@ -676,6 +708,11 @@
     aDest.SetLength(aSource.Length());
     CopyToUpperCase converter(aDest.BeginWriting(toBegin));
     copy_string(aSource.BeginReading(fromBegin), aSource.EndReading(fromEnd), converter);
+#ifdef XSS /* XSS */
+	if (aSource.xssGetTainted() == XSS_TAINTED) {
+		aDest.xssSetTainted(XSS_TAINTED);
+	}
+#endif /* XSS */
   }
 
   /**
@@ -764,6 +801,12 @@
     aDest.SetLength(aSource.Length());
     CopyToLowerCase converter(aDest.BeginWriting(toBegin));
     copy_string(aSource.BeginReading(fromBegin), aSource.EndReading(fromEnd), converter);
+#ifdef XSS /* XSS */
+	if (aSource.xssGetTainted() == XSS_TAINTED) {
+		aDest.xssSetTainted(XSS_TAINTED);
+	}
+#endif /* XSS */
+
   }
 
 template <class StringT, class IteratorT, class Comparator>
Index: mozilla-src/mozilla/xpcom/string/src/nsTAString.cpp
diff -u mozilla-src/mozilla/xpcom/string/src/nsTAString.cpp:1.1 mozilla-src/mozilla/xpcom/string/src/nsTAString.cpp:1.3
--- mozilla-src/mozilla/xpcom/string/src/nsTAString.cpp:1.1	Sat Nov 13 12:57:10 2004
+++ mozilla-src/mozilla/xpcom/string/src/nsTAString.cpp	Tue Jul 26 17:39:37 2005
@@ -189,6 +189,9 @@
 void
 nsTAString_CharT::Assign( const self_type& readable )
   {
+#ifdef XSS /* XSS */
+	xss_istainted = readable.xss_istainted;
+#endif /* XSS */
     if (mVTable == obsolete_string_type::sCanonicalVTable)
       AsSubstring()->Assign(readable);
     else
@@ -238,6 +241,11 @@
 void
 nsTAString_CharT::Append( const self_type& readable )
   {
+#ifdef XSS /* XSS */
+	if (readable.xssGetTainted() == XSS_TAINTED) {
+		xssSetTainted(XSS_TAINTED);
+    }
+#endif /* XSS */
     if (mVTable == obsolete_string_type::sCanonicalVTable)
       AsSubstring()->Append(readable);
     else
@@ -285,6 +293,11 @@
 void
 nsTAString_CharT::Insert( const self_type& readable, index_type pos )
   {
+#ifdef XSS /* XSS */
+	if (readable.xss_istainted) {
+		xss_istainted = readable.xss_istainted;
+    }
+#endif /* XSS */
     if (mVTable == obsolete_string_type::sCanonicalVTable)
       AsSubstring()->Insert(readable, pos);
     else
@@ -339,6 +352,11 @@
 void
 nsTAString_CharT::Replace( index_type cutStart, size_type cutLength, const self_type& readable )
   {
+#ifdef XSS /* XSS */
+	if (readable.xss_istainted) {
+		xss_istainted = readable.xss_istainted;
+    }
+#endif /* XSS */
     if (mVTable == obsolete_string_type::sCanonicalVTable)
       AsSubstring()->Replace(cutStart, cutLength, readable);
     else
@@ -403,3 +421,12 @@
     size_type length = GetReadableBuffer(&data);
     return substring_type(NS_CONST_CAST(char_type*, data), length, 0);
   }
+
+#ifdef XSS /* XSS */
+
+void
+nsTAString_CharT::xssSetTainted(int tainted)
+  {
+    xss_istainted = tainted;
+  }
+#endif /* XSS */
Index: mozilla-src/mozilla/xpcom/string/src/nsTSubstring.cpp
diff -u mozilla-src/mozilla/xpcom/string/src/nsTSubstring.cpp:1.1 mozilla-src/mozilla/xpcom/string/src/nsTSubstring.cpp:1.2
--- mozilla-src/mozilla/xpcom/string/src/nsTSubstring.cpp:1.1	Sat Nov 13 12:57:10 2004
+++ mozilla-src/mozilla/xpcom/string/src/nsTSubstring.cpp	Tue Jul 26 17:39:45 2005
@@ -301,6 +301,10 @@
     if (&str == this)
       return;
 
+#ifdef XSS /* XSS */
+	xss_istainted = str.xss_istainted;
+#endif /* XSS */
+
     if (str.mFlags & F_SHARED)
       {
         // nice! we can avoid a string copy :-)
@@ -355,6 +359,9 @@
       Assign(*readable.AsSubstring());
     else
       Assign(readable.ToSubstring());
+#ifdef XSS /* XSS */
+	xssSetTainted(readable.xssGetTainted());
+#endif /* XSS */
   }
 
 
